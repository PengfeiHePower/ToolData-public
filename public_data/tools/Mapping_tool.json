[
  {
    "parent tool name": "Address From To Latitude Longitude",
    "parent tool description": "Free API to convert coordinates (latitude, longitude) to and from address \nAn Easy, Open, Worldwide, Free Geocoding API",
    "required_parameters": [
      {
        "name": "address",
        "type": "STRING",
        "description": "",
        "default": "Eiffel Tower"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://address-from-to-latitude-longitude.p.rapidapi.com/geolocationapi\"\nquerystring = {\"address\": address}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"address-from-to-latitude-longitude.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Address From To Latitude Longitude: Address to Coordinates  (latitude longitude)",
    "tool description": "Converts an address (including city, state, and street) into latitude and longitude coordinates. This endpoint is part of a free, open, and worldwide geocoding API that facilitates bidirectional address-to-coordinate and coordinate-to-address conversions. It leverages a comprehensive database to ensure accurate GPS calculations, enabling users to reliably obtain precise geographic positions for any given location.",
    "API name": "Address to Coordinates  (latitude longitude)",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of potential geographic locations matching an input address. Each result includes precise latitude and longitude coordinates, a full formatted address string, and broken-down address components like street, city, and postal code. A relevance score is also provided to indicate the confidence of each match, which is useful for disambiguating locations.",
      "output_format": "The output is a JSON object with a single key, \"Results\", which contains an array of result objects. The entire output can be an empty string if no results are found. Some fields within a result object, such as `addressnumber` and `street`, are optional and may be null or absent depending on the location type (e.g., landmarks vs. street addresses)."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "type": "NUMBER"
          },
          {
            "name": "latitude",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "type": "STRING"
          },
          {
            "name": "latitude",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "type": "NUMBER"
          },
          {
            "name": "latitude",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "type": "NUMBER"
          },
          {
            "name": "latitude",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "type": "NUMBER"
          },
          {
            "name": "lat",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "type": "NUMBER"
          },
          {
            "name": "latitude",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "type": "NUMBER"
          },
          {
            "name": "lat",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "type": "NUMBER"
          },
          {
            "name": "lat",
            "type": "NUMBER"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "type": "NUMBER"
          },
          {
            "name": "lon",
            "type": "NUMBER"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "county",
        "type": "string",
        "description": "",
        "default": "chambers"
      },
      {
        "name": "state",
        "type": "string",
        "description": "",
        "default": "al"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/rest/v1/public/boundary/censustract/county/{county}/state/{state}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Get Census Tract by County",
    "tool description": "Returns a GeoJson representation of CensusTracts by county. This endpoint is part of the US Zipcode, County, City, and State Boundaries API, which provides fast programmatic access to geographic boundary data. It leverages a specialized database of US administrative boundaries to generate precise GeoJson outputs, enabling developers to integrate detailed spatial data into applications for mapping, demographic analysis, or location-based services.",
    "API name": "Get Census Tract by County",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns geographic boundary data for US Census Tracts within a specified county. The output is a GeoJSON object, which is a standard format for encoding geographic features and their non-spatial attributes. This data is intended for use in applications that require detailed spatial information, such as cartographic mapping, demographic analysis, or location-based services.",
      "output_format": "The output is a single JSON object that conforms to the GeoJSON specification. Given that a county contains multiple census tracts, the structure is most likely a `FeatureCollection` object. This object would contain a `features` array, where each element is a `Feature` object representing a single Census Tract, including its geometry (the boundary polygon) and properties (metadata like tract ID). The description does not mention pagination, so it's likely all tracts for a county are returned in a single response."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The GeoJSON output can be processed to extract centroid coordinates of census tracts for map visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "The GeoJSON output can be directly used to display census tract boundaries on a static map"
          },
          {
            "name": "center",
            "description": "The centroid of the census tract boundaries can be calculated from the GeoJSON to center the map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "points",
            "description": "Coordinates extracted from the census tract boundaries can be used as routing waypoints"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from census tract centroid can be used to find nearby places"
          },
          {
            "name": "lon",
            "description": "Longitude from census tract centroid can be used to find nearby places"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "state",
        "type": "string",
        "description": "",
        "default": "va"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/rest/v1/public/boundary/censustract/state/{state}/county/names\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Get County names by State.",
    "tool description": "Returns a list of county names based on a state's acronym. This endpoint is part of the US Zipcode, County, City, and State Boundaries API, which provides GeoJson data for integrating precise geographical boundaries into applications. It leverages a comprehensive database of US counties to deliver accurate and efficient location-based queries, enabling developers to enhance their systems with detailed regional data.",
    "API name": "Get County names by State.",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "Based on the provided examples, this tool's output appears to be either an HTML document or an empty string. The single non-empty example is an HTML page indicating a subscription error, suggesting it's an error message. The intended output, as per the description, is a list of county names, but this is not reflected in the examples.",
      "output_format": "The output format is inconsistent and ambiguous based on the examples. One example is a string containing a full HTML document. The other examples are empty strings. It is not possible to determine the format of a successful response (e.g., JSON array of strings, GeoJSON) from the data provided."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Get Census Tract by County",
        "connect params": [
          {
            "name": "county",
            "description": "County name that would be provided by the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "NUMBER",
        "description": "",
        "default": "-122.809678"
      },
      {
        "name": "latitude",
        "type": "NUMBER",
        "description": "",
        "default": "45.507378"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/reaperfire/rest/v1/public/boundary/place/within\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Query by Location for Place boundaries",
    "tool description": "Queries US Census Places shapefiles to retrieve geographic boundaries for incorporated and unincorporated places based on location input. This endpoint leverages the US Zipcode, County, City, and State Boundaries API's capability to deliver GeoJSON results, enabling programmatic integration of detailed spatial data into applications. By accessing census-derived datasets, it provides precise municipal and regional boundary information to support location-based analysis and mapping workflows.",
    "API name": "Query by Location for Place boundaries",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool outputs geographic boundary data for US Census Places, which includes both incorporated and unincorporated areas like cities and towns. The output is a GeoJSON object containing the precise geometric shapes (boundaries) of these places, derived from US Census shapefiles. This information is intended for use in mapping applications and location-based spatial analysis.",
      "output_format": "The output format is explicitly stated to be GeoJSON. This will likely be a GeoJSON FeatureCollection object, which is a standard way to represent a list of geographic features. Each feature in the collection would represent a single place and contain a 'geometry' (e.g., a Polygon or MultiPolygon) and a 'properties' object with metadata. The exact keys within the 'properties' object are unknown as the provided examples are empty."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The GeoJSON boundary data can be used to calculate the center point of the place boundary for map display"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "The GeoJSON boundary data can be used to calculate the center point of the place boundary for map display"
          },
          {
            "name": "bounds",
            "description": "The GeoJSON boundary data can be used to determine the bounding box of the place boundary"
          },
          {
            "name": "geojson",
            "description": "The GeoJSON boundary data can be directly used to display the place boundary on the map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "points",
            "description": "The GeoJSON boundary data can be used to extract points along the boundary for routing purposes"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "The GeoJSON boundary data can be used to extract points along the boundary for routing purposes"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "The GeoJSON boundary data can be used to extract a point on the boundary as the origin"
          },
          {
            "name": "destination",
            "description": "The GeoJSON boundary data can be used to extract a point on the boundary as the destination"
          },
          {
            "name": "waypoints",
            "description": "The GeoJSON boundary data can be used to extract points along the boundary as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "The GeoJSON boundary data can be used to extract a point on the boundary as the starting point"
          },
          {
            "name": "destination",
            "description": "The GeoJSON boundary data can be used to extract a point on the boundary as the destination"
          },
          {
            "name": "via",
            "description": "The GeoJSON boundary data can be used to extract points along the boundary as via points"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "STRING",
        "description": "longitude",
        "default": "-92.3629"
      },
      {
        "name": "latitude",
        "type": "NUMBER",
        "description": "latitude",
        "default": "34.6937"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/reaperfire/rest/v1/public/boundary/neighborhood/within\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
    "tool description": "Queries neighborhood boundaries based on a location input, including longitude and latitude. This API provides fast programmatic access to GeoJson US boundaries, leveraging a comprehensive database of zip codes, counties, cities, and states to enable precise geographic integration into applications. It allows developers to efficiently retrieve spatial data for location-based services, ensuring accurate mapping and analysis capabilities through its optimized, low-latency architecture.",
    "API name": "Query by Location for Neighborhood boundaries",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns geographic boundary data for the US neighborhood that contains a specified latitude and longitude point. The output is in the GeoJSON format, which includes the geometric polygon defining the neighborhood's boundary and likely contains properties such as the neighborhood's name. This data is intended for spatial analysis and integration into mapping applications or location-based services.",
      "output_format": "The output is described as a GeoJSON object. This is a specific JSON structure, likely a 'Feature' or 'FeatureCollection'. A 'Feature' would contain 'geometry' and 'properties' keys. The lack of concrete examples means the exact top-level structure (single object vs. array) and the specific keys within the 'properties' object are unknown."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "latitude",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "latitude",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "latitude",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "latitude",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "lat",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude values from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude values from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude values from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude values from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "lat",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "lat",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude value from the source tool's GeoJSON output"
          },
          {
            "name": "lat",
            "description": "Latitude value from the source tool's GeoJSON output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Latitude and longitude values from the source tool's GeoJSON output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "NUMBER",
        "description": "longitude",
        "default": "-92.3629"
      },
      {
        "name": "latitude",
        "type": "NUMBER",
        "description": "latitude",
        "default": "34.6937"
      }
    ],
    "optional_parameters": [
      {
        "name": "showwithinpoint",
        "type": "BOOLEAN",
        "description": "Show the location(lat,long) used as a GeoJsonPoint in results.",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/reaperfire/rest/v1/public/boundary/zipcode/within\"\nquerystring = {\"longitude\": longitude, \"showwithinpoint\": showwithinpoint, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
    "tool description": "Searches for zipcodes that intersect a specific location, leveraging the US Zipcode, County, City, and State Boundaries API. This endpoint uses GeoJSON data to efficiently retrieve precise geographic boundaries, enabling accurate integration of location-based queries into applications. The API provides fast, programmatic access to a comprehensive dataset of US postal codes and administrative regions, ensuring reliable results for developers needing to map or analyze spatial relationships.",
    "API name": "Query by Location for Zipcode boundaries",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns geographic boundary data for US zipcodes that intersect a specified input location. The output is formatted as a GeoJSON FeatureCollection, where each feature represents a single zipcode. This allows applications to visualize the zipcode's shape on a map or perform further spatial analysis, with properties for each feature likely including the zipcode, city, and state.",
      "output_format": "The output is a single JSON object conforming to the GeoJSON `FeatureCollection` standard. This object contains a `features` key, which holds an array of GeoJSON `Feature` objects. Each `Feature` object consists of a `geometry` (a Polygon or MultiPolygon representing the zipcode boundary) and a `properties` object containing metadata about the zipcode (e.g., the zipcode itself, city, state)."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the center coordinates from a zipcode boundary feature's geometry to create a map centered on that zipcode"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Can use the center coordinates from a zipcode boundary feature's geometry to create a static map centered on that zipcode"
          },
          {
            "name": "geojson",
            "description": "Can directly use the GeoJSON geometry from the zipcode boundary to draw the boundary on a map"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Get County names by State.",
        "connect params": [
          {
            "name": "state",
            "description": "Can use the state value from the properties of a zipcode feature to find counties in that state"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a longitude coordinate from the zipcode boundary geometry to find the county that contains this point"
          },
          {
            "name": "latitude",
            "description": "Can use a latitude coordinate from the zipcode boundary geometry to find the county that contains this point"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a longitude coordinate from the zipcode boundary geometry to find neighborhoods at this location"
          },
          {
            "name": "latitude",
            "description": "Can use a latitude coordinate from the zipcode boundary geometry to find neighborhoods at this location"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a longitude coordinate from the zipcode boundary geometry to find places at this location"
          },
          {
            "name": "latitude",
            "description": "Can use a latitude coordinate from the zipcode boundary geometry to find places at this location"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "NUMBER",
        "description": "",
        "default": "-122.809678"
      },
      {
        "name": "latitude",
        "type": "NUMBER",
        "description": "",
        "default": "45.50737"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/reaperfire/rest/v1/public/boundary/county/within\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Query by Location for County boundaries",
    "tool description": "Queries US location data to retrieve county boundaries in GeoJson format based on input parameters like zip code or coordinates. This API leverages a comprehensive database of US zipcodes, counties, cities, and states to provide precise geographic boundaries, enabling developers to efficiently integrate location-based spatial data into applications with high performance and accuracy.",
    "API name": "Query by Location for County boundaries",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool outputs geographic boundary data for a specific US county. This data is provided in the GeoJSON format, which includes the geometric coordinates that define the county's shape. This output is intended for use in applications that need to display or analyze geographic areas, such as plotting county lines on a map.",
      "output_format": "The output is a JSON object that conforms to the GeoJSON specification. This is a nested structure, typically a 'Feature' or 'FeatureCollection' object containing coordinates and other metadata. The provided empty string examples are likely not representative of a successful output; a valid response would be a populated JSON object. It is unknown how a 'not found' case is handled, but it could be an empty GeoJSON FeatureCollection or a null value."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "reason": "Can use county boundary GeoJSON to display the county outline on a static map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "reason": "Can use county boundary GeoJSON to constrain or enhance routing within the county boundaries"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "reason": "Can use county boundary GeoJSON to enhance routes with county boundary information"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "geometry_format",
            "reason": "Can specify 'geojson' to work with the county boundary data for route visualization"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "geometry_format",
            "reason": "Can specify 'geojson' to work with the county boundary data for path visualization"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "City List",
    "parent tool description": "List of all countries and cities",
    "required_parameters": [
      {
        "name": "iso",
        "type": "string",
        "description": "",
        "default": "iq"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://city-list.p.rapidapi.com/api/getCity/{iso}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"city-list.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "City List: getCity",
    "tool description": "Returns a list of cities from a comprehensive database of countries and cities, leveraging the parent tool's extensive dataset to provide accurate and up-to-date geographic information.",
    "API name": "getCity",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographic locations, such as cities and administrative districts, based on a name query. For each location, it provides detailed information including a unique ID, primary and alternative names, country and state/province codes, population, geographic coordinates (latitude and longitude), and timezone. This output is useful for disambiguating locations with the same name and retrieving specific geographic data.",
      "output_format": "The output is a JSON-encoded string representing a single object. This root object contains a key named '0' (as a string), which holds an array of location objects. A notable characteristic is the 'alternames' field within each location object, which is a stringified JSON array rather than a native one. Fields such as 'parent_id', 'left', 'right', and 'depth' can be null, and 'population' can be zero."
    },
    "connected tools": [
      {
        "tool name": "Address From To Latitude Longitude: Address to Coordinates  (latitude longitude)",
        "connect params": [
          {
            "name": "address",
            "description": "Can use city names from the getCity output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude values from getCity output"
          },
          {
            "name": "latitude",
            "description": "Can use latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude values from getCity output"
          },
          {
            "name": "latitude",
            "description": "Can use latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude values from getCity output"
          },
          {
            "name": "latitude",
            "description": "Can use latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude values from getCity output"
          },
          {
            "name": "latitude",
            "description": "Can use latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude values from getCity output"
          },
          {
            "name": "lat",
            "description": "Can use latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude values from getCity output"
          },
          {
            "name": "latitude",
            "description": "Can use latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude values from getCity output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude values from getCity output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Heightmap from Latitude and Longitude",
    "parent tool description": "You provide coordinates(latitude, longitude) and api returns height map.\nHeightmap is black &amp; white png image where the brightest pixel has the most elevation.",
    "required_parameters": [
      {
        "name": "lng0",
        "type": "NUMBER",
        "description": "",
        "default": "-112.726473"
      },
      {
        "name": "lng1",
        "type": "NUMBER",
        "description": "",
        "default": "-111.561530"
      },
      {
        "name": "lat1",
        "type": "NUMBER",
        "description": "",
        "default": "35.940449"
      },
      {
        "name": "lat0",
        "type": "NUMBER",
        "description": "",
        "default": "36.477988"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://heightmap-from-latitude-and-longitude.p.rapidapi.com/\"\nquerystring = {\"lng0\": lng0, \"lng1\": lng1, \"lat1\": lat1, \"lat0\": lat0}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"heightmap-from-latitude-and-longitude.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Heightmap from Latitude and Longitude: get heightmap from two geopoints",
    "tool description": "Generates a black and white PNG heightmap based on two geopoints (latitude, longitude), visualizing elevation data where brightness corresponds to terrain height. This uses a geospatial API's underlying capability to process coordinate pairs and return topographical imagery, leveraging a database of elevation metrics to create detailed terrain representations for applications like route planning or geographic analysis.",
    "API name": "get heightmap from two geopoints",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool outputs a black and white PNG image file representing a heightmap of a geographic area defined by two coordinate points. In this image, the brightness of each pixel corresponds to the terrain's elevation at that location. This visual representation of topographical data is useful for geographic analysis, route planning, and other geospatial applications.",
      "output_format": "The output is described as a single black and white PNG image file. The provided examples are empty strings, which likely indicates that the tool returns raw binary data or a base64-encoded string which cannot be rendered as a simple string example. The output is not a structured format like JSON and does not involve pagination or nesting."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "The heightmap PNG can be used as a base layer for visualization with geographic overlays"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "z",
            "description": "The heightmap can be used to supplement terrain data at specific zoom levels"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "The heightmap can be processed to generate hillshading effects for the same geographic area"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Map",
    "parent tool description": "MapFan API \u306e\u5730\u56f3API\u3067\u3059\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u5730\u56f3\u306b\u5fc5\u8981\u306aWMTS\u5f62\u5f0f\u306e\u5730\u56f3\u753b\u50cf\u3084\u3001\u6307\u5b9a\u3055\u308c\u305f\u7def\u5ea6\u7d4c\u5ea6\u30fb\u30b5\u30a4\u30ba\u30fb\u7e2e\u5c3a\u306e\u9759\u6b62\u753b\u5730\u56f3\u753b\u50cf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "tilerow",
        "type": "NUMBER",
        "description": "### WMTS\u30bf\u30a4\u30eb\u756a\u53f7\uff08\u7def\u5ea6\u65b9\u5411\uff09\n\u5730\u56f3\u53d6\u5f97\u4f4d\u7f6e\u306e\u7def\u5ea6\u3092WMTS\u30bf\u30a4\u30eb\u756a\u53f7\u306b\u5909\u63db\u3057\u305f\u5024",
        "default": "25806"
      },
      {
        "name": "tilematrix",
        "type": "STRING",
        "description": "### \u30bf\u30a4\u30eb\u30de\u30c8\u30ea\u30c3\u30af\u30b9\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[EPSG\u30b3\u30fc\u30c9]:[\u30b9\u30b1\u30fc\u30eb\u5024]`\n\n|\u9805\u76ee|\u5024|\n|---|---|\n|EPSG\u30b3\u30fc\u30c9|EPSG:3857<br>EPSG:900913<br>\u306e\u3044\u305a\u308c\u304b|\n|\u30b9\u30b1\u30fc\u30eb|6 \uff5e 21<br>\u306e\u3044\u305a\u308c\u304b|",
        "default": "EPSG:3857:16"
      },
      {
        "name": "tilecol",
        "type": "NUMBER",
        "description": "### WMTS\u30bf\u30a4\u30eb\u756a\u53f7\uff08\u7d4c\u5ea6\u65b9\u5411\uff09\n\u5730\u56f3\u53d6\u5f97\u4f4d\u7f6e\u306e\u7d4c\u5ea6\u3092WMTS\u30bf\u30a4\u30eb\u756a\u53f7\u306b\u5909\u63db\u3057\u305f\u5024",
        "default": "58211"
      }
    ],
    "optional_parameters": [
      {
        "name": "rotationangle",
        "type": "NUMBER",
        "description": "### \u89d2\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\n\u6ce8\u8a18\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u305f\u89d2\u5ea6\u306b\u50be\u3051\u305f\u753b\u50cf\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "mapstyle",
        "type": "STRING",
        "description": "### \u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u6307\u5b9a\u7528\u30d1\u30e9\u30e1\u30fc\u30bf\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u30c7\u30b6\u30a4\u30f3]_[\u6ce8\u8a18\u30b5\u30a4\u30ba]`\n|\u30c7\u30b6\u30a4\u30f3|\u5024|\n|---|---|\n|\u6a19\u6e96|std|\n|\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb|gray|\n|RPG\u98a8\u5730\u56f3|rpg|\n|\u53e4\u5730\u56f3\u98a8\u5730\u56f3|antique|\n|\u9053\u8def\u5f37\u8abf\u5730\u56f3|hlightroad|\n|\u9244\u9053\u5f37\u8abf\u5730\u56f3|hlightrail|\n|\u5370\u5237\u7528\u767d\u9ed2\u30c7\u30b6\u30a4\u30f3|monochrome|\n|\u304a\u3082\u3066\u306a\u3057\u30de\u30c3\u30d7|tourism|\n\n|\u6ce8\u8a18\u30b5\u30a4\u30ba|\u5024|\n|---|---|\n|\u4e2d|pc|\n|\u5927|sp|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`std_pc`\n\n#### \u6ce8\u8a18\n\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "landmarkicon",
        "type": "ENUM",
        "description": "### \u30e9\u30f3\u30c9\u30de\u30fc\u30af\u30a2\u30a4\u30b3\u30f3\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f \u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "resolution",
        "type": "ENUM",
        "description": "### \u89e3\u50cf\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\n\u89e3\u50cf\u5ea6\u306b2\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6a19\u6e96\u306e2\u500d\u306e\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304c\u8fd4\u3055\u308c\u30014\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6a19\u6e96\u306e4\u500d\u306e\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n|\u89e3\u50cf\u5ea6|\u5024|\u753b\u50cf\u30b5\u30a4\u30ba|\n|---|---|---|\n|\u6a19\u6e96|1|256\u00d7256|\n|2\u500d|2|512\u00d7512|\n|4\u500d|4|1024\u00d71024|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "contour",
        "type": "ENUM",
        "description": "### \u7b49\u9ad8\u7dda\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`on`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "bldgname",
        "type": "ENUM",
        "description": "### \u30d3\u30eb\u540d\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\n- mapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u30d3\u30eb\u540d\u79f0\u306f\u3001\u30b9\u30b1\u30fc\u30eb\u304c19\u4ee5\u4e0a\u306e\u5834\u5408\u306e\u307f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "logo",
        "type": "ENUM",
        "description": "### \u30d6\u30e9\u30f3\u30c9\u30ed\u30b4\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "target",
        "type": "ENUM",
        "description": "### \u5730\u56f3\u306e\u8868\u793a\u5185\u5bb9\n|\u8868\u793a\u5185\u5bb9|\u5024|\n|---|---|\n|\u80cc\u666f\u306e\u307f\u3092\u8868\u793a|1|\n|\u6ce8\u8a18\u306e\u307f\u3092\u8868\u793a|2|\n|\u80cc\u666f + \u6ce8\u8a18\u3092\u8868\u793a|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`3`",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "### \u51fa\u529b\u3059\u308b\u753b\u50cf\u5f62\u5f0f\n\n|\u753b\u50cf\u5f62\u5f0f|\u5024|\n|---|---|\n|png|image/png|\n|jpeg|image/jpeg|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`image/png`",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-map.p.rapidapi.com/map\"\nquerystring = {\"tilerow\": tilerow, \"tilematrix\": tilematrix, \"tilecol\": tilecol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-map.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Map: map",
    "tool description": "Retrieves a WMTS map tile using tilematrix, tilerow, and tilecol parameters. This is part of the MapFan API, which provides WMTS map tiles and static maps based on geographic coordinates, size, and scale. The API leverages a comprehensive database of geographical data to enable applications like scrollable maps, offering precise and scalable map imagery for developers.",
    "API name": "map",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single map tile as a PNG image. This image is a visual representation of a specific geographical area, determined by the tile matrix, row, and column parameters provided in the request. These individual image tiles are intended to be requested and stitched together by a client application to form a complete, scrollable map view.",
      "output_format": "The output is raw binary data representing a single image in PNG format. It is not a structured text format like JSON or XML. The content begins with the standard PNG file signature (e.g., \ufffdPNG\\r\\n\\x1a\\n)."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The map tile can be used as a custom marker icon by providing its URL"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "The map tile could be referenced as a custom icon on another map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map tile could be used as a visual overlay in KML representation"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Route",
    "parent tool description": "MapFan API \u306e\u30eb\u30fc\u30c8\u691c\u7d22\uff08\u7d4c\u8def\u63a2\u7d22\uff09API\u3067\u3059\u3002\u30ab\u30fc\u30ca\u30d3\u3067\u5b9f\u7e3e\u306e\u3042\u308b\u672c\u683c\u7684\u306a\u30eb\u30fc\u30c8\u691c\u7d22\u3001\u5927\u578b\u8eca\u898f\u5236\u3084\u6b69\u884c\u8005\u5411\u3051\u306a\u3069\u7279\u6b8a\u306a\u72b6\u6cc1\u3092\u8003\u616e\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u306b\u52a0\u3048\u3001\u6307\u5b9a\u4f4d\u7f6e\u4ed8\u8fd1\u306e\u9053\u8def\u306e\u9053\u8def\u540d\u30fb\u4ea4\u5dee\u70b9\u540d\u30fb\u4fe1\u53f7\u6709\u7121\u7b49\u306e\u9053\u8def\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "uturnavoid",
        "type": "ENUM",
        "description": "### \u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\n|\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f|\u5024|\n|---|---|\n|\u3057\u306a\u3044|0|\n|\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`priority`\u3067\u6307\u5b9a\u3057\u305f\u5024\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u3002\n- `priority=3\u3001100\uff5e103`\u306e\u5834\u5408\n`0`\n- `priority`\u304c\u4e0a\u8a18\u4ee5\u5916\u306e\u5834\u5408\n`1`\n\n#### \u6ce8\u8a18\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturn`\uff08U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "routeid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u8b58\u5225\u5b50\n\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u8b58\u5225\u3059\u308b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u5217\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u305d\u306e\u307e\u307e\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306b\u5f71\u97ff\u306f\u3057\u307e\u305b\u3093\u3002\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u534a\u89d2\u306e\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u306f\u7981\u6b62\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u534a\u89d2\u8a18\u53f7\u3084\u5168\u89d2\u6587\u5b57\u306fURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u884c\u3063\u3066\u3044\u308c\u3070\u4f7f\u7528\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "impassablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u4e0d\u53ef\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u5916\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u3092\u56de\u907f\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeresultid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u7d50\u679cID\n`resulttype=1`\u3092\u6307\u5b9a\u3057\u3066\u4e8b\u524d\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u3057\u305f\u7d50\u679c\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b`routeresultid`\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30eb\u30fc\u30c8\u7d50\u679cID\u53d6\u5f97\u6642\u306e\u6761\u4ef6\u3067\u691c\u7d22\u3057\u305f\u7d50\u679c\u306e\u63a2\u7d22\u7d50\u679c\u30b5\u30de\u30ea\u3001\u8a98\u5c0e\u30c7\u30fc\u30bf\u3001\u7d4c\u8def\u5f62\u72b6\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6709\u52b9\u3068\u306a\u308a\u3001\u305d\u308c\u4ee5\u5916\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7121\u52b9\u3068\u306a\u308a\u307e\u3059\u3002\n- fmt\n- callback",
        "default": ""
      },
      {
        "name": "uturn",
        "type": "ENUM",
        "description": "### U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\n|U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055|\u5024|\n|---|---|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u3046|0|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u308f\u306a\u3044|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturnavoid `\uff08\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "regulations",
        "type": "ENUM",
        "description": "### \u305d\u306e\u4ed6\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|0|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`generalroad`\u3001`tollroad`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "resulttype",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306e\u51fa\u529b\u9805\u76ee\u8a2d\u5b9a\n|\u51fa\u529b\u9805\u76ee\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u6a19\u6e96\u306e\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306e\u53d6\u5f97|0|\n|\u30eb\u30fc\u30c8\u7d50\u679cID\u306e\u53d6\u5f97|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- `resulttype=0`\u306f\u3001\u63a2\u7d22\u7d50\u679c\u30b5\u30de\u30ea\u3001\u8a98\u5c0e\u30c7\u30fc\u30bf\u3001\u7d4c\u8def\u5f62\u72b6\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n- `resulttype=1`\u3092\u6307\u5b9a\u3057\u3066\u53d6\u5f97\u3057\u305f\u30eb\u30fc\u30c8\u7d50\u679cID\u306e\u6709\u52b9\u671f\u9650\u306f\u30011\u30f6\u6708\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "tollroad",
        "type": "ENUM",
        "description": "### \u9ad8\u901f\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u9ad8\u901f\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u9ad8\u901f\u9053\u898f\u5236\u306e\u5bfe\u8c61\u3068\u306a\u308b\u9053\u306f\u3001\u9053\u8def\u7a2e\u5225100\u756a\u53f0\u306811\u756a\u306e\u9053\u3067\u3059\u3002\u9053\u8def\u7a2e\u5225\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u9053\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "passablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u306e\u307f\u3092\u901a\u884c\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "daytime",
        "type": "ENUM",
        "description": "### \u65e5\u6642\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u65e5\u6642\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u65e5\u6642\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u3001regulations\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`generalroad`\u3001`tollroad`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "weight",
        "type": "NUMBER",
        "description": "### \u8eca\u91cd\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u91cd\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "date",
        "type": "STRING",
        "description": "### \u51fa\u767a\u65e5\u6642\n\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306e\u4ea4\u901a\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u3068\u304d\u306e\u65e5\u6642\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u5e744\u6841][\u67082\u6841][\u65e52\u6841]_[\u66422\u6841][\u52062\u6841][\u79d22\u6841]` \uff08`yyyyMMdd_HHmmss`\uff09\n\n#### \u8a18\u8ff0\u4f8b\n`20220420_170505` \uff082022\u5e744\u670820\u65e5\u5348\u5f8c5\u66425\u52065\u79d2 \uff09\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\nAPI\u5b9f\u884c\u65e5\u6642\u3092\u9069\u7528\u3057\u3066\u3001\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "height",
        "type": "NUMBER",
        "description": "### \u8eca\u9ad8\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u9ad8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "travel",
        "type": "ENUM",
        "description": "### \u5de1\u56de\u30eb\u30fc\u30c8\u8a2d\u5b9a\n\u6709\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u52b9\u7387\u3088\u304f\u7d4c\u7531\u5730\u3092\u56de\u308b\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u5de1\u56de\u30eb\u30fc\u30c8\u306b\u3088\u308b\u691c\u7d22\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u5de1\u56de\u30eb\u30fc\u30c8\u306b\u3088\u308b\u691c\u7d22\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u4ee5\u4e0b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u5de1\u56de\u30eb\u30fc\u30c8\u306b\u3088\u308b\u691c\u7d22\u3092\u6709\u52b9\u306b\u3059\u308b\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- `priority=100\uff5e103`\n- `passablearea`\n- `impassablearea`\n- `uturnavoid`",
        "default": ""
      },
      {
        "name": "danger",
        "type": "ENUM",
        "description": "### \u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u306a\u3044|0|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "highwayspeed",
        "type": "NUMBER",
        "description": "### \u9ad8\u901f\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u9ad8\u901f\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`90.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "generalroad",
        "type": "ENUM",
        "description": "### \u4e00\u822c\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u4e00\u822c\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "width",
        "type": "NUMBER",
        "description": "### \u8eca\u5e45\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u5e45\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "loadage",
        "type": "NUMBER",
        "description": "### \u7a4d\u8f09\u91cf\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u4e21\u306e\u6700\u5927\u7a4d\u8f09\u91cf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "vehicletype",
        "type": "ENUM",
        "description": "### \u8eca\u7a2e\n\u9053\u8def\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u8eca\u7a2e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u6307\u5b9a\u306a\u3057|0|\n|\u5927\u578b\u4e57\u7528\u81ea\u52d5\u8eca|1|\n|\u5927\u578b\u8ca8\u7269\u81ea\u52d5\u8eca|6|\n|\u5927\u578b\u7279\u6b8a\u81ea\u52d5\u8eca|11|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "cartype",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u5229\u7528\u6642\u306e\u8eca\u7a2e\n\u6709\u6599\u9053\u8def\u306e\u6599\u91d1\u8a08\u7b97\u306e\u307f\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u8efd\u81ea\u52d5\u8eca|0|\n|\u666e\u901a\u8eca|1|\n|\u4e2d\u578b\u8eca|2|\n|\u5927\u578b\u8eca|3|\n|\u7279\u5927\u8eca|4|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "tollwayspeed",
        "type": "NUMBER",
        "description": "### \u6709\u6599\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u6709\u6599\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`55.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "normalspeed",
        "type": "NUMBER",
        "description": "### \u4e00\u822c\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u4e00\u822c\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`25.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "ferry",
        "type": "ENUM",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u4f7f\u7528\u6761\u4ef6\n|\u30d5\u30a7\u30ea\u30fc\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `ferry=2` \u3068\u3057\u305f\u5834\u5408\u3001\u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `ferry=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00107`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "via",
        "type": "STRING",
        "description": "### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n##### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n`[\u7d4c\u7531\u5730#1]|[\u7d4c\u7531\u5730#2|...|[\u7d4c\u7531\u5730#n]`\n\n##### \u7d4c\u7531\u5730\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6ede\u5728\u6642\u9593],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6ede\u5728\u6642\u9593]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u7bc4\u56f2\n|n\uff08\u7d4c\u7531\u5730\u306e\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|30|\n\n|\u6ede\u5728\u6642\u9593\uff08\u5206\uff09|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n|\u6700\u5927|10080|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6ede\u5728\u6642\u9593\uff08\u5206\uff09\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7d4c\u7531\u5730\u30923\u5730\u70b9\u6307\u5b9a\n`139.75723347,35.66593095|139.73893125,35.62911118|139.69695771,35.53136405`\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.75723347,35.66593095`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1`\n\n##### \u6ede\u5728\u6642\u9593\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,60`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,,1`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "startangle",
        "type": "NUMBER",
        "description": "### \u51fa\u767a\u65b9\u5411\n\u51fa\u767a\u5730\u306e\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u304c\u53cc\u65b9\u5411\u306b\u9032\u884c\u53ef\u80fd\u306a\u5834\u5408\u306b\u3001\u9032\u884c\u65b9\u5411\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306b\u5bfe\u3057\u3001\u6307\u5b9a\u89d2\u5ea6\u306b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u65b9\u5411\u306b\u9032\u884c\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306e\u3044\u305a\u308c\u304b\u304c\u3001\u30eb\u30fc\u30c8\u306e\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u63a1\u7528\u3055\u308c\u307e\u3059\u3002\u771f\u5317\u30920\u5ea6\u3068\u3057\u3001\u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "priority",
        "type": "ENUM",
        "description": "### \u57fa\u672c\u6761\u4ef6\n|\u57fa\u672c\u6761\u4ef6|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u8ddd\u96e2\u512a\u5148|1|\n|\u76f4\u9032\u512a\u5148|2|\n|\u7c21\u6613\u6b69\u884c\u8005|3|\n|\u9053\u5e45\u512a\u5148|4|\n|\u6b69\u884c\u8005\u6a19\u6e96\uff08\u5206\u304b\u308a\u6613\u3044\uff09|100|\n|\u6b69\u884c\u8005\u8ddd\u96e2\u512a\u5148|101|\n|\u6b69\u884c\u8005\u5c4b\u6839\u512a\u5148\uff08\u5c4b\u6839\u304c\u591a\u3044\uff09|102|\n|\u6b69\u884c\u8005\u6bb5\u5dee\u56de\u907f\uff08\u968e\u6bb5\u304c\u5c11\u306a\u3044\uff09|103|\n\n#### \u6ce8\u8a18\n- \u5de1\u56de\u30eb\u30fc\u30c8\u306b\u3088\u308b\u691c\u7d22\u3092\u6709\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u5404\u6761\u4ef6\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3 \uff1e \u30eb\u30fc\u30c8\u57fa\u672c\u6761\u4ef6 (priority)\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "destination",
        "type": "STRING",
        "description": "### \u76ee\u7684\u5730\u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.62261961,35.46606942`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.62261961,35.46606942,,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.62261961,35.46606942"
      },
      {
        "name": "tollway",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u4f7f\u7528\u6761\u4ef6\n|\u6709\u6599\u9053\u8def\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6709\u6599\u9053\u8def\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `tollway=2` \u3068\u3057\u305f\u5834\u5408\u3001\u6709\u6599\u9053\u8def\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `tollway=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00108`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "etc",
        "type": "ENUM",
        "description": "### ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528\u6709\u7121\n|ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b9\u30de\u30fc\u30c8IC\u306b\u3082\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u672a\u6307\u5b9a\u3001\u304b\u3064\u3001 `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u9650\u308a\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f `smartic` \u3068\u540c\u3058\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "start",
        "type": "STRING",
        "description": "### \u51fa\u767a\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.76730676,35.68095910`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.76730676,35.68095910,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.76730676,35.68095910"
      },
      {
        "name": "smartic",
        "type": "ENUM",
        "description": "## \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u975e\u63a8\u5968\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002 `etc` \u3092\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\n\n### \u30b9\u30de\u30fc\u30c8IC\u5229\u7528\u6709\u7121\n|\u30b9\u30de\u30fc\u30c8IC\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "ferryspeed",
        "type": "NUMBER",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u901f\u5ea6\n\u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`27.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tolltarget",
        "type": "ENUM",
        "description": "### \u6599\u91d1\u8a08\u7b97\u5bfe\u8c61\n|\u6599\u91d1\u8a08\u7b97\u5bfe\u8c61|\u5024|\n|---|---|\n|\u901a\u5e38\u6599\u91d1|0|\n|\u901a\u5e38\u6599\u91d1\uff0bETC\u5272\u5f15\u6599\u91d1|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-route.p.rapidapi.com/calcroute\"\nquerystring = {\"destination\": destination, \"start\": start}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-route.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Route: calcroute",
    "tool description": "Calculates optimized routes considering vehicle type, pedestrian needs, and road conditions, using start/end points and optional constraints like traffic or road restrictions. This leverages MapFan API's advanced routing technology, which incorporates detailed road data including street names, intersections, and signal locations to generate precise itineraries. The service enhances navigation accuracy by accounting for specialized scenarios like large vehicle regulations, while its underlying infrastructure ensures reliable results through extensive geospatial databases. Note that response times may vary depending on search complexity and distance metrics.",
    "API name": "calcroute",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool output provides a comprehensive and detailed route calculation. It includes a top-level summary of the entire route, containing total distance, estimated travel time, and any toll costs. The core of the output is a `guide` array, which provides granular, step-by-step navigation instructions, including coordinates, distances, road names, intersection names, and maneuver types for each segment of the journey.",
      "output_format": "The output is a single, non-paginated JSON object. Key fields include `summary` (an object) and `guide` (an array of objects). The structure is deeply nested; for example, each element in the `guide` array contains a `guideInfo` object, which in turn can contain a `guideRoad` or `guideCrossing` object. Some fields, like `guideCrossing`, appear to be optional and are only present when relevant. String values, like a road name, can be empty."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use coordinates from the source tool's guide array"
          },
          {
            "name": "destination",
            "description": "Can use coordinates from the source tool's guide array"
          },
          {
            "name": "via",
            "description": "Can use coordinates from the source tool's guide array as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the source tool's guide array"
          },
          {
            "name": "routeresultid",
            "description": "Can use routeResultId from the source tool's output"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "Can use coordinates from the source tool's guide array as stops"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Can use coordinates from the first point in the source tool's guide array"
          },
          {
            "name": "destination",
            "description": "Can use coordinates from the last point in the source tool's guide array"
          },
          {
            "name": "waypoints",
            "description": "Can use intermediate coordinates from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "points",
            "description": "Can use coordinates from the source tool's guide array as routing points"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Can use coordinates from the source tool's guide array"
          },
          {
            "name": "path",
            "description": "Can use coordinates from the source tool's guide array to create a path"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use coordinates from the source tool's guide array"
          },
          {
            "name": "destination",
            "description": "Can use coordinates from the source tool's guide array"
          },
          {
            "name": "via",
            "description": "Can use coordinates from the source tool's guide array as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use coordinates from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's guide array"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's guide array"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's guide array"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's guide array"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Route",
    "parent tool description": "MapFan API \u306e\u30eb\u30fc\u30c8\u691c\u7d22\uff08\u7d4c\u8def\u63a2\u7d22\uff09API\u3067\u3059\u3002\u30ab\u30fc\u30ca\u30d3\u3067\u5b9f\u7e3e\u306e\u3042\u308b\u672c\u683c\u7684\u306a\u30eb\u30fc\u30c8\u691c\u7d22\u3001\u5927\u578b\u8eca\u898f\u5236\u3084\u6b69\u884c\u8005\u5411\u3051\u306a\u3069\u7279\u6b8a\u306a\u72b6\u6cc1\u3092\u8003\u616e\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u306b\u52a0\u3048\u3001\u6307\u5b9a\u4f4d\u7f6e\u4ed8\u8fd1\u306e\u9053\u8def\u306e\u9053\u8def\u540d\u30fb\u4ea4\u5dee\u70b9\u540d\u30fb\u4fe1\u53f7\u6709\u7121\u7b49\u306e\u9053\u8def\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "ferry",
        "type": "ENUM",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u4f7f\u7528\u6761\u4ef6\n|\u30d5\u30a7\u30ea\u30fc\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `ferry=2` \u3068\u3057\u305f\u5834\u5408\u3001\u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `ferry=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00107`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "impassablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u4e0d\u53ef\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u5916\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u3092\u56de\u907f\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "tollroad",
        "type": "ENUM",
        "description": "### \u9ad8\u901f\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u9ad8\u901f\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u9ad8\u901f\u9053\u898f\u5236\u306e\u5bfe\u8c61\u3068\u306a\u308b\u9053\u306f\u3001\u9053\u8def\u7a2e\u5225100\u756a\u53f0\u306811\u756a\u306e\u9053\u3067\u3059\u3002\u9053\u8def\u7a2e\u5225\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u9053\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "regulations",
        "type": "ENUM",
        "description": "### \u305d\u306e\u4ed6\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|0|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`generalroad`\u3001`tollroad`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "uturn",
        "type": "ENUM",
        "description": "### U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\n|U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055|\u5024|\n|---|---|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u3046|0|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u308f\u306a\u3044|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturnavoid `\uff08\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "uturnavoid",
        "type": "ENUM",
        "description": "### \u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\n|\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f|\u5024|\n|---|---|\n|\u3057\u306a\u3044|0|\n|\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`priority`\u3067\u6307\u5b9a\u3057\u305f\u5024\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u3002\n- `priority=3\u3001100\uff5e103`\u306e\u5834\u5408\n`0`\n- `priority`\u304c\u4e0a\u8a18\u4ee5\u5916\u306e\u5834\u5408\n`1`\n\n#### \u6ce8\u8a18\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturn`\uff08U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "generalroad",
        "type": "ENUM",
        "description": "### \u4e00\u822c\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u4e00\u822c\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "passablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u306e\u307f\u3092\u901a\u884c\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 `fmt` \u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "weight",
        "type": "NUMBER",
        "description": "### \u8eca\u91cd\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u91cd\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "width",
        "type": "NUMBER",
        "description": "### \u8eca\u5e45\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u5e45\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "loadage",
        "type": "NUMBER",
        "description": "### \u7a4d\u8f09\u91cf\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u4e21\u306e\u6700\u5927\u7a4d\u8f09\u91cf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "danger",
        "type": "ENUM",
        "description": "### \u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u306a\u3044|0|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "height",
        "type": "NUMBER",
        "description": "### \u8eca\u9ad8\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u9ad8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "highwayspeed",
        "type": "NUMBER",
        "description": "### \u9ad8\u901f\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u9ad8\u901f\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`90.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "ferryspeed",
        "type": "NUMBER",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u901f\u5ea6\n\u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`27.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "normalspeed",
        "type": "NUMBER",
        "description": "### \u4e00\u822c\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u4e00\u822c\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`25.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tollwayspeed",
        "type": "NUMBER",
        "description": "### \u6709\u6599\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u6709\u6599\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`55.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "cartype",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u5229\u7528\u6642\u306e\u8eca\u7a2e\n\u6709\u6599\u9053\u8def\u306e\u6599\u91d1\u8a08\u7b97\u306e\u307f\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u8efd\u81ea\u52d5\u8eca|0|\n|\u666e\u901a\u8eca|1|\n|\u4e2d\u578b\u8eca|2|\n|\u5927\u578b\u8eca|3|\n|\u7279\u5927\u8eca|4|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "vehicletype",
        "type": "ENUM",
        "description": "### \u8eca\u7a2e\n\u9053\u8def\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u8eca\u7a2e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u6307\u5b9a\u306a\u3057|0|\n|\u5927\u578b\u4e57\u7528\u81ea\u52d5\u8eca|1|\n|\u5927\u578b\u8ca8\u7269\u81ea\u52d5\u8eca|6|\n|\u5927\u578b\u7279\u6b8a\u81ea\u52d5\u8eca|11|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "etc",
        "type": "ENUM",
        "description": "### ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528\u6709\u7121\n|ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b9\u30de\u30fc\u30c8IC\u306b\u3082\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u672a\u6307\u5b9a\u3001\u304b\u3064\u3001 `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u9650\u308a\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f `smartic` \u3068\u540c\u3058\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "destination",
        "type": "STRING",
        "description": "### \u76ee\u7684\u5730\u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.62261961,35.46606942`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.62261961,35.46606942,,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.62261961,35.46606942"
      },
      {
        "name": "date",
        "type": "STRING",
        "description": "### \u51fa\u767a\u65e5\u6642\n\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306e\u4ea4\u901a\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u3068\u304d\u306e\u65e5\u6642\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u5e744\u6841][\u67082\u6841][\u65e52\u6841]_[\u66422\u6841][\u52062\u6841][\u79d22\u6841]` \uff08`yyyyMMdd_HHmmss`\uff09\n\n#### \u8a18\u8ff0\u4f8b\n`20220420_170505` \uff082022\u5e744\u670820\u65e5\u5348\u5f8c5\u66425\u52065\u79d2 \uff09\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\nAPI\u5b9f\u884c\u65e5\u6642\u3092\u9069\u7528\u3057\u3066\u3001\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "smartic",
        "type": "ENUM",
        "description": "## \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u975e\u63a8\u5968\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002 `etc` \u3092\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\n\n### \u30b9\u30de\u30fc\u30c8IC\u5229\u7528\u6709\u7121\n|\u30b9\u30de\u30fc\u30c8IC\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "start",
        "type": "STRING",
        "description": "### \u51fa\u767a\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.76730676,35.68095910`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.76730676,35.68095910,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.76730676,35.68095910"
      },
      {
        "name": "startangle",
        "type": "NUMBER",
        "description": "### \u51fa\u767a\u65b9\u5411\n\u51fa\u767a\u5730\u306e\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u304c\u53cc\u65b9\u5411\u306b\u9032\u884c\u53ef\u80fd\u306a\u5834\u5408\u306b\u3001\u9032\u884c\u65b9\u5411\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306b\u5bfe\u3057\u3001\u6307\u5b9a\u89d2\u5ea6\u306b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u65b9\u5411\u306b\u9032\u884c\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306e\u3044\u305a\u308c\u304b\u304c\u3001\u30eb\u30fc\u30c8\u306e\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u63a1\u7528\u3055\u308c\u307e\u3059\u3002\u771f\u5317\u30920\u5ea6\u3068\u3057\u3001\u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "via",
        "type": "STRING",
        "description": "### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n##### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n`[\u7d4c\u7531\u5730#1]|[\u7d4c\u7531\u5730#2|...|[\u7d4c\u7531\u5730#n]`\n\n##### \u7d4c\u7531\u5730\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6ede\u5728\u6642\u9593],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6ede\u5728\u6642\u9593]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u7bc4\u56f2\n|n\uff08\u7d4c\u7531\u5730\u306e\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|30|\n\n|\u6ede\u5728\u6642\u9593\uff08\u5206\uff09|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n|\u6700\u5927|10080|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6ede\u5728\u6642\u9593\uff08\u5206\uff09\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7d4c\u7531\u5730\u30923\u5730\u70b9\u6307\u5b9a\n`139.75723347,35.66593095|139.73893125,35.62911118|139.69695771,35.53136405`\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.75723347,35.66593095`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1`\n\n##### \u6ede\u5728\u6642\u9593\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,60`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,,1`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u8b58\u5225\u5b50\n\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u8b58\u5225\u3059\u308b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u5217\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u305d\u306e\u307e\u307e\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306b\u5f71\u97ff\u306f\u3057\u307e\u305b\u3093\u3002\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u534a\u89d2\u306e\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u306f\u7981\u6b62\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u534a\u89d2\u8a18\u53f7\u3084\u5168\u89d2\u6587\u5b57\u306fURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u884c\u3063\u3066\u3044\u308c\u3070\u4f7f\u7528\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "daytime",
        "type": "ENUM",
        "description": "### \u65e5\u6642\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u65e5\u6642\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u65e5\u6642\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u3001regulations\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`generalroad`\u3001`tollroad`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tolltarget",
        "type": "ENUM",
        "description": "### \u6599\u91d1\u8a08\u7b97\u5bfe\u8c61\n|\u6599\u91d1\u8a08\u7b97\u5bfe\u8c61|\u5024|\n|---|---|\n|\u901a\u5e38\u6599\u91d1|0|\n|\u901a\u5e38\u6599\u91d1\uff0bETC\u5272\u5f15\u6599\u91d1|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-route.p.rapidapi.com/multicalcroute\"\nquerystring = {\"destination\": destination, \"start\": start}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-route.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Route: multicalcroute",
    "tool description": "Calculates three distinct routes simultaneously based on priority (standard, toll avoidance, distance priority) and tollway preferences. This endpoint leverages the MapFan API's advanced route search capabilities, which utilize comprehensive road data including highway restrictions, pedestrian paths, and detailed infrastructure information to deliver optimized navigation solutions. The service supports complex scenarios like truck-specific routing and provides critical road details such as street names, intersections, and signal locations, while returning route result IDs for subsequent guidance data retrieval via the calcroute API.",
    "API name": "multicalcroute",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides detailed information for up to three distinct calculated routes. Each route includes a unique ID (`routeResultId`), a summary of total distance, travel time, and toll costs, and the precise geographic path as a series of longitude/latitude coordinates. This data is primarily used for displaying route options on a map and providing navigation statistics, with the `routeResultId` enabling subsequent API calls for more detailed guidance.",
      "output_format": "The output is a single JSON object. The primary key, `result`, contains an array of objects, where each object represents a single calculated route. This route object contains a nested `summary` object for statistics and a nested `shape` array which holds the geometric data as a list of coordinate points. The structure is deeply nested and fields appear to be non-nullable in a successful response."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "param_name": "routeresultid",
            "description": "The routeResultId from the multicalcroute output can be used to display the calculated route on a map image"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "param_name": "routeresultid",
            "description": "The routeResultId from the multicalcroute output can be used to retrieve detailed guidance data for a specific route"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use coordinates from the route shape points"
          },
          {
            "param_name": "latitude",
            "description": "Can use coordinates from the route shape points"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use coordinates from the route shape points"
          },
          {
            "param_name": "latitude",
            "description": "Can use coordinates from the route shape points"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "param_name": "lonlat",
            "description": "Can use coordinates from the route shape points to get road information along the route"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use coordinates from the route shape points"
          },
          {
            "param_name": "latitude",
            "description": "Can use coordinates from the route shape points"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "param_name": "lng",
            "description": "Can use coordinates from the route shape points to get address information"
          },
          {
            "param_name": "lat",
            "description": "Can use coordinates from the route shape points to get address information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Route",
    "parent tool description": "MapFan API \u306e\u30eb\u30fc\u30c8\u691c\u7d22\uff08\u7d4c\u8def\u63a2\u7d22\uff09API\u3067\u3059\u3002\u30ab\u30fc\u30ca\u30d3\u3067\u5b9f\u7e3e\u306e\u3042\u308b\u672c\u683c\u7684\u306a\u30eb\u30fc\u30c8\u691c\u7d22\u3001\u5927\u578b\u8eca\u898f\u5236\u3084\u6b69\u884c\u8005\u5411\u3051\u306a\u3069\u7279\u6b8a\u306a\u72b6\u6cc1\u3092\u8003\u616e\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u306b\u52a0\u3048\u3001\u6307\u5b9a\u4f4d\u7f6e\u4ed8\u8fd1\u306e\u9053\u8def\u306e\u9053\u8def\u540d\u30fb\u4ea4\u5dee\u70b9\u540d\u30fb\u4fe1\u53f7\u6709\u7121\u7b49\u306e\u9053\u8def\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "lonlat",
        "type": "STRING",
        "description": "### \u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n` [\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024]`\n\n#### \u8a18\u8ff0\u4f8b\n`139.767231,35.681196`\n\n#### \u6ce8\u8a18\n\u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": "139.7474147222,35.7298256052"
      }
    ],
    "optional_parameters": [
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "radius",
        "type": "NUMBER",
        "description": "### \u691c\u7d22\u7bc4\u56f2\n\u691c\u7d22\u534a\u5f84\u3092\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|1\uff081m\uff09|\n|\u6700\u5927|10000\uff0810km\uff09|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`5000`\uff085km\uff09\n\n#### \u6ce8\u8a18\n\u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "date",
        "type": "STRING",
        "description": "### \u691c\u7d22\u65e5\u6642\n\u4ee5\u4e0b\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3067\u8003\u616e\u3055\u308c\u307e\u3059\u3002\n- `isPassableForward`\uff08\u901a\u884c\u53ef\u80fd\u30d5\u30e9\u30b0\uff08\u9806\u65b9\u5411\uff09\uff09\n- `impassableCodeForward`\uff08\u901a\u884c\u4e0d\u53ef\u8a73\u7d30\uff08\u9806\u65b9\u5411\uff09\uff09\n- `isPassableBackward`\uff08\u901a\u884c\u53ef\u80fd\u30d5\u30e9\u30b0\uff08\u9006\u65b9\u5411\uff09\uff09\n- `impassableCodeBackward`\uff08\u901a\u884c\u4e0d\u53ef\u8a73\u7d30\uff08\u9006\u65b9\u5411\uff09\uff09\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u5e744\u6841][\u67082\u6841][\u65e52\u6841]_[\u66422\u6841][\u52062\u6841][\u79d22\u6841]` \uff08`yyyyMMdd_HHmmss`\uff09\n\n#### \u8a18\u8ff0\u4f8b\n`20220420_170505` \uff082022\u5e744\u670820\u65e5\u5348\u5f8c5\u66425\u52065\u79d2 \uff09\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\nAPI\u5b9f\u884c\u65e5\u6642\u3092\u9069\u7528\u3057\u3066\u3001\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-route.p.rapidapi.com/nearroadinfo\"\nquerystring = {\"lonlat\": lonlat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-route.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Route: nearroadinfo",
    "tool description": "This endpoint retrieves road information such as street names, intersection names, and traffic signals around a specified latitude and longitude. Part of the MapFan API's route search functionality, which utilizes advanced route planning algorithms for detailed navigation, this feature supports scenarios like truck restrictions and pedestrian paths by providing precise local road data, enhancing accuracy for location-based services and mapping applications.",
    "API name": "nearroadinfo",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "This tool provides detailed information about the two nearest road segments to a given coordinate: one general road and one toll road. For each road, the output includes its name, type, geometric shape as a series of coordinates, passability in both directions, and the names of start/end intersections and the presence of traffic signals. This data is useful for navigation systems and location-based applications requiring precise road-level details.",
      "output_format": "The output is a single JSON object. It contains two primary nested objects, `generalRoadInfo` and `tollRoadInfo`, each describing a different type of road. Some fields within these objects, such as `roadName` or `sCrossName`, can be empty strings, while fields like `impassableCodeForward` can be null when not applicable. The `shapePoints` field is an array of objects, each representing a geographic coordinate."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use coordinates from the road shape points in the source output to set a starting point for route calculation"
          },
          {
            "name": "destination",
            "description": "Can use coordinates from the road shape points in the source output to set a destination point for route calculation"
          },
          {
            "name": "via",
            "description": "Can use coordinates from the road shape points in the source output to set waypoints for route calculation"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use coordinates from the road shape points in the source output to set a starting point for multiple route calculations"
          },
          {
            "name": "destination",
            "description": "Can use coordinates from the road shape points in the source output to set a destination point for multiple route calculations"
          },
          {
            "name": "via",
            "description": "Can use coordinates from the road shape points in the source output to set waypoints for multiple route calculations"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use coordinates from the road shape points in the source output to set a starting point for alternative route calculations"
          },
          {
            "name": "destination",
            "description": "Can use coordinates from the road shape points in the source output to set a destination point for alternative route calculations"
          },
          {
            "name": "via",
            "description": "Can use coordinates from the road shape points in the source output to set waypoints for alternative route calculations"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the road shape points in the source output to center the map image"
          },
          {
            "name": "icon",
            "description": "Can place icons at road intersection points identified in the source output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Search",
    "parent tool description": "MapFan API \u306e\u691c\u7d22API\u3067\u3059\u3002\u5404\u7a2e\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f4f\u6240\u3001\u30b9\u30dd\u30c3\u30c8\u30fbPOI\u3001\u99c5\u3001\u90f5\u4fbf\u756a\u53f7\uff09\u3084\u3001\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u7def\u5ea6\u7d4c\u5ea6\u304b\u3089\u4f4f\u6240\u53d6\u5f97\uff09\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4f4f\u6240\u8aa4\u5165\u529b\u5bfe\u7b56\u306b\u6709\u7528\u306a\u4f4f\u6240\u968e\u5c64\u691c\u7d22\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "zipcd",
        "type": "STRING",
        "description": "### \u691c\u7d22\u5bfe\u8c61\u306e\u90f5\u4fbf\u756a\u53f7\n3\u6841\u307e\u305f\u306f7\u6841\u306e\u90f5\u4fbf\u756a\u53f7\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n7\u6841\u306e\u5834\u5408\u3001\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u3092\u542b\u3080\u90f5\u4fbf\u756a\u53f7\u3001\u30cf\u30a4\u30d5\u30f3\u306a\u3057\u306e\u90f5\u4fbf\u756a\u53f7\u306e\u5165\u529b\u304c\u53ef\u80fd\u3067\u3059\u3002",
        "default": "113-0021"
      }
    ],
    "optional_parameters": [
      {
        "name": "pos",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u958b\u59cb\u4f4d\u7f6e\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\u203b1\u4ef6\u76ee\u304b\u3089 `num` \u3067\u6307\u5b9a\u3055\u308c\u305f\u4ef6\u6570\u5206\u306e\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "ot",
        "type": "ENUM",
        "description": "### \u4f4f\u6240\u51fa\u529b\u5f62\u5f0f\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u5927\u53e3\u4e8b\u696d\u6240\u3001\u30d3\u30eb\u540d\u307e\u305f\u306f\u4f4f\u6240|0 |\n|\u4f4f\u6240\u306e\u307f\u3092\u51fa\u529b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0` \u203b\u5927\u53e3\u4e8b\u696d\u6240\u3001\u30d3\u30eb\u540d\u3092\u512a\u5148\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "num",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u4ef6\u6570\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u4ef6\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|500|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`50`",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-search.p.rapidapi.com/zip\"\nquerystring = {\"zipcd\": zipcd}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-search.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Search: zip",
    "tool description": "Allows searching for an address based on a postal code. This leverages the MapFan API's geocoding capabilities, which draws from an extensive database of addresses and postal codes, to accurately retrieve location details. It supports error-resistant address lookup through hierarchical search features, making it reliable for correcting user input mistakes while providing precise geographic information.",
    "API name": "zip",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of Japanese addresses and locations that match a given postal code. For each location, it returns the full name (which can be an address or a business name), its precise geographic coordinates (latitude and longitude), and administrative codes for the prefecture, city, and district. The output also includes metadata indicating the success of the query and pagination details, such as the total number of results found.",
      "output_format": "The output is a single JSON object. The core results are contained within a JSON array under the 'results' key. The top-level object also includes pagination-related fields: 'hit' (total results), 'start_pos' (start index), and 'end_pos' (end index), which suggests that not all results may be returned in a single call if the 'hit' count is high. Each object in the 'results' array has a flat structure with consistent keys."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's results array"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's results array"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's results array"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's results array"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's results array"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's results array"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's results array"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's results array"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Search",
    "parent tool description": "MapFan API \u306e\u691c\u7d22API\u3067\u3059\u3002\u5404\u7a2e\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f4f\u6240\u3001\u30b9\u30dd\u30c3\u30c8\u30fbPOI\u3001\u99c5\u3001\u90f5\u4fbf\u756a\u53f7\uff09\u3084\u3001\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u7def\u5ea6\u7d4c\u5ea6\u304b\u3089\u4f4f\u6240\u53d6\u5f97\uff09\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4f4f\u6240\u8aa4\u5165\u529b\u5bfe\u7b56\u306b\u6709\u7528\u306a\u4f4f\u6240\u968e\u5c64\u691c\u7d22\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "name",
        "type": "STRING",
        "description": "### \u691c\u7d22\u5bfe\u8c61\u306e\u6587\u5b57\u5217\n\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001AND\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\nURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002",
        "default": "\u6771\u4eac\u30bf\u30ef\u30fc"
      }
    ],
    "optional_parameters": [
      {
        "name": "openinghour",
        "type": "ENUM",
        "description": "### \u55b6\u696d\u6642\u9593\u51fa\u529b\u6709\u7121\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u51fa\u529b\u3057\u306a\u3044|0|\n|\u51fa\u529b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u55b6\u696d\u6642\u9593\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30b9\u30dd\u30c3\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n- \u5f53\u8a72\u60c5\u5831\u3092\u53d6\u5f97\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u30fb\u30b8\u30e3\u30f3\u30eb\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u4e00\u89a7\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "facility",
        "type": "ENUM",
        "description": "### \u4ed8\u5e2f\u8a2d\u5099\u30fb\u30b5\u30fc\u30d3\u30b9\u60c5\u5831\u51fa\u529b\u6709\u7121\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u51fa\u529b\u3057\u306a\u3044|0|\n|\u51fa\u529b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\t- ATM\u8a2d\u7f6e\u6709\u7121\n\t- \u9152\u53d6\u308a\u6271\u3044\u6709\u7121\n\t- \u305f\u3070\u3053\u53d6\u308a\u6271\u3044\u6709\u7121\n\t- \u30c9\u30e9\u30a4\u30d6\u30b9\u30eb\u30fc\u8a2d\u7f6e\u6709\u7121\n\t- \u99d0\u8eca\u5834\u8a2d\u7f6e\u6709\u7121\n- \u5f53\u8a72\u60c5\u5831\u3092\u53d6\u5f97\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u30fb\u30b8\u30e3\u30f3\u30eb\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u4e00\u89a7\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "routepoint",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u63a2\u7d22\u7528\u30dd\u30a4\u30f3\u30c8\u51fa\u529b\u6709\u7121\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u51fa\u529b\u3057\u306a\u3044|0|\n|\u51fa\u529b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u30eb\u30fc\u30c8\u63a2\u7d22\u7528\u30dd\u30a4\u30f3\u30c8\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30b9\u30dd\u30c3\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "field",
        "type": "ENUM",
        "description": "### \u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9\n\u30b9\u30dd\u30c3\u30c8\u306e\u7279\u5b9a\u306e\u5c5e\u6027\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u5bfe\u8c61\u3068\u3059\u308b\u5c5e\u6027\uff08\u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306fOR\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u6307\u5b9a\u53ef\u80fd\u306a\u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9|\u30d5\u30a3\u30fc\u30eb\u30c9\u540d|\n|---|\n|name|\u30b9\u30dd\u30c3\u30c8\u540d|\n|yomi|\u30b9\u30dd\u30c3\u30c8\u540d\u8aad\u307f|\n|gnr_name|\u30b8\u30e3\u30f3\u30eb\u540d|\n|addr|\u4f4f\u6240|\n|tel|\u96fb\u8a71\u756a\u53f7|\n|comment|\u30b3\u30e1\u30f3\u30c8|\n|access|\u30a2\u30af\u30bb\u30b9\u60c5\u5831<br>\u203b\u30b9\u30dd\u30c3\u30c8\u306e\u6700\u5bc4\u308a\u306e\u9244\u9053\u8def\u7dda\u30fb\u99c5\u3001\u30a4\u30f3\u30bf\u30fc\u30c1\u30a7\u30f3\u30b8|",
        "default": ""
      },
      {
        "name": "gnrcd",
        "type": "STRING",
        "description": "### \u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\n\u7279\u5b9a\u30b8\u30e3\u30f3\u30eb\u306e\u30b9\u30dd\u30c3\u30c8\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u691c\u7d22\u5bfe\u8c61\u306e\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306fOR\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n\u6307\u5b9a\u53ef\u80fd\u306a\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "citycd",
        "type": "STRING",
        "description": "### \u5e02\u533a\u753a\u6751\u30b3\u30fc\u30c9(\u6570\u5b573\u6841)\n\u7279\u5b9a\u306e\u5e02\u533a\u753a\u6751\u306e\u30b9\u30dd\u30c3\u30c8\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u691c\u7d22\u5bfe\u8c61\u306e\u5e02\u533a\u753a\u6751\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "num",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u4ef6\u6570\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u4ef6\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|500|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`50`",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "prefcd",
        "type": "STRING",
        "description": "### \u90fd\u9053\u5e9c\u770c\u30b3\u30fc\u30c9(\u6570\u5b572\u6841)\n\u7279\u5b9a\u306e\u90fd\u9053\u5e9c\u770c\u306e\u30b9\u30dd\u30c3\u30c8\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u691c\u7d22\u5bfe\u8c61\u306e\u90fd\u9053\u5e9c\u770c\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n`citycd`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u5fc5\u9808\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "pos",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u958b\u59cb\u4f4d\u7f6e\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\u203b1\u4ef6\u76ee\u304b\u3089 `num` \u3067\u6307\u5b9a\u3055\u308c\u305f\u4ef6\u6570\u5206\u306e\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "phonebook",
        "type": "ENUM",
        "description": "### \u96fb\u8a71\u5e33\u30c7\u30fc\u30bf\u691c\u7d22\u30aa\u30d7\u30b7\u30e7\u30f3\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u96fb\u8a71\u5e33\u30c7\u30fc\u30bf\u3092\u691c\u7d22\u5bfe\u8c61\u3068\u3057\u306a\u3044<br>\uff08\u5f0a\u793e\u72ec\u81ea\u6574\u5099POI\u306e\u307f\u691c\u7d22\uff09|0|\n|\u5f0a\u793e\u72ec\u81ea\u6574\u5099POI\u3068MapFan Directory\uff08\u203b\uff09\u3092\u691c\u7d22\u5bfe\u8c61\u3068\u3059\u308b|1|\n\n\u203bMapFan Directory\u306f\u3001\u30b0\u30ea\u30fc\u30f3\u30da\u30fc\u30b8\u00ae\u03b1(\u65e5\u672c\u30bd\u30d5\u30c8\u8ca9\u58f2\u682a\u5f0f\u4f1a\u793e\u63d0\u4f9b)\u3092\u57fa\u306b\u3001\u5f0a\u793e\u304c\u5236\u4f5c\u3057\u305f\u96fb\u8a71\u5e33\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-search.p.rapidapi.com/spot\"\nquerystring = {\"name\": name}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-search.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Search: spot",
    "tool description": "Performs spot searches based on user queries, leveraging the MapFan API's geocoding capabilities. This endpoint utilizes the parent tool's comprehensive database of addresses, points of interest, stations, and postal codes, along with reverse geocoding features, to deliver accurate location data. It enhances user experience by supporting address hierarchy search, effectively mitigating input errors and ensuring precise location identification.",
    "API name": "spot",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of geographic locations or points of interest (POIs) based on a search query. Each result includes the location's name, address, latitude, longitude, and category. Supplemental information such as a phone number and a descriptive comment may also be included, which can be useful for contact or planning purposes.",
      "output_format": "The output is a single JSON object. The primary data is in the 'results' key, which is a JSON array of location objects. The output is paginated, as indicated by the 'hit', 'start_pos', and 'end_pos' keys, which detail the total result count and the range returned in the current response. Some fields within a result, like 'tel' and 'comment', can be null."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from MapFanAPI - Search: spot results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from MapFanAPI - Search: spot results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as destination"
          },
          {
            "name": "via",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as destination"
          },
          {
            "name": "via",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as destination"
          },
          {
            "name": "via",
            "description": "Can use longitude,latitude from MapFanAPI - Search: spot results as waypoints"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results as destination"
          },
          {
            "name": "waypoints",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results as waypoints"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results as stops"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "points",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results as routing points"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results as map center"
          },
          {
            "name": "marker",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results in marker center attribute"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Elevation",
        "connect params": [
          {
            "name": "points",
            "description": "Can use latitude,longitude from MapFanAPI - Search: spot results in points array"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Search",
    "parent tool description": "MapFan API \u306e\u691c\u7d22API\u3067\u3059\u3002\u5404\u7a2e\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f4f\u6240\u3001\u30b9\u30dd\u30c3\u30c8\u30fbPOI\u3001\u99c5\u3001\u90f5\u4fbf\u756a\u53f7\uff09\u3084\u3001\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u7def\u5ea6\u7d4c\u5ea6\u304b\u3089\u4f4f\u6240\u53d6\u5f97\uff09\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4f4f\u6240\u8aa4\u5165\u529b\u5bfe\u7b56\u306b\u6709\u7528\u306a\u4f4f\u6240\u968e\u5c64\u691c\u7d22\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "lonlat",
        "type": "STRING",
        "description": "### \u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n` [\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024]`\n\n#### \u8a18\u8ff0\u4f8b\n`139.767231,35.681196`\n\n#### \u6ce8\u8a18\n\u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": "139.76508326834892,35.67409104870947"
      }
    ],
    "optional_parameters": [
      {
        "name": "rad",
        "type": "NUMBER",
        "description": "### \u691c\u7d22\u7bc4\u56f2\n\u691c\u7d22\u534a\u5f84\u3092\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|50000\uff0850km\uff09|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1000`\uff081km\uff09\n\n#### \u6ce8\u8a18\n\u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "num",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u4ef6\u6570\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u4ef6\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|500|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`50`\n\n#### \u6ce8\u8a18\n`gateway=1`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\uff08\u99c5\u51fa\u5165\u53e3\u3092\u691c\u7d22\u5bfe\u8c61\u306b\u542b\u3081\u305f\u5834\u5408\uff09\u3001\u99c5\u691c\u7d22\u7d50\u679c\u3001\u99c5\u51fa\u5165\u53e3\u691c\u7d22\u7d50\u679c\u305d\u308c\u305e\u308c\u306e\u8fd4\u5374\u4ef6\u6570\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "gateway",
        "type": "ENUM",
        "description": "### \u99c5\u51fa\u5165\u53e3\u691c\u7d22\u8a2d\u5b9a\n\u99c5\u51fa\u5165\u53e3\u3092\u691c\u7d22\u5bfe\u8c61\u306b\u542b\u3081\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u542b\u3081\u306a\u3044|0|\n|\u542b\u3081\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "pos",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u958b\u59cb\u4f4d\u7f6e\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\u203b1\u4ef6\u76ee\u304b\u3089 `num` \u3067\u6307\u5b9a\u3055\u308c\u305f\u4ef6\u6570\u5206\u306e\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-search.p.rapidapi.com/staarea\"\nquerystring = {\"lonlat\": lonlat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-search.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Search: staarea",
    "tool description": "The Nearest Station Search endpoint retrieves nearby stations based on a specified latitude and longitude. This is part of the MapFan API's geocoding services, which handle address, POI, station, and postal code searches, along with reverse geocoding. It leverages the API's address hierarchy search to assist in location-based queries, providing accurate station information for user convenience.",
    "API name": "staarea",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of nearby train stations based on a given latitude and longitude. For each station found, it provides the name (including the specific train line), distance from the search point in meters, and precise geographic coordinates. The output also includes various identification codes for the station type, railway company, and line.",
      "output_format": "The output is a single JSON object. This object contains metadata about the search, such as the total number of hits ('hit'), and a 'results' key which holds a JSON array of station objects. The presence of 'start_pos' and 'end_pos' fields suggests support for pagination, although the mechanism is not shown in the examples."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use station coordinates from source tool's results as a starting point for route calculation"
          },
          {
            "name": "destination",
            "description": "Can use station coordinates from source tool's results as a destination point for route calculation"
          },
          {
            "name": "via",
            "description": "Can use station coordinates from source tool's results as waypoints in the route"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use station coordinates from source tool's results as a starting point for multiple route calculations"
          },
          {
            "name": "destination",
            "description": "Can use station coordinates from source tool's results as a destination point for multiple route calculations"
          },
          {
            "name": "via",
            "description": "Can use station coordinates from source tool's results as waypoints in multiple routes"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use station coordinates from source tool's results as a starting point for alternative route calculations"
          },
          {
            "name": "destination",
            "description": "Can use station coordinates from source tool's results as a destination point for alternative route calculations"
          },
          {
            "name": "via",
            "description": "Can use station coordinates from source tool's results as waypoints in alternative routes"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use station coordinates from source tool's results to center the map image"
          },
          {
            "name": "icon",
            "description": "Can use station coordinates from source tool's results to place icons on the map"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use station coordinates from source tool's results to find nearby road information"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use station longitude from source tool's results"
          },
          {
            "name": "latitude",
            "description": "Can use station latitude from source tool's results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use station longitude from source tool's results"
          },
          {
            "name": "latitude",
            "description": "Can use station latitude from source tool's results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use station longitude from source tool's results"
          },
          {
            "name": "latitude",
            "description": "Can use station latitude from source tool's results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use station longitude from source tool's results"
          },
          {
            "name": "latitude",
            "description": "Can use station latitude from source tool's results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use station coordinates from source tool's results to find nearby spots"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use station longitude from source tool's results"
          },
          {
            "name": "lat",
            "description": "Can use station latitude from source tool's results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Search",
    "parent tool description": "MapFan API \u306e\u691c\u7d22API\u3067\u3059\u3002\u5404\u7a2e\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f4f\u6240\u3001\u30b9\u30dd\u30c3\u30c8\u30fbPOI\u3001\u99c5\u3001\u90f5\u4fbf\u756a\u53f7\uff09\u3084\u3001\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u7def\u5ea6\u7d4c\u5ea6\u304b\u3089\u4f4f\u6240\u53d6\u5f97\uff09\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4f4f\u6240\u8aa4\u5165\u529b\u5bfe\u7b56\u306b\u6709\u7528\u306a\u4f4f\u6240\u968e\u5c64\u691c\u7d22\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "addr",
        "type": "STRING",
        "description": "### \u691c\u7d22\u5bfe\u8c61\u306e\u4f4f\u6240\u6587\u5b57\u5217\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u4f4f\u6240\u6587\u5b57\u5217\u306e\u5165\u51fa\u529b\u4ed5\u69d8\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u4f4f\u6240\u691c\u7d22\u5165\u51fa\u529b\u30d1\u30bf\u30fc\u30f3\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": "\u6771\u4eac\u90fd\u6587\u4eac\u533a\u672c\u99d2\u8fbc2-28-8 \u6587\u4eac\u30b0\u30ea\u30fc\u30f3\u30b3\u30fc\u30c8\u30bb\u30f3\u30bf\u30fc\u30aa\u30d5\u30a3\u30b9"
      }
    ],
    "optional_parameters": [
      {
        "name": "pos",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u958b\u59cb\u4f4d\u7f6e\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\u203b1\u4ef6\u76ee\u304b\u3089 `num` \u3067\u6307\u5b9a\u3055\u308c\u305f\u4ef6\u6570\u5206\u306e\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "gov",
        "type": "ENUM",
        "description": "### \u653f\u4ee4\u6307\u5b9a\u90fd\u5e02\u8868\u793a\u6709\u7121\u8a2d\u5b9a\n|\u8a2d\u5b9a|\u5024|\u201d\u4ed9\u53f0\u201d\u3092\u691c\u7d22\u3057\u305f\u5834\u5408|\n|---|---|---|\n|\u884c\u653f\u533a\u3092\u8868\u793a|0 |\u5bae\u57ce\u770c\u4ed9\u53f0\u5e02\u9752\u8449\u533a<br>\u5bae\u57ce\u770c\u4ed9\u53f0\u5e02\u5bae\u57ce\u91ce\u533a<br>\u5bae\u57ce\u770c\u4ed9\u53f0\u5e02\u82e5\u6797\u533a<br>\u5bae\u57ce\u770c\u4ed9\u53f0\u5e02\u592a\u767d\u533a<br>\u5bae\u57ce\u770c\u4ed9\u53f0\u5e02\u6cc9\u533a|\n|\u653f\u4ee4\u5e02\u3092\u8868\u793a|1|\u5bae\u57ce\u770c\u4ed9\u53f0\u5e02|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "num",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u4ef6\u6570\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u4ef6\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|500|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`500`",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-search.p.rapidapi.com/addr\"\nquerystring = {\"addr\": addr}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-search.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Search: addr",
    "tool description": "Performs address searches, including handling user input errors through hierarchical address lookup. This endpoint leverages MapFan API's geocoding capabilities, utilizing a comprehensive address database to provide accurate search results and error-resistant hierarchical address lookups, enhancing user experience by mitigating input inaccuracies.",
    "API name": "addr",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides detailed geocoding information for a searched address. Each result in a list includes a standardized full address string, precise latitude and longitude coordinates, and a breakdown of Japanese administrative codes (prefecture, city, district, block, etc.). This data is intended for mapping locations, standardizing address formats, or performing regional analysis.",
      "output_format": "The top-level response is a JSON object. The core information is located in the 'results' key, which contains a JSON array of result objects. Fields like 'goucd' (house number code) can be an empty string, indicating nullability. The 'hit', 'start_pos', and 'end_pos' fields suggest pagination capabilities, although all examples show only a single result."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use longitude,latitude from MapFanAPI search results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use longitude,latitude from MapFanAPI search results as destination"
          },
          {
            "name": "via",
            "description": "Can use longitude,latitude from MapFanAPI search results as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use longitude,latitude from MapFanAPI search results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use longitude,latitude from MapFanAPI search results as destination"
          },
          {
            "name": "via",
            "description": "Can use longitude,latitude from MapFanAPI search results as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use longitude,latitude from MapFanAPI search results as starting point"
          },
          {
            "name": "destination",
            "description": "Can use longitude,latitude from MapFanAPI search results as destination"
          },
          {
            "name": "via",
            "description": "Can use longitude,latitude from MapFanAPI search results as waypoints"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from MapFanAPI search results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from MapFanAPI search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from MapFanAPI search results"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Can use latitude,longitude from MapFanAPI search results as origin"
          },
          {
            "name": "destination",
            "description": "Can use latitude,longitude from MapFanAPI search results as destination"
          },
          {
            "name": "waypoints",
            "description": "Can use latitude,longitude from MapFanAPI search results as waypoints"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from MapFanAPI search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Search",
    "parent tool description": "MapFan API \u306e\u691c\u7d22API\u3067\u3059\u3002\u5404\u7a2e\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f4f\u6240\u3001\u30b9\u30dd\u30c3\u30c8\u30fbPOI\u3001\u99c5\u3001\u90f5\u4fbf\u756a\u53f7\uff09\u3084\u3001\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u7def\u5ea6\u7d4c\u5ea6\u304b\u3089\u4f4f\u6240\u53d6\u5f97\uff09\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4f4f\u6240\u8aa4\u5165\u529b\u5bfe\u7b56\u306b\u6709\u7528\u306a\u4f4f\u6240\u968e\u5c64\u691c\u7d22\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "name",
        "type": "STRING",
        "description": "### \u691c\u7d22\u5bfe\u8c61\u306e\u99c5\u540d\u79f0\u6587\u5b57\u5217\n\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001AND\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u672b\u5c3e\u306e \u201c\u99c5\u201d\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u304c\u3001\u7701\u7565\u3059\u308b\u3053\u3068\u3067\u7570\u306a\u308b\u691c\u7d22\u7d50\u679c\u3068\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": "\u65b0\u5bbf"
      }
    ],
    "optional_parameters": [
      {
        "name": "pos",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u958b\u59cb\u4f4d\u7f6e\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\u203b1\u4ef6\u76ee\u304b\u3089 `num` \u3067\u6307\u5b9a\u3055\u308c\u305f\u4ef6\u6570\u5206\u306e\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "gateway",
        "type": "ENUM",
        "description": "### \u99c5\u51fa\u5165\u53e3\u691c\u7d22\u8a2d\u5b9a\n\u99c5\u51fa\u5165\u53e3\u3092\u691c\u7d22\u5bfe\u8c61\u306b\u542b\u3081\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u542b\u3081\u306a\u3044|0|\n|\u542b\u3081\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "num",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u4ef6\u6570\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u4ef6\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|500|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`50`\n\n#### \u6ce8\u8a18\n`gateway=1`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\uff08\u99c5\u51fa\u5165\u53e3\u3092\u691c\u7d22\u5bfe\u8c61\u306b\u542b\u3081\u305f\u5834\u5408\uff09\u3001\u99c5\u691c\u7d22\u7d50\u679c\u3001\u99c5\u51fa\u5165\u53e3\u691c\u7d22\u7d50\u679c\u305d\u308c\u305e\u308c\u306e\u8fd4\u5374\u4ef6\u6570\u306b\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-search.p.rapidapi.com/sta\"\nquerystring = {\"name\": name}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-search.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Search: sta",
    "tool description": "Provides station search functionality based on location queries, leveraging the MapFan API's broader geocoding capabilities. This endpoint utilizes the API's comprehensive address and point-of-interest indexing to retrieve accurate station data, supporting tasks like route planning and location discovery. As part of the MapFan Search API, it benefits from integrated reverse geocoding and address hierarchy validation to ensure reliable results even with ambiguous input, making it a critical tool for applications requiring precise geographic information.",
    "API name": "sta",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of train stations matching a location query. For each station found, it provides the name (often including the specific train line), a phonetic reading in Japanese (yomi), and precise geographic coordinates (latitude and longitude). The output also includes various identification codes for the station type, operating corporation, and train line, along with metadata on the total number of results found.",
      "output_format": "The output is a single JSON object. The primary data is located in the \"results\" key, which contains a JSON array of station objects. The top-level keys `hit`, `start_pos`, and `end_pos` indicate support for pagination. All values in the examples are strings or numbers; no null values are observed."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as a starting point"
          },
          {
            "name": "destination",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as a destination point"
          },
          {
            "name": "via",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as a starting point"
          },
          {
            "name": "destination",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as a destination point"
          },
          {
            "name": "via",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as a starting point"
          },
          {
            "name": "destination",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as a destination point"
          },
          {
            "name": "via",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "points",
            "description": "Can use the latitude,longitude from station coordinates in MapFanAPI output as waypoints"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Elevation",
        "connect params": [
          {
            "name": "points",
            "description": "Can use the [latitude,longitude] from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use the latitude,longitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use the longitude from station coordinates in MapFanAPI output"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from station coordinates in MapFanAPI output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Search",
    "parent tool description": "MapFan API \u306e\u691c\u7d22API\u3067\u3059\u3002\u5404\u7a2e\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u4f4f\u6240\u3001\u30b9\u30dd\u30c3\u30c8\u30fbPOI\u3001\u99c5\u3001\u90f5\u4fbf\u756a\u53f7\uff09\u3084\u3001\u30ea\u30d0\u30fc\u30b9\u30b8\u30aa\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\uff08\u7def\u5ea6\u7d4c\u5ea6\u304b\u3089\u4f4f\u6240\u53d6\u5f97\uff09\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u306e\u4f4f\u6240\u8aa4\u5165\u529b\u5bfe\u7b56\u306b\u6709\u7528\u306a\u4f4f\u6240\u968e\u5c64\u691c\u7d22\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002",
    "required_parameters": [
      {
        "name": "lonlat",
        "type": "STRING",
        "description": "### \u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n` [\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024]`\n\n#### \u8a18\u8ff0\u4f8b\n`139.767231,35.681196`\n\n#### \u6ce8\u8a18\n\u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": "139.7474147222,35.7298256052"
      }
    ],
    "optional_parameters": [
      {
        "name": "openinghour",
        "type": "ENUM",
        "description": "### \u55b6\u696d\u6642\u9593\u51fa\u529b\u6709\u7121\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u51fa\u529b\u3057\u306a\u3044|0|\n|\u51fa\u529b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u55b6\u696d\u6642\u9593\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30b9\u30dd\u30c3\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n- \u5f53\u8a72\u60c5\u5831\u3092\u53d6\u5f97\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u30fb\u30b8\u30e3\u30f3\u30eb\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u4e00\u89a7\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "facility",
        "type": "ENUM",
        "description": "### \u4ed8\u5e2f\u8a2d\u5099\u30fb\u30b5\u30fc\u30d3\u30b9\u60c5\u5831\u51fa\u529b\u6709\u7121\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u51fa\u529b\u3057\u306a\u3044|0|\n|\u51fa\u529b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\t- ATM\u8a2d\u7f6e\u6709\u7121\n\t- \u9152\u53d6\u308a\u6271\u3044\u6709\u7121\n\t- \u305f\u3070\u3053\u53d6\u308a\u6271\u3044\u6709\u7121\n\t- \u30c9\u30e9\u30a4\u30d6\u30b9\u30eb\u30fc\u8a2d\u7f6e\u6709\u7121\n\t- \u99d0\u8eca\u5834\u8a2d\u7f6e\u6709\u7121\n- \u5f53\u8a72\u60c5\u5831\u3092\u53d6\u5f97\u53ef\u80fd\u306a\u30c7\u30fc\u30bf\u30fb\u30b8\u30e3\u30f3\u30eb\u306b\u3064\u304d\u307e\u3057\u3066\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u4e00\u89a7\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "num",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u4ef6\u6570\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u4ef6\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|500|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`50`",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "gnrcd",
        "type": "STRING",
        "description": "### \u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\n\u7279\u5b9a\u30b8\u30e3\u30f3\u30eb\u306e\u30b9\u30dd\u30c3\u30c8\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u691c\u7d22\u5bfe\u8c61\u306e\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306fOR\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n\u6307\u5b9a\u53ef\u80fd\u306a\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b8\u30e3\u30f3\u30eb\u30b3\u30fc\u30c9\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "routepoint",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u63a2\u7d22\u7528\u30dd\u30a4\u30f3\u30c8\u51fa\u529b\u6709\u7121\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u51fa\u529b\u3057\u306a\u3044|0|\n|\u51fa\u529b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u30eb\u30fc\u30c8\u63a2\u7d22\u7528\u30dd\u30a4\u30f3\u30c8\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30b9\u30dd\u30c3\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "name",
        "type": "STRING",
        "description": "### \u691c\u7d22\u5bfe\u8c61\u306e\u7d5e\u308a\u8fbc\u307f\u6587\u5b57\u5217\n\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001AND\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- `field`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u5fc5\u9808\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "rad",
        "type": "NUMBER",
        "description": "### \u691c\u7d22\u7bc4\u56f2\n\u691c\u7d22\u534a\u5f84\u3092\u30e1\u30fc\u30c8\u30eb\u5358\u4f4d\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5927|50000\uff0850km\uff09|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1000`\uff081km\uff09\n\n#### \u6ce8\u8a18\n\u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "phonebook",
        "type": "ENUM",
        "description": "### \u96fb\u8a71\u5e33\u30c7\u30fc\u30bf\u691c\u7d22\u30aa\u30d7\u30b7\u30e7\u30f3\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u96fb\u8a71\u5e33\u30c7\u30fc\u30bf\u3092\u691c\u7d22\u5bfe\u8c61\u3068\u3057\u306a\u3044<br>\uff08\u5f0a\u793e\u72ec\u81ea\u6574\u5099POI\u306e\u307f\u691c\u7d22\uff09|0|\n|\u5f0a\u793e\u72ec\u81ea\u6574\u5099POI\u3068MapFan Directory\uff08\u203b\uff09\u3092\u691c\u7d22\u5bfe\u8c61\u3068\u3059\u308b|1|\n\n\u203bMapFan Directory\u306f\u3001\u30b0\u30ea\u30fc\u30f3\u30da\u30fc\u30b8\u00ae\u03b1(\u65e5\u672c\u30bd\u30d5\u30c8\u8ca9\u58f2\u682a\u5f0f\u4f1a\u793e\u63d0\u4f9b)\u3092\u57fa\u306b\u3001\u5f0a\u793e\u304c\u5236\u4f5c\u3057\u305f\u96fb\u8a71\u5e33\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3067\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "pos",
        "type": "NUMBER",
        "description": "### \u53d6\u5f97\u958b\u59cb\u4f4d\u7f6e\n\u691c\u7d22\u7d50\u679c\u306e\u8fd4\u5374\u958b\u59cb\u4f4d\u7f6e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\u203b1\u4ef6\u76ee\u304b\u3089 `num` \u3067\u6307\u5b9a\u3055\u308c\u305f\u4ef6\u6570\u5206\u306e\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "field",
        "type": "ENUM",
        "description": "### \u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9\n\u30b9\u30dd\u30c3\u30c8\u306e\u7279\u5b9a\u306e\u5c5e\u6027\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u691c\u7d22\u3092\u884c\u3046\u5834\u5408\u306b\u3001\u5bfe\u8c61\u3068\u3059\u308b\u5c5e\u6027\uff08\u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9\uff09\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u8907\u6570\u306e\u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\u8907\u6570\u6307\u5b9a\u3057\u305f\u5834\u5408\u306fOR\u691c\u7d22\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u6307\u5b9a\u53ef\u80fd\u306a\u691c\u7d22\u30d5\u30a3\u30fc\u30eb\u30c9|\u30d5\u30a3\u30fc\u30eb\u30c9\u540d|\n|---|\n|name|\u30b9\u30dd\u30c3\u30c8\u540d|\n|yomi|\u30b9\u30dd\u30c3\u30c8\u540d\u8aad\u307f|\n|gnr_name|\u30b8\u30e3\u30f3\u30eb\u540d|\n|addr|\u4f4f\u6240|\n|tel|\u96fb\u8a71\u756a\u53f7|\n|comment|\u30b3\u30e1\u30f3\u30c8|\n|access|\u30a2\u30af\u30bb\u30b9\u60c5\u5831<br>\u203b\u30b9\u30dd\u30c3\u30c8\u306e\u6700\u5bc4\u308a\u306e\u9244\u9053\u8def\u7dda\u30fb\u99c5\u3001\u30a4\u30f3\u30bf\u30fc\u30c1\u30a7\u30f3\u30b8|",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-search.p.rapidapi.com/spotarea\"\nquerystring = {\"lonlat\": lonlat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-search.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapFanAPI - Search: spotarea",
    "tool description": "Searches for nearby spots based on a given latitude and longitude. This is part of the MapFan API's Search API, which provides geocoding (addresses, POIs, stations, postal codes) and reverse geocoding (extracting addresses from coordinates), along with address hierarchy search to mitigate input errors. The endpoint leverages the API's comprehensive location data capabilities to deliver context-aware nearby spot results, enhancing applications that require precise geographic context or location-based recommendations.",
    "API name": "spotarea",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of nearby points of interest (spots) based on a specified latitude and longitude. Each result provides detailed information about a spot, including its name, phonetic reading, address, phone number, coordinates, distance from the query point, and genre categorization. The output also includes pagination metadata, such as the total number of hits and the range of results returned in the current response.",
      "output_format": "The output is a JSON object. The primary data is contained within the 'results' key, which is an array of objects, each representing a spot. The top-level keys 'hit', 'start_pos', and 'end_pos' indicate that the results are paginated. Some fields within each spot object, such as 'tel' and 'comment', can be null. The 'gnr_info' field is a nested array of objects that describes the spot's category."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "latitude",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "latitude",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "latitude",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "latitude",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "param_name": "lonlat",
            "description": "Can use the longitude,latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "param_name": "start",
            "description": "Can use the longitude,latitude from one spot's coordinates as a starting point"
          },
          {
            "param_name": "destination",
            "description": "Can use the longitude,latitude from another spot's coordinates as a destination"
          },
          {
            "param_name": "via",
            "description": "Can use the longitude,latitude from additional spots as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "param_name": "start",
            "description": "Can use the longitude,latitude from one spot's coordinates as a starting point"
          },
          {
            "param_name": "destination",
            "description": "Can use the longitude,latitude from another spot's coordinates as a destination"
          },
          {
            "param_name": "via",
            "description": "Can use the longitude,latitude from additional spots as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "param_name": "lonlat",
            "description": "Can use the longitude,latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "param_name": "start",
            "description": "Can use the longitude,latitude from one spot's coordinates as a starting point"
          },
          {
            "param_name": "destination",
            "description": "Can use the longitude,latitude from another spot's coordinates as a destination"
          },
          {
            "param_name": "via",
            "description": "Can use the longitude,latitude from additional spots as waypoints"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "param_name": "lon",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "lat",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "param_name": "longitude",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "latitude",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "param_name": "origin",
            "description": "Can use the longitude,latitude from one spot's coordinates as a starting point"
          },
          {
            "param_name": "destination",
            "description": "Can use the longitude,latitude from another spot's coordinates as a destination"
          },
          {
            "param_name": "waypoints",
            "description": "Can use the longitude,latitude from additional spots as waypoints"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "param_name": "stops",
            "description": "Can use the longitude,latitude from multiple spots' coordinates as a semicolon-delimited list of stops"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "param_name": "location",
            "description": "Can use the latitude,longitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "param_name": "lat",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "lng",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "param_name": "lat",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "lng",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "param_name": "lat",
            "description": "Can use the latitude from a spot's coordinates in the results array"
          },
          {
            "param_name": "lon",
            "description": "Can use the longitude from a spot's coordinates in the results array"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/vector/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
    "tool description": "Returns vector tiles following the OpenMapTiles schema, leveraging Mapilion's scalable infrastructure. This service utilizes OpenStreetMap data and the OpenMapTiles standard to deliver high-resolution vector maps, enabling detailed and customizable geographic representations at scale.",
    "API name": "Get Vector Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single binary vector tile containing geographic data. This data is organized into layers (e.g., 'water', 'aerodrome_label') and includes geometric features (points, lines, polygons) and their associated attributes (e.g., names in multiple languages, classifications). The output is intended to be consumed by a mapping library or GIS software to render a visual, interactive map.",
      "output_format": "The output is binary data, specifically a single vector tile in the Mapbox Vector Tile (MVT) format, which is based on Protocol Buffers (Protobuf). It is not a human-readable format like JSON and requires a specialized parser to interpret its contents. The data is self-contained within the single binary response and is not paginated."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "Can use the vector tile data after conversion to GeoJSON format for rendering geographic features on static maps"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Planet Vector Tiles",
        "connect params": [
          {
            "name": "x",
            "description": "Can use the same tile coordinates to retrieve complementary vector data"
          },
          {
            "name": "y",
            "description": "Can use the same tile coordinates to retrieve complementary vector data"
          },
          {
            "name": "z",
            "description": "Can use the same tile coordinates to retrieve complementary vector data"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "x",
            "description": "Can use the same tile coordinates to overlay hillshading on the vector tile"
          },
          {
            "name": "y",
            "description": "Can use the same tile coordinates to overlay hillshading on the vector tile"
          },
          {
            "name": "z",
            "description": "Can use the same tile coordinates to overlay hillshading on the vector tile"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "Can use the same tile coordinates to overlay hillshading on the vector tile"
          },
          {
            "name": "y",
            "description": "Can use the same tile coordinates to overlay hillshading on the vector tile"
          },
          {
            "name": "z",
            "description": "Can use the same tile coordinates to overlay hillshading on the vector tile"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "756"
      },
      {
        "name": "version",
        "type": "string",
        "description": "",
        "default": "v2"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "11"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "805"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/hillshades/{version}/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
    "tool description": "Generates hillshading raster tiles in PNG format, supporting versions v1 and v2. This endpoint is part of Mapilion's raster map tiles, which leverage OpenStreetMap and OpenMapTiles data to provide detailed geographic overlays, enhancing map visuals with terrain-specific shading to simulate mountainous landscapes.",
    "API name": "Get Hillshading Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns binary data representing a single map tile in PNG image format. This image file contains hillshading, which is a visual representation of terrain used to simulate the appearance of mountains and valleys on a map. This output is intended to be used as a visual overlay on a base map to provide topographical context. In case of an error, such as requesting a non-existent tile, the tool returns a plain text string.",
      "output_format": "The successful output is raw binary data for a PNG image, not a structured format like JSON or XML. The examples confirm the presence of PNG file headers (IHDR). Error conditions return a simple string, such as a 404 error message."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The hillshading tile can be used as a background marker or overlay on the static map"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "format",
            "description": "The hillshading PNG can be used as a base layer with the map image overlaid with appropriate transparency"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "z",
            "description": "The zoom level from the hillshading tile can be used to request matching terrain data"
          },
          {
            "name": "x",
            "description": "The x coordinate from the hillshading tile can be used to request the same geographic area"
          },
          {
            "name": "y",
            "description": "The y coordinate from the hillshading tile can be used to request the same geographic area"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "The x coordinate from the source hillshading tile can be used to request adjacent or related hillshading"
          },
          {
            "name": "y",
            "description": "The y coordinate from the source hillshading tile can be used to request adjacent or related hillshading"
          },
          {
            "name": "z",
            "description": "The zoom level from the source hillshading tile can be used to request hillshading at the same scale"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "type",
        "type": "string",
        "description": "",
        "default": "v3"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/tilejson/{type}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Tile Json",
    "tool description": "Returns tile JSON for specified styles (v3, hillshading-v1, hillshading-v2). This is part of Mapilion's service, which provides scalable vector and raster map tiles leveraging OpenStreetMap and OpenMapTiles data, enabling developers to access customizable map representations for diverse applications.",
    "API name": "Get Tile Json",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single JSON object containing metadata for a map tileset, conforming to the TileJSON specification. This object provides essential configuration details, such as the URL template for fetching map tiles, the data format (e.g., 'pbf' for vector, 'png' for raster), zoom levels, and required attribution. This information is intended to be used by mapping client libraries (like MapLibre or Leaflet) to render a map based on the selected style.",
      "output_format": "The output is a single, non-array JSON object. The structure follows the TileJSON standard. A key named `tiles` contains an array with a single URL template string. For vector tile outputs, there is a `vector_layers` key which contains an array of objects detailing the data layers within the tileset. The output is not paginated."
    },
    "connected tools": [
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
        "connect params": [
          {
            "name": "z",
            "description": "The source tool provides zoom level information that can be used for fetching appropriate vector tiles"
          },
          {
            "name": "x",
            "description": "The source tool provides tile URL templates that include x coordinates for vector tiles"
          },
          {
            "name": "y",
            "description": "The source tool provides tile URL templates that include y coordinates for vector tiles"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "z",
            "description": "The source tool provides zoom level information that can be used for fetching appropriate hillshading tiles"
          },
          {
            "name": "x",
            "description": "The source tool provides tile URL templates that include x coordinates for hillshading tiles"
          },
          {
            "name": "y",
            "description": "The source tool provides tile URL templates that include y coordinates for hillshading tiles"
          },
          {
            "name": "version",
            "description": "The source tool mentions hillshading versions (v1, v2) that can be specified when fetching tiles"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Fonts",
        "connect params": [
          {
            "name": "fontstack",
            "description": "The source tool's TileJSON may include font information needed for rendering vector tiles"
          },
          {
            "name": "range",
            "description": "The source tool's TileJSON may include font range information needed for rendering vector tiles"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "The source tool provides center coordinates that can be used to position a static map"
          },
          {
            "name": "zoom",
            "description": "The source tool provides zoom level information that can be used for generating static maps"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "range",
        "type": "string",
        "description": "",
        "default": "0-255"
      },
      {
        "name": "fontstack",
        "type": "string",
        "description": "",
        "default": "Roboto Regular"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/fonts/{fontstack}/{range}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Fonts",
    "tool description": "This endpoint returns custom fonts for vector tiles, essential for rendering styled maps in a style.json configuration. It leverages Mapilion's infrastructure, which provides scalable vector and raster map tiles based on OpenStreetMap and OpenMapTiles data, enabling developers to customize map aesthetics while maintaining performance and accuracy.",
    "API name": "Get Fonts",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool provides font data in a binary format, specifically designed for rendering text labels on vector maps. This output contains font stacks (e.g., 'Noto Sans Regular') and glyph information that a map rendering engine uses to display text as defined in a map style file. In case of an error, a plain text error message is returned instead.",
      "output_format": "The successful output is a binary file, likely a Protobuf (`.pbf`) containing a font stack, which is not human-readable. This is a single, non-nested data blob. Error responses are simple plain text strings. The API does not use a JSON structure."
    },
    "connected tools": [
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Style Json",
        "connect params": [
          {
            "name": "style",
            "description": "The style JSON can use the font data from the source tool to render text labels on the map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "The map style may require custom fonts for proper text rendering"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "style",
        "type": "string",
        "description": "",
        "default": "osm-bright"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/stylejson/{style}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Style Json",
    "tool description": "Returns pre-configured style JSONs for map rendering, including options like 'osm-bright', 'dark-matter', and hillshaded variants. This endpoint is part of Mapilion, a service delivering scalable vector and raster map tiles based on OpenStreetMap and OpenMapTiles data, enabling users to quickly implement standardized styles while allowing customization for advanced scenarios.",
    "API name": "Get Style Json",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single JSON object that represents a complete map style definition, conforming to the Mapbox Style Specification. This object contains all the necessary information for a map rendering client, including data sources, layer definitions, visual properties like colors and fonts, and metadata. The output is intended to be consumed by a mapping library (like Mapbox GL or MapLibre GL) to render a visually complete and interactive map.",
      "output_format": "The output is a single, deeply nested JSON object. Key top-level properties include 'version', 'name', 'metadata', 'sources', 'sprite', 'glyphs', and 'layers'. The 'layers' property is an array of objects, where each object defines the styling for a specific map feature (e.g., roads, water, buildings). The structure is complex but standardized."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "Defines the maps appearence."
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
        "connect params": [
          {
            "name": "x",
            "description": ""
          },
          {
            "name": "y",
            "description": ""
          },
          {
            "name": "z",
            "description": ""
          }
        ]
      },
      {
        "tool name": "MapToolkit: Planet Vector Tiles",
        "connect params": [
          {
            "name": "x",
            "description": ""
          },
          {
            "name": "y",
            "description": ""
          },
          {
            "name": "z",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapTiles",
    "parent tool description": "Map Tiles for interactive online maps based on data by OpenStreetMap contributors with labels in English, French or Spanish. ",
    "required_parameters": [
      {
        "name": "z",
        "type": "NUMBER",
        "description": "zoom (from 0 up to zoom 19)",
        "default": "3"
      },
      {
        "name": "x",
        "type": "NUMBER",
        "description": "X-number of tile (see documentation)",
        "default": "4"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "Y-number of tile (see documentation)",
        "default": "2"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://maptiles.p.rapidapi.com/es/map/v1/{z}/{x}/{y}.png\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "MapTiles: getMapTilewithSpanishLabels",
    "tool description": "Generates raster map tiles with Spanish labels using OpenStreetMap data. This endpoint provides interactive map tiles with localized labeling, enabling developers to create Spanish-language mapping solutions. It leverages OpenStreetMap contributors' data to deliver accurate, region-specific details, enhancing user experience for Spanish-speaking audiences.",
    "API name": "getMapTilewithSpanishLabels",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single raster map tile as a PNG image. This image represents a small, specific geographic area with map features and labels rendered in Spanish. These tiles are intended to be used in combination to construct a complete, interactive map for Spanish-speaking audiences, using data from OpenStreetMap.",
      "output_format": "The output is not a structured text format like JSON, but raw binary data representing a single PNG image file. The data begins with the standard PNG file signature (e.g., `\ufffdPNG\\r\\n...`) and contains image headers (IHDR) and data chunks (IDAT)."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The marker parameter can use icon URLs, and the PNG map tile could serve as a custom marker icon"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "The map tile could potentially be used as a custom icon overlay on another map"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapTiles",
    "parent tool description": "Map Tiles for interactive online maps based on data by OpenStreetMap contributors with labels in English, French or Spanish. ",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "X-number of tile (see documentation)",
        "default": "6"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "zoom (from 0 up to zoom 19)",
        "default": "3"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "Y-number of tile (see documentation)",
        "default": "3"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://maptiles.p.rapidapi.com/en/map/v1/{z}/{x}/{y}.png\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "MapTiles: getMapTilewithEnglishLabels",
    "tool description": "Generates raster map tiles with English labels using OpenStreetMap data. This endpoint provides detailed map tiles for interactive online maps, leveraging contributions from OpenStreetMap contributors to ensure accuracy and comprehensiveness, with labels available in English, French, or Spanish to cater to diverse user needs.",
    "API name": "getMapTilewithEnglishLabels",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The output is a single map tile rendered as a PNG image. This image provides a visual representation of a specific geographic area using OpenStreetMap data, complete with English-language labels for places and features. These tiles are intended to be assembled and used within an interactive web or mobile map viewer.",
      "output_format": "The output is raw binary data for a single PNG image file, not a structured text format like JSON or XML. The consumer must be able to process and render this binary image data."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The marker parameter can use PNG images as icons via the 'icon' attribute"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "Could potentially use the map tile as a custom icon overlay on another map"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapTiles",
    "parent tool description": "Map Tiles for interactive online maps based on data by OpenStreetMap contributors with labels in English, French or Spanish. ",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "X-number of tile (see documentation)",
        "default": "8"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "Y-number of tile (see documentation)",
        "default": "5"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "zoom (from 0 up to zoom 19)",
        "default": "4"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://maptiles.p.rapidapi.com/fr/map/v1/{z}/{x}/{y}.png\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "MapTiles: getMapTilewithFrenchLabels",
    "tool description": "Generates raster map tiles with French labels based on geographic coordinates and zoom level. This endpoint leverages OpenStreetMap data contributed by its global community to provide localized labeling, enhancing usability for French-speaking regions within the broader map tiles service that supports English, French, and Spanish labels for interactive online maps.",
    "API name": "getMapTilewithFrenchLabels",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single raster map tile as a PNG image. This image provides a visual representation of a specific geographic area based on coordinates and zoom level, featuring data from OpenStreetMap. The key information is the map imagery itself, overlaid with text labels such as place names, which are rendered in French. These tiles are intended to be used in combination to render a complete, interactive map for a user.",
      "output_format": "The output is a binary data stream representing a single PNG image file. It is not a structured data format like JSON or XML. As such, concepts like nesting, pagination, and nullability are not applicable."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The map tile with French labels can be used as a custom marker icon on a static map"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "The French-labeled map tile can be used as a custom icon overlay on the map"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapTiles",
    "parent tool description": "Map Tiles for interactive online maps based on data by OpenStreetMap contributors with labels in English, French or Spanish. ",
    "required_parameters": [
      {
        "name": "y",
        "type": "NUMBER",
        "description": "Y-number of tile (see documentation)",
        "default": "3"
      },
      {
        "name": "x",
        "type": "NUMBER",
        "description": "X-number of tile (see documentation)",
        "default": "6"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "zoom (from 0 up to zoom 19)",
        "default": "3"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://maptiles.p.rapidapi.com/local/osm/v1/{z}/{x}/{y}.png\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "MapTiles: getStandardMapTile",
    "tool description": "Generates standard map tiles with labels in the local language for a place, as directly sourced from OpenStreetMap contributors. This endpoint provides interactive online map visuals using data curated by OpenStreetMap, featuring labels in English, French, or Spanish. It leverages the parent tool's scope of delivering globally accessible map infrastructure, ensuring localized textual representation while maintaining the original naming conventions from OpenStreetMap's extensive contributor-driven dataset.",
    "API name": "getStandardMapTile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a raw binary data stream representing a single map tile in PNG image format. These tiles are small, square visual segments of a map, sourced from OpenStreetMap. They are intended to be combined in a web or mobile application to construct a larger, interactive map display with localized labels.",
      "output_format": "The output is not a structured data format like JSON or XML, but rather the raw binary content of a PNG image file. The example data clearly shows the PNG file signature (`\u2030PNG`) and standard chunks like IHDR, PLTE, and IEND."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The map tile can be used as a custom marker icon by providing it as a URL"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "The map tile can be used as a custom icon on the map when properly referenced"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "kml",
        "type": "STRING",
        "description": "",
        "default": "forward geometry K-UrlML"
      },
      {
        "name": "geometry",
        "type": "STRING",
        "description": "",
        "default": "forward geometry GeoJSON"
      },
      {
        "name": "gpx_backward",
        "type": "STRING",
        "description": "",
        "default": "backward geometry GPX-Url"
      },
      {
        "name": "kml_backward",
        "type": "STRING",
        "description": "",
        "default": "backward geometry KML-Url"
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "",
        "default": "JSONP Callback Functionname"
      },
      {
        "name": "gpx",
        "type": "STRING",
        "description": "",
        "default": "forward geometry GPX-Url"
      },
      {
        "name": "end",
        "type": "STRING",
        "description": "",
        "default": "lng,lat"
      },
      {
        "name": "start",
        "type": "STRING",
        "description": "",
        "default": "lng,lat"
      },
      {
        "name": "geometry_backward",
        "type": "STRING",
        "description": "",
        "default": "backward geometry GeoJSON"
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "",
        "default": "de"
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/enhance/routing\"\nquerystring = {\"kml\": kml, \"geometry\": geometry, \"gpx_backward\": gpx_backward, \"kml_backward\": kml_backward, \"routeType\": routetype, \"callback\": callback, \"gpx\": gpx, \"end\": end, \"start\": start, \"geometry_backward\": geometry_backward, \"language\": language}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Routing Enhancement",
    "tool description": "Generates a routing along a specific cycleway using detailed map data and cycleway information. This leverages the toolkit's routing capabilities, part of a comprehensive mapping service that includes map tiles, geocoding, static maps, and elevation data, to create precise and customized bike routes.",
    "API name": "Routing Enhancement",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides detailed information for a bicycle route along a specific cycleway. This likely includes the route's path, represented as a series of geographic coordinates (a polyline), turn-by-turn navigation instructions, and summary data such as the total distance and estimated travel time. This data is intended for use in applications that display routes on a map or provide navigational guidance.",
      "output_format": "The provided examples are empty strings, which makes the format highly uncertain. A standard API for this purpose would typically return a JSON object containing keys for route geometry, steps, and a summary. However, the empty strings could imply the output is a raw string (like an encoded polyline or a route ID), that no standard data is returned, or that the examples represent a null/error state. The exact structure is unknown due to this ambiguity."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "routeresultid",
            "description": "Could use the route data to display the bicycle path on a static map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "path",
            "description": "Could use the route's polyline coordinates to draw the bicycle path on a static map"
          },
          {
            "name": "geojson",
            "description": "Could use the route's geometry data to render the bicycle path on a map"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "waypoints",
            "description": "Could use key points from the bicycle route as waypoints for alternative routing"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "Could use key points from the bicycle route as stops for alternative routing"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Elevation",
        "connect params": [
          {
            "name": "points",
            "description": "Could use the route's coordinates to get detailed elevation data along the path"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Could use points from the bicycle route to identify county boundaries"
          },
          {
            "name": "latitude",
            "description": "Could use points from the bicycle route to identify county boundaries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "elevation",
        "type": "BOOLEAN",
        "description": "",
        "default": "1"
      },
      {
        "name": "cache",
        "type": "BOOLEAN",
        "description": "",
        "default": "1"
      },
      {
        "name": "gpx",
        "type": "STRING",
        "description": "",
        "default": "GPX Fileurl"
      },
      {
        "name": "geometry",
        "type": "STRING",
        "description": "",
        "default": "GeoJSON geometry string"
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "",
        "default": "de"
      },
      {
        "name": "surface",
        "type": "BOOLEAN",
        "description": "",
        "default": "1"
      },
      {
        "name": "kml",
        "type": "STRING",
        "description": "",
        "default": "KML Fileurl"
      },
      {
        "name": "mapmatch",
        "type": "BOOLEAN",
        "description": "",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/enhance/route\"\nquerystring = {\"elevation\": elevation, \"cache\": cache, \"gpx\": gpx, \"routeType\": routetype, \"geometry\": geometry, \"language\": language, \"surface\": surface, \"kml\": kml, \"mapmatch\": mapmatch}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Route Enhancement",
    "tool description": "Enhances GPX files with elevation data, surface information, and map matching. This endpoint leverages the maps toolkit's routing and elevation services to refine GPS tracks, using detailed terrain and road data to ensure accuracy and completeness in outdoor navigation planning.",
    "API name": "Route Enhancement",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool outputs an enhanced GPX file, which is a standard format for GPS track data. This output file contains the original route information but is augmented with new data points, including elevation for each coordinate, the type of surface (e.g., pavement, dirt), and coordinates that have been 'snapped' to known roads or trails via map matching. This enhanced file provides a more accurate and detailed representation of a route for navigation and analysis.",
      "output_format": "The output is expected to be a single, complete GPX file, which is an XML-based format, returned as a string. It is not structured as a JSON object and is not paginated. The provided empty string examples are ambiguous and likely indicate a raw file content response rather than a structured API response."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "gpx",
            "description": "The enhanced GPX file can be used as input for routing calculations"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "path",
            "description": "The enhanced GPX file contains route coordinates that can be used to display the path on a static map"
          },
          {
            "name": "geojson",
            "description": "The enhanced GPX file can be converted to GeoJSON format for display on a static map"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "The enhanced GPX file contains coordinates that can be extracted and formatted as stops"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "The enhanced GPX file contains coordinates where the first point can be used as origin"
          },
          {
            "name": "destination",
            "description": "The enhanced GPX file contains coordinates where the last point can be used as destination"
          },
          {
            "name": "waypoints",
            "description": "The enhanced GPX file contains coordinates that can be extracted as intermediate waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "The enhanced GPX file contains coordinates where the first point can be used as start"
          },
          {
            "name": "destination",
            "description": "The enhanced GPX file contains coordinates where the last point can be used as destination"
          },
          {
            "name": "via",
            "description": "The enhanced GPX file contains coordinates that can be extracted as intermediate via points"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "The enhanced GPX file contains coordinates where the first point can be used as start"
          },
          {
            "name": "destination",
            "description": "The enhanced GPX file contains coordinates where the last point can be used as destination"
          },
          {
            "name": "via",
            "description": "The enhanced GPX file contains coordinates that can be extracted as intermediate via points"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "The enhanced GPX file contains coordinates where the first point can be used as start"
          },
          {
            "name": "destination",
            "description": "The enhanced GPX file contains coordinates where the last point can be used as destination"
          },
          {
            "name": "via",
            "description": "The enhanced GPX file contains coordinates that can be extracted as intermediate via points"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "The enhanced GPX file contains latitude coordinates that can be extracted for timezone lookup"
          },
          {
            "name": "longitude",
            "description": "The enhanced GPX file contains longitude coordinates that can be extracted for timezone lookup"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "z",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "x",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "y",
        "type": "string",
        "description": "",
        "default": "1"
      }
    ],
    "optional_parameters": [
      {
        "name": "ratio",
        "type": "STRING",
        "description": "Set to `2` for retina tiles.",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/tiles/{z}/{x}/{y}/terrain.png\"\nquerystring = {\"ratio\": ratio}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Global Terrain Raster",
    "tool description": "Generates terrain rastertiles for a specified region and zoom level, providing detailed elevation and topographic data. This is part of a comprehensive map toolkit that offers map tiles, geocoding, routing, static maps, and elevation data, leveraging high-resolution terrain datasets to enhance geographic visualization and analysis for applications like navigation, environmental studies, and urban planning.",
    "API name": "Global Terrain Raster",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool outputs a single raster image in PNG format. This image is a terrain tile that visually represents elevation and topographic data for a specified geographic region and zoom level. It is intended for geographic visualization and analysis in applications like digital maps, navigation systems, or environmental studies.",
      "output_format": "The output is a raw byte stream representing a single PNG image file. It is not a structured text format like JSON. The data starts with the PNG file signature (`\\x89PNG\\r\\n\\x1a\\n`) and contains the standard chunks (IHDR, PLTE, IDAT, etc.) that define the image's metadata and pixel data. The content is binary and must be handled by an image processing library or renderer."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "gpx",
            "description": "The terrain raster can be used as a background layer for route enhancement, providing elevation context for the GPX track"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "The terrain raster can be used as a base map type for static map generation"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "format",
            "description": "The terrain raster can be overlaid with other map elements, using the same image format (PNG)"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "ratio",
            "description": "The terrain raster can be combined with hillshading for enhanced terrain visualization"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "x",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "z",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "y",
        "type": "string",
        "description": "",
        "default": "1"
      }
    ],
    "optional_parameters": [
      {
        "name": "ratio",
        "type": "STRING",
        "description": "Set to `2` for retina tiles.",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/tiles/{z}/{x}/{y}/terrainwinter.png\"\nquerystring = {\"ratio\": ratio}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Global Terrain Winter",
    "tool description": "Generates global terrain tiles with winter color schemes, providing detailed elevation and landscape visuals optimized for cold-weather scenarios. This leverages the parent toolkit's map tile capabilities, utilizing a global terrain database to render topographical data with seasonal coloring, enhancing situational awareness for applications like winter navigation, environmental analysis, or travel planning.",
    "API name": "Global Terrain Winter",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns the raw binary data for a PNG image. This image represents a single map tile depicting global terrain with a winter-themed color scheme. The output provides visual information about elevation and landscape, intended for applications like winter navigation, environmental analysis, or travel planning.",
      "output_format": "The output is a single string containing the raw binary data of a PNG image file. It is not a structured JSON object. Each output begins with the standard PNG file signature (e.g., \"\ufffdPNG\")."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The winter terrain PNG could be used as a custom marker icon on a static map"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "The winter terrain PNG could be used as a custom icon overlay on the map"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "size",
        "type": "STRING",
        "description": "",
        "default": "640x480"
      },
      {
        "name": "center",
        "type": "STRING",
        "description": "",
        "default": "48.20835,16.3725"
      },
      {
        "name": "zoom",
        "type": "NUMBER",
        "description": "",
        "default": "11"
      }
    ],
    "optional_parameters": [
      {
        "name": "bounds",
        "type": "STRING",
        "description": "Will be used instead of `center` and `zoom` if defined. Format is `{north},{east},{south},{west}`.",
        "default": ""
      },
      {
        "name": "geojson",
        "type": "STRING",
        "description": "Value: \n`{attribute}:{value}[|{attribute}:{value} ...]`\nAttributes:\n`geometry` is a GeoJSON string of type `LineString` or `MultiLineString`\n`color` in hex color format `{AABBGGRR}`\n`width` sets the lines thickness\n\nRepeated `geojson` parameters supported.",
        "default": ""
      },
      {
        "name": "maptype",
        "type": "STRING",
        "description": "Defines the maps appearence.",
        "default": "toursprung-terrain"
      },
      {
        "name": "path",
        "type": "STRING",
        "description": "Value: \n`{attribute}:{value}[|{attribute}:{value} ...]`\nAttributes:\n`points` are the paths coordinates `{lat},{lng}[|{lat}:{lng} ...]`\n`color` in hex color format `{AABBGGRR}`\n`width` sets the lines thickness\n\nRepeated `path` parameters supported.",
        "default": ""
      },
      {
        "name": "delta_zoom",
        "type": "NUMBER",
        "description": "Defines how many zoom levels will get added/removed if it the `zoom` was calculated automatically.",
        "default": ""
      },
      {
        "name": "kml",
        "type": "STRING",
        "description": "Value: \n`{kml}?{attribute}={value}[&{attribute}={value} ...]`\nAttributes:\n`color` in hex color format `{AABBGGRR}`\n`width` sets the lines thickness\n\nRepeated `kml` parameters supported.",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "",
        "default": "png"
      },
      {
        "name": "marker",
        "type": "STRING",
        "description": "Value: \n`{attribute}:{value}[|{attribute}:{value} ...]`\nAttributes:\n`center` is the markers location\n`icon` can be any public URL of a PNG or JPEG\n`shadow` can be set to `false` to change the markers anchor from center to bottom\n\nRepeated `marker` parameters supported.\n\n",
        "default": ""
      },
      {
        "name": "factor",
        "type": "STRING",
        "description": "Defines the images scaling factor.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/staticmap\"\nquerystring = {\"size\": size, \"maptype\": maptype, \"center\": center, \"format\": format, \"zoom\": zoom}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Staticmaps",
    "tool description": "Generates a static map image based on location and parameters. This uses the maps toolkit's capabilities, including map tiles and geocoding, to create a visual representation of a specific area, enhancing usability for applications requiring embedded maps.",
    "API name": "Staticmaps",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns the raw binary data for a PNG image file. This image is a static map that provides a visual representation of a specific geographic area based on the input parameters. The output is intended to be rendered or saved as an image file, allowing for the embedding of maps within applications.",
      "output_format": "The output is raw binary data corresponding to the PNG image format. It is not a structured format like JSON. The data begins with the standard PNG file signature, identified by the bytes `\ufffdPNG` and the `IHDR` chunk header."
    },
    "connected tools": []
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "points",
        "type": "STRING",
        "description": "JSON Array of [latitdue, longitude] Objects.",
        "default": "[[50,10],[46,16]]"
      }
    ],
    "optional_parameters": [
      {
        "name": "simplify",
        "type": "STRING",
        "description": "Simplifies the points before searching for elevation.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/elevation\"\nquerystring = {\"points\": points}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Elevation",
    "tool description": "Provides elevation data for a given location, leveraging a global database of terrain features. This endpoint is part of a comprehensive mapping toolkit that includes map tiles, geocoding, routing, and static maps, using GIS technology to deliver precise altitude measurements for applications like terrain analysis, construction planning, and outdoor navigation.",
    "API name": "Elevation",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of elevation values for one or more geographical locations. Each number in the output array represents the altitude at a specific point, presumably in a standard unit like meters or feet. This data is intended for applications like terrain analysis, outdoor navigation, and construction planning.",
      "output_format": "The output is a JSON array of numbers. The examples show integers, but floating-point values for higher precision are possible. The structure is a simple, flat array with no nesting or pagination. The number of elements in the array likely corresponds to the number of locations provided in the input."
    },
    "connected tools": [
      {
        "tool name": "Heightmap from Latitude and Longitude: get heightmap from two geopoints",
        "connect params": [
          {
            "name": "lat0",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          },
          {
            "name": "lat1",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          },
          {
            "name": "lng0",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          },
          {
            "name": "lng1",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Elevation data can be used to determine appropriate map centers based on terrain features"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "x",
            "description": "Elevation data can be used to validate or enhance terrain visualization"
          },
          {
            "name": "y",
            "description": "Elevation data can be used to validate or enhance terrain visualization"
          },
          {
            "name": "z",
            "description": "Elevation data can be used to determine appropriate zoom levels based on terrain features"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Winter",
        "connect params": [
          {
            "name": "x",
            "description": "Elevation data can be used to validate or enhance winter terrain visualization"
          },
          {
            "name": "y",
            "description": "Elevation data can be used to validate or enhance winter terrain visualization"
          },
          {
            "name": "z",
            "description": "Elevation data can be used to determine appropriate zoom levels based on terrain features"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "Elevation data can be used to validate or enhance hillshading visualization"
          },
          {
            "name": "y",
            "description": "Elevation data can be used to validate or enhance hillshading visualization"
          },
          {
            "name": "z",
            "description": "Elevation data can be used to determine appropriate zoom levels for hillshading"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "elevation",
            "description": "Elevation data can be used to enhance route planning with terrain information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "y",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "x",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "z",
        "type": "string",
        "description": "",
        "default": "1"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/tiles/{z}/{x}/{y}/planet.pbf\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Planet Vector Tiles",
    "tool description": "Generates scalable vector tiles for global map rendering, using GIS data to provide detailed geographical features at various zoom levels. This is part of a comprehensive mapping toolkit that includes geocoding, routing, and elevation data, enabling developers to build interactive maps with accurate, real-time information.",
    "API name": "Planet Vector Tiles",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool outputs binary data representing map vector tiles. This data contains detailed geographical features, such as administrative boundaries, roads, and land use, structured for efficient rendering at various zoom levels. These tiles are intended to be consumed by mapping libraries or client applications to build and display interactive global maps.",
      "output_format": "The output is a single binary string, likely in the Mapbox Vector Tile (MVT) format. This format is based on Google's Protocol Buffers (Protobuf) and is not human-readable. It requires a specialized parser or mapping library to decode the layers and geometric data contained within the tile."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "The vector tiles can be used as a base map layer"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Style Json",
        "connect params": [
          {
            "name": "style",
            "description": "The vector tiles can be styled using these predefined style configurations"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "Can be overlaid on the source vector tiles to add terrain visualization"
          },
          {
            "name": "y",
            "description": "Can be overlaid on the source vector tiles to add terrain visualization"
          },
          {
            "name": "z",
            "description": "Can be overlaid on the source vector tiles to add terrain visualization"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "x",
            "description": "Can be overlaid on the source vector tiles to add terrain visualization"
          },
          {
            "name": "y",
            "description": "Can be overlaid on the source vector tiles to add terrain visualization"
          },
          {
            "name": "z",
            "description": "Can be overlaid on the source vector tiles to add terrain visualization"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "x",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "y",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "z",
        "type": "string",
        "description": "",
        "default": "1"
      }
    ],
    "optional_parameters": [
      {
        "name": "ratio",
        "type": "STRING",
        "description": "Set to `2` for retina tiles.",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/tiles/{z}/{x}/{y}/hillshading.png\"\nquerystring = {\"ratio\": ratio}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Hillshading",
    "tool description": "Generates global raster hillshading tiles to visualize terrain elevation. This uses elevation data from a comprehensive GIS database to create detailed topographic maps, enhancing the toolkit's capabilities for map-based applications.",
    "API name": "Hillshading",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns raw binary data representing a single map tile in the Portable Network Graphics (PNG) image format. This tile contains hillshading, which visually represents terrain elevation and relief. These tiles are intended to be used as a visual layer in map-based applications to create a detailed topographic map.",
      "output_format": "The output is a single binary string representing a complete image in the PNG format. It is not a structured text format like JSON or XML. The data starts with the standard PNG file signature (e.g., \ufffdPNG or \\x89PNG) and contains various chunks like IHDR, PLTE, and IDAT."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "The hillshading PNG can be used as a base map type for static map generation"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "contour",
            "description": "The hillshading data complements contour line visualization for terrain representation"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "z",
            "description": "The hillshading tiles can be combined with terrain raster data at matching zoom levels"
          },
          {
            "name": "x",
            "description": "The hillshading tiles can be combined with terrain raster data at matching x coordinates"
          },
          {
            "name": "y",
            "description": "The hillshading tiles can be combined with terrain raster data at matching y coordinates"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Winter",
        "connect params": [
          {
            "name": "z",
            "description": "The hillshading tiles can be overlaid with winter terrain tiles at matching zoom levels"
          },
          {
            "name": "x",
            "description": "The hillshading tiles can be overlaid with winter terrain tiles at matching x coordinates"
          },
          {
            "name": "y",
            "description": "The hillshading tiles can be overlaid with winter terrain tiles at matching y coordinates"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "x",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "y",
        "type": "string",
        "description": "",
        "default": "1"
      },
      {
        "name": "z",
        "type": "string",
        "description": "",
        "default": "1"
      }
    ],
    "optional_parameters": [
      {
        "name": "ratio",
        "type": "STRING",
        "description": "Set to `2` for retina tiles.",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/tiles/{z}/{x}/{y}/light.png\"\nquerystring = {\"ratio\": ratio}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Global Light Tiles",
    "tool description": "Generates global mostly grayscale map tiles. This is part of a comprehensive map toolkit that includes address search (geocoding), routing, static maps, and elevation data, providing essential geographic infrastructure for applications requiring detailed and customizable mapping solutions.",
    "API name": "Global Light Tiles",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single map tile as a PNG image. This tile is a graphical representation of a small geographic area, rendered in a mostly grayscale style. These tiles are intended to be programmatically assembled by an application to display a larger, interactive map for users.",
      "output_format": "The output is the raw binary data of a single PNG image file. It is not encapsulated in any other format like JSON. The provided examples show this binary data represented as a string, which is a common way to handle binary content in text-based environments."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The map tile can be used as a custom marker icon by providing its URL"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "icon",
            "description": "The map tile can be used as a custom icon when provided as a URL"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map tile can be used as an overlay on the route visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map tile can be used as an overlay on the enhanced route"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Places Nearby a Coordinates",
    "parent tool description": "Find places nearby a given coordinates.",
    "required_parameters": [
      {
        "name": "lon",
        "type": "NUMBER",
        "description": "Longitude",
        "default": "-73.987719"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "Latitude",
        "default": "40.749779"
      }
    ],
    "optional_parameters": [
      {
        "name": "categories",
        "type": "STRING",
        "description": "Default: catering.cafe",
        "default": "catering.cafe"
      },
      {
        "name": "radius",
        "type": "NUMBER",
        "description": "**Meters**\nDefault: 200\nMaximum: 50000",
        "default": "500"
      }
    ],
    "code": "import requests\n\nurl = \"https://places-nearby-a-coordinates.p.rapidapi.com/nearby\"\nquerystring = {\"lon\": lon, \"categories\": categories, \"lat\": lat, \"radius\": radius}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"places-nearby-a-coordinates.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Places Nearby a Coordinates: Nearby",
    "tool description": "Returns nearby places sorted by distance from origin coordinates, up to 60 per request. This endpoint is part of a tool designed to find locations near a specified coordinate, leveraging geospatial data to deliver precise, distance-based results for efficient location discovery.",
    "API name": "Nearby",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of nearby places, sorted by their distance from a specified set of coordinates. For each place found, the output provides its name, a unique place ID, detailed address information (including street, city, state, country, and postal code), precise geographic coordinates (latitude and longitude), and the distance in meters from the origin point. This information is intended to be used for location-based services, such as finding points of interest on a map.",
      "output_format": "The output is a JSON object with a 'results' key, which contains a JSON array of place objects. Each place object contains multiple string fields and a nested 'location' object for coordinates. Notably, numerical values like latitude, longitude, and distance are provided as strings rather than numbers. The tool description mentions a limit of 60 results per request, but there is no pagination or cursoring mechanism visible in the output examples."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Reverse Geocoding and Geolocation Service",
    "parent tool description": "Find nearest or largest city information or timezone for any given point location (latitude/longitude). The reverse geocode API back \"reverse\" codes any GPS location point into nearest or largest readable places with county, city, distance and population.",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "NUMBER",
        "description": "",
        "default": "-74.40753570369408"
      },
      {
        "name": "latitude",
        "type": "NUMBER",
        "description": "",
        "default": "40.63380384389354"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocodeapi.p.rapidapi.com/GetTimezone\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocodeapi.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
    "tool description": "Determines the local timezone for a given latitude and longitude, returning the timezone name, ID, and current local time. This is part of a reverse geocode API that converts GPS coordinates into detailed location data, including nearby cities, counties, population, and distance, providing accurate timezone information through a comprehensive geospatial database.",
    "API name": "GetTimezone",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single object containing detailed timezone and geographical information for a given set of coordinates. It provides the formal timezone identifier (e.g., 'Europe/London'), the timezone abbreviation (e.g., 'BST'), the current GMT offset, and the current local time as a string. Additionally, it includes the full country name and its two-letter country code, allowing for precise location-based time calculations and display.",
      "output_format": "The output is a single, flat JSON object. The provided examples are string-serialized objects using single quotes, but they represent a standard key-value structure. No nesting, arrays, or pagination are indicated."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "lng",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use the latitude,longitude from the source tool's coordinates"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "TrueWay Directions",
    "parent tool description": "Find the best route between two or more locations",
    "required_parameters": [
      {
        "name": "stops",
        "type": "STRING",
        "description": "Specify two or more semicolon-delimited locations(Lat/Lng) between which the route is to be found. Max: 25",
        "default": "40.629041,-74.025606;40.630099,-73.993521;40.644895,-74.013818;40.627177,-73.980853"
      }
    ],
    "optional_parameters": [
      {
        "name": "avoid_tolls",
        "type": "BOOLEAN",
        "description": "the route should avoid toll roads",
        "default": ""
      },
      {
        "name": "geometry_format",
        "type": "STRING",
        "description": "geometry format: latlng, lnglat or geojson",
        "default": ""
      },
      {
        "name": "optimize",
        "type": "BOOLEAN",
        "description": "Instructs the API to reorder stops to find the optimized route. The route first stop and last stop order is not changed, their position is considered fixed.",
        "default": ""
      },
      {
        "name": "avoid_ferries",
        "type": "BOOLEAN",
        "description": "the route should avoid ferries",
        "default": ""
      },
      {
        "name": "avoid_highways",
        "type": "BOOLEAN",
        "description": "the route should avoid highways",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://trueway-directions2.p.rapidapi.com/FindDrivingRoute\"\nquerystring = {\"stops\": stops}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trueway-directions2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "TrueWay Directions: FindDrivingRoute",
    "tool description": "Generates driving directions with multiple stops based on origin and destination. This is part of a service that finds the best route between two or more locations, using advanced routing algorithms to optimize travel paths and reduce transit time while accommodating complex itineraries.",
    "API name": "FindDrivingRoute",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides detailed information for a single driving route. It includes summary statistics like the total distance (likely in meters) and duration (likely in seconds). It also provides the raw geographical data needed to visualize the route, including a rectangular bounding box and a precise path defined by a sequence of latitude and longitude coordinate pairs.",
      "output_format": "The output is a JSON object with all data nested under a single root key, 'route'. The value of the 'geometry.coordinates' key is an array of arrays, where each inner array contains a latitude-longitude pair. The examples provided are truncated, suggesting the full list of coordinates can be very long for complex routes. There is no evidence of pagination."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "routeresultid",
            "description": "Can use the route geometry to display the route on a map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "path",
            "description": "Can use the route's geometry.coordinates to draw the path on a static map"
          },
          {
            "name": "geojson",
            "description": "Can use the route's geometry data in GeoJSON format to render on a map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Can use the route's geometry.coordinates to enhance with elevation and surface data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use coordinates from the route to find county boundaries"
          },
          {
            "name": "latitude",
            "description": "Can use coordinates from the route to find county boundaries"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the route to find nearby points of interest"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use coordinates from the route to find nearby places"
          },
          {
            "name": "lat",
            "description": "Can use coordinates from the route to find nearby places"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use coordinates from the route to get timezone information"
          },
          {
            "name": "latitude",
            "description": "Can use coordinates from the route to get timezone information"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use coordinates from the route to get address information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "TrueWay Directions",
    "parent tool description": "Find the best route between two or more locations",
    "required_parameters": [
      {
        "name": "destination",
        "type": "STRING",
        "description": "The location to which you wish to calculate directions. ",
        "default": "40.627177,-73.980853"
      },
      {
        "name": "origin",
        "type": "STRING",
        "description": "The location from which you wish to calculate directions.",
        "default": "40.629041,-74.025606"
      }
    ],
    "optional_parameters": [
      {
        "name": "geometry_format",
        "type": "STRING",
        "description": "geometry format: latlng, lnglat or geojson",
        "default": ""
      },
      {
        "name": "avoid_tolls",
        "type": "BOOLEAN",
        "description": "the route should avoid toll roads",
        "default": ""
      },
      {
        "name": "avoid_highways",
        "type": "BOOLEAN",
        "description": "the route should avoid highways",
        "default": ""
      },
      {
        "name": "waypoints",
        "type": "STRING",
        "description": "Specifies an array of intermediate locations to include along the route between the origin and destination points as pass through locations. Max: 23",
        "default": ""
      },
      {
        "name": "start_time",
        "type": "STRING",
        "description": "Time when travel is expected to start. You can specify the time as an integer in seconds since midnight, January 1, 1970 UTC or you can use \\\\\\\"now\\\\\\\" to specify the current time.",
        "default": ""
      },
      {
        "name": "avoid_ferries",
        "type": "BOOLEAN",
        "description": "the route should avoid ferries",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://trueway-directions2.p.rapidapi.com/FindDrivingPath\"\nquerystring = {\"destination\": destination, \"origin\": origin}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trueway-directions2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "TrueWay Directions: FindDrivingPath",
    "tool description": "Generates the optimal route between an origin and destination, incorporating specified waypoints, as part of a broader service that finds the best routes between two or more locations, ensuring efficient and accurate navigation.",
    "API name": "FindDrivingPath",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool provides detailed driving route information or an error status. A successful response includes a 'route' object containing the total travel distance and duration, the geographical bounding box of the route, and a precise geometric path as a list of coordinate pairs. An unsuccessful request returns an object with an 'error' code and a descriptive 'message'.",
      "output_format": "The output is a single JSON object. The structure is conditional: on success, it's a nested object with a top-level 'route' key. The 'route.geometry.coordinates' field contains an array of two-element arrays (latitude, longitude pairs). On failure, the object has a flat structure with 'error' and 'message' string properties."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a coordinate from the route geometry"
          },
          {
            "name": "latitude",
            "description": "Can use a coordinate from the route geometry"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a coordinate from the route geometry"
          },
          {
            "name": "latitude",
            "description": "Can use a coordinate from the route geometry"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a coordinate from the route geometry"
          },
          {
            "name": "latitude",
            "description": "Can use a coordinate from the route geometry"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use a coordinate from the route geometry"
          },
          {
            "name": "latitude",
            "description": "Can use a coordinate from the route geometry"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the route geometry"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the route geometry"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the route geometry"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the route geometry"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from the route geometry"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the route geometry"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the route geometry"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the route geometry"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use coordinates from the route geometry in format 'lat,lng'"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from the route geometry"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the route geometry"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from the route geometry"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the route geometry"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from the route geometry"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the route geometry"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Elevation",
        "connect params": [
          {
            "name": "points",
            "description": "Can use coordinates from the route geometry formatted as JSON array"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing",
        "connect params": [
          {
            "name": "points",
            "description": "Can use coordinates from the route geometry formatted as pipe-separated lat,lng pairs"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "TrueWay Geocoding",
    "parent tool description": "Forward and Reverse Geocoding",
    "required_parameters": [
      {
        "name": "location",
        "type": "STRING",
        "description": "The location for which you wish to obtain the human-readable address",
        "default": "37.7879493,-122.3961974"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "The language in which to return results",
        "default": "en"
      }
    ],
    "code": "import requests\n\nurl = \"https://trueway-geocoding.p.rapidapi.com/ReverseGeocode\"\nquerystring = {\"language\": language, \"location\": location}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trueway-geocoding.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "TrueWay Geocoding: ReverseGeocode",
    "tool description": "Obtains an address based on a location input, such as coordinates or a place name. This endpoint is part of the Forward and Reverse Geocoding tool, which leverages a comprehensive geocoding service to convert geographical data into precise address information, enabling applications to accurately map locations for navigation, logistics, or user localization.",
    "API name": "ReverseGeocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a list of potential address matches for a given geographic location. Each result provides a full, formatted address string and also breaks it down into individual components like country, region, city, street, house number, and postal code. Additionally, each result includes precise latitude and longitude coordinates, a location accuracy type (e.g., 'exact', 'approximate'), and the type of place (e.g., 'street_address', 'building', 'neighborhood').",
      "output_format": "The output is a JSON object with a single top-level key, \"results\", which contains a JSON array of result objects. Each object in the array represents a single address match. Within each result object, the \"location\" field is a nested object containing numeric \"lat\" and \"lng\" keys. Not all fields are guaranteed to be present in every result; fields like 'postal_code', 'area', 'sublocality', 'neighborhood', 'street', and 'house' appear to be optional and are included only when applicable."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "lng",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "lng",
            "description": "Longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Longitude from the source tool's location data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Address From To Latitude Longitude",
    "parent tool description": "Free API to convert coordinates (latitude, longitude) to and from address \nAn Easy, Open, Worldwide, Free Geocoding API",
    "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
    "tool description": "Converts a street address into latitude and longitude coordinates, requiring city/town, state, and street name for optimal accuracy. This free, open worldwide geocoding API transforms physical addresses into precise GPS coordinates, enabling geographic positioning for various applications without cost or restrictions.",
    "required_parameters": [
      {
        "name": "lng",
        "type": "NUMBER",
        "description": "",
        "default": "2.29451"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "",
        "default": "48.85824"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://address-from-to-latitude-longitude.p.rapidapi.com/geolocationapi\"\nquerystring = {\"lng\": lng, \"lat\": lat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"address-from-to-latitude-longitude.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Coordinates  (latitude longitude) to Address",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides detailed address information corresponding to a given set of latitude and longitude coordinates. The output is a list of potential address matches, where each result includes a full, formatted address string and its individual components like city, region, country, and postal code. It also returns the precise coordinates of the found address and its distance from the original input coordinates, making it useful for reverse geocoding.",
      "output_format": "The output is a JSON object with a single top-level key, \"Results\". The value of this key is a JSON array of result objects. Each object in the array represents a single address match and contains key-value pairs for address details. Some fields, like 'neighborhood' or 'addressnumber', may not be present in every result. There is no evidence of pagination."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's address results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's address results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's address results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's address results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's address results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's address results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's address results"
          }
        ]
      },
      {
        "tool name": "Heightmap from Latitude and Longitude: get heightmap from two geopoints",
        "connect params": [
          {
            "name": "lat0",
            "description": "Can use latitude from the source tool's address results"
          },
          {
            "name": "lng0",
            "description": "Can use longitude from the source tool's address results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "City List",
    "parent tool description": "List of all countries and cities",
    "tool name": "City List: getCountryList",
    "tool description": "Returns a comprehensive list of all countries with their corresponding ISO codes, ISO3 codes, and phone codes. This endpoint provides access to a standardized global database of country information, allowing users to retrieve internationally recognized identification codes and telecommunication prefixes for every nation. Part of a broader geographical reference service that maintains detailed records of countries and cities worldwide for use in applications requiring location data, address validation, or international communications.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://city-list.p.rapidapi.com/api/getCountryList\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"city-list.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "getCountryList",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive list of all countries in the world. For each country, it provides a unique numeric ID, the full country name (cname), its two-letter ISO code (iso), its three-letter ISO3 code (iso3), and its international phone code (phonecode). This data is suitable for populating country selectors, validating geographical information, or use in applications requiring international dialing codes.",
      "output_format": "The output is a JSON object. The primary data is a JSON array of country objects, which is nested under the string key \"0\". Each object in the array represents a single country and its associated codes. The API appears to return the entire list of countries in a single, non-paginated response."
    },
    "connected tools": [
      {
        "tool name": "City List: getCity",
        "connect params": [
          {
            "name": "iso",
            "description": "The ISO code parameter can use the country ISO codes from the source tool output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: Geocode",
        "connect params": [
          {
            "name": "country",
            "description": "The country code parameter can use the ISO codes from the source tool output"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Search",
        "connect params": [
          {
            "name": "countrycodes",
            "description": "The countrycodes parameter can use the ISO codes from the source tool output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/geocoding",
        "connect params": [
          {
            "name": "country",
            "description": "The country parameter can use country names, 2-letter ISO codes, or 3-letter ISO codes from the source tool output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocode - Forward and Reverse",
    "parent tool description": "Forward and reverse geocoding using Google Geocoding API.",
    "tool name": "Geocode - Forward and Reverse: Forward geocode",
    "tool description": "Converts a street address into precise latitude and longitude coordinates. This endpoint uses Google's Geocoding API to transform human-readable addresses into geographic coordinates that can be used for mapping, distance calculations, or location-based services. The service provides reliable forward geocoding capabilities backed by Google's extensive global location database.",
    "required_parameters": [
      {
        "name": "address",
        "type": "STRING",
        "description": "",
        "default": "2795 Hastings St, Vancouver, BC V5K 1Z8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocode-forward-and-reverse.p.rapidapi.com/forward\"\nquerystring = {\"address\": address}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocode-forward-and-reverse.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Forward geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool output provides the precise geographic coordinates (latitude and longitude) corresponding to a given street address. In addition to the coordinates, it returns the full, standardized address as resolved by Google's service and a unique Google Place ID. This information is intended for use in mapping applications, location-based services, and distance calculations.",
      "output_format": "The output is a single JSON object containing string and numeric values. It features a nested object under the 'location' key, which holds the latitude ('lat') and longitude ('lng') as floating-point numbers. There is no indication of arrays, pagination, or cursoring, suggesting the tool returns a single best-fit result for each query."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The coordinates from the geocoding result in format 'longitude,latitude'"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The coordinates from the geocoding result in format 'longitude,latitude'"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The coordinates from the geocoding result in format 'longitude,latitude'"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The coordinates from the geocoding result in format 'longitude,latitude'"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "lon",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "lng",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "lng",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          },
          {
            "name": "lon",
            "description": "The longitude coordinate from the geocoding result"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocode - Forward and Reverse",
    "parent tool description": "Forward and reverse geocoding using Google Geocoding API.",
    "tool name": "Geocode - Forward and Reverse: Reverse geocode",
    "tool description": "Retrieves a complete address from a latitude and longitude coordinate pair. This reverse geocoding functionality leverages the Google Geocoding API to convert geographic coordinates into a human-readable address, allowing for precise location identification from raw coordinate data. The service provides comprehensive address components including street names, cities, postal codes, and countries based on Google's extensive global mapping database.",
    "required_parameters": [
      {
        "name": "lng",
        "type": "NUMBER",
        "description": "",
        "default": "-123.0470199"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "",
        "default": "49.2813458"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocode-forward-and-reverse.p.rapidapi.com/reverse\"\nquerystring = {\"lng\": lng, \"lat\": lat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocode-forward-and-reverse.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Reverse geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides the primary, human-readable street address corresponding to a given latitude and longitude. It also returns the original coordinate pair within a nested 'location' object for verification and a unique 'place_id' from Google's database. This identifier can be used for subsequent API calls or to disambiguate locations.",
      "output_format": "The output is a single JSON object. It contains a nested object under the 'location' key, which itself contains 'lat' and 'lng' number values. Based on the examples, no fields appear to be nullable."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocoding by API-Ninjas",
    "parent tool description": "Convert city locations to latitude/longitude coordinates and vice versa. See more info at https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "tool name": "Geocoding by API-Ninjas: /v1/geocoding",
    "tool description": "Converts city locations to latitude/longitude coordinates and vice versa using the API Ninjas Geocoding API endpoint. This service enables seamless translation between human-readable place names and precise geographic coordinates, allowing for location-based functionality in applications. The API supports both forward geocoding (converting addresses to coordinates) and reverse geocoding (converting coordinates to addresses), providing a comprehensive solution for location data needs. For more detailed information, visit https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "required_parameters": [
      {
        "name": "city",
        "type": "STRING",
        "description": "City name.",
        "default": "Seattle"
      }
    ],
    "optional_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "Country name, 2-letter ISO country code, or 3-letter ISO country code.",
        "default": ""
      },
      {
        "name": "state",
        "type": "STRING",
        "description": "US state (for United States cities only).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://geocoding-by-api-ninjas.p.rapidapi.com/v1/geocoding\"\nquerystring = {\"city\": city}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocoding-by-api-ninjas.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "/v1/geocoding",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographic locations that match a given query. Each location in the list is detailed with its name, specific latitude and longitude coordinates, a two-letter country code, and the corresponding state or region. This information is primarily used to convert place names into coordinates for mapping applications or other location-aware services, providing multiple potential matches for ambiguous queries.",
      "output_format": "The output is a JSON array of objects. Each object represents a single location and contains the following keys: `name` (string), `latitude` (float), `longitude` (float), `country` (string, a 2-letter code), and `state` (string). The examples do not show any nesting or pagination."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "param": "latitude",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "longitude",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "param": "latitude",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "longitude",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "param": "latitude",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "longitude",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "param": "latitude",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "longitude",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "param": "lonlat",
            "reason": "Can use longitude,latitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "param": "lonlat",
            "reason": "Can use longitude,latitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "param": "lonlat",
            "reason": "Can use longitude,latitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "param": "lonlat",
            "reason": "Can use longitude,latitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "param": "lat",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "lon",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "param": "latitude",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "longitude",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "param": "lat",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "lng",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "param": "lat",
            "reason": "Can use latitude from source tool's output"
          },
          {
            "param": "lng",
            "reason": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "param": "location",
            "reason": "Can use latitude,longitude from source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocoding by API-Ninjas",
    "parent tool description": "Convert city locations to latitude/longitude coordinates and vice versa. See more info at https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
    "tool description": "Converts latitude and longitude coordinates into corresponding city location information using the API Ninjas Reverse Geocoding endpoint. This service enables bidirectional geographic data conversion, allowing users to translate between precise geographic coordinates and human-readable location names. The API provides comprehensive geocoding functionality for applications requiring location-based services, mapping features, or address validation. For additional details and documentation, see the official API resources at api-ninjas.com.",
    "required_parameters": [
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "Latitude coordinate.",
        "default": "47.6062"
      },
      {
        "name": "lon",
        "type": "NUMBER",
        "description": "Longitude coordinate.",
        "default": "-122.3321"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocoding-by-api-ninjas.p.rapidapi.com/v1/reversegeocoding\"\nquerystring = {\"lat\": lat, \"lon\": lon}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocoding-by-api-ninjas.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "/v1/reversegeocoding",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides geographic location details corresponding to a given set of latitude and longitude coordinates. The information includes the name of the location (such as a city or county), the state or equivalent administrative division, and the two-letter country code. This is useful for applications that need to translate raw coordinates into human-readable place names for display or logging purposes.",
      "output_format": "The output is a JSON array of objects. Each object represents a location and contains three string keys: 'name', 'country', and 'state'. The examples provided show a single object within the array, but the structure suggests it could support multiple location results."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Get County names by State.",
        "connect params": [
          {
            "name": "state",
            "description": "Can use the state from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Map",
    "parent tool description": "MapFan API \u306e\u5730\u56f3API\u3067\u3059\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u5730\u56f3\u306b\u5fc5\u8981\u306aWMTS\u5f62\u5f0f\u306e\u5730\u56f3\u753b\u50cf\u3084\u3001\u6307\u5b9a\u3055\u308c\u305f\u7def\u5ea6\u7d4c\u5ea6\u30fb\u30b5\u30a4\u30ba\u30fb\u7e2e\u5c3a\u306e\u9759\u6b62\u753b\u5730\u56f3\u753b\u50cf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002",
    "tool name": "MapFanAPI - Map: mapimage",
    "tool description": "Retrieves a map image with specified latitude/longitude, size, and scale parameters. This endpoint uses MapFan API's mapping technology to deliver static map images based on the coordinates (`lonlat`), dimensions (`size`), and zoom level (`scale`) you provide. When the resolution parameter is set to 2, the returned image will be twice the size specified in the size parameter. The MapFan API offers comprehensive mapping capabilities, including WMTS format images for scrollable maps and these customizable static map images for precise location visualization.",
    "required_parameters": [
      {
        "name": "lonlat",
        "type": "STRING",
        "description": "### \u4e2d\u5fc3\u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`\u7d4c\u5ea6,\u7def\u5ea6`\n\n#### \u8a18\u8ff0\u4f8b\n`139.767231,35.681196`\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|\u7d4c\u5ea6 120, \u7def\u5ea620|\n|\u6700\u5927|\u7d4c\u5ea6 155, \u7def\u5ea646|\n\n#### \u6ce8\u8a18\n\u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": "139.767231,35.681196"
      },
      {
        "name": "scale",
        "type": "NUMBER",
        "description": "### \u5730\u56f3\u7e2e\u5c3a\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|6|\n|\u6700\u5927|21|",
        "default": "16"
      },
      {
        "name": "size",
        "type": "STRING",
        "description": "### \u753b\u50cf\u30b5\u30a4\u30ba\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u753b\u50cf\u5e45\uff08\u30d4\u30af\u30bb\u30eb\u5024\uff09],[\u753b\u50cf\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\u5024\uff09]`\n\n#### \u8a18\u8ff0\u4f8b\n`320,240`\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u30b5\u30a4\u30ba|\n|---|---|\n|\u6700\u5c0f\u5024|1px, 1px|\n|\u6700\u5927\u5024|2048px, 2048px|",
        "default": "320,240"
      }
    ],
    "optional_parameters": [
      {
        "name": "icon",
        "type": "STRING",
        "description": "### \u30a2\u30a4\u30b3\u30f3\u8a2d\u5b9a\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9#1]|[\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9#2]|\u2026|[\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9#n]`\n\n#### \u8a18\u8ff0\u5f62\u5f0f\uff08\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9\uff09\n`[\u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\u30b3\u30fc\u30c9],[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024]`\n\n#### \u8a18\u8ff0\u4f8b\n`1,139.7672,35.6811|102,139.7671,35.6799`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9\u306e\u4ef6\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|50|\n\n|\u7d4c\u5ea6\u3001\u7def\u5ea6|\u5024|\n|---|---|\n|\u6700\u5c0f|\u7d4c\u5ea6120, \u7def\u5ea620|\n|\u6700\u5927|\u7d4c\u5ea6155, \u7def\u5ea646|\n\n#### \u6ce8\u8a18\n- scaler\u30fbcentericon\u304con\u306e\u5834\u5408\u3001\u8868\u793a\u3055\u308c\u308b\u30b9\u30b1\u30fc\u30e9\u30fb\u4e2d\u5fc3\u70b9\u30a2\u30a4\u30b3\u30f3\u3082\u305d\u308c\u305e\u308c\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9\u3068\u3057\u3066\u4ef6\u6570\u306b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\n- \u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a\u5024\u306b\u3064\u3044\u3066\u306f\u3001\u4ed8\u5247. \u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\u4e00\u89a7\u3092\u53c2\u7167\u3002",
        "default": ""
      },
      {
        "name": "centericon",
        "type": "ENUM",
        "description": "### \u4e2d\u5fc3\u70b9\u30a2\u30a4\u30b3\u30f3\u8868\u793a\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`",
        "default": ""
      },
      {
        "name": "logo",
        "type": "ENUM",
        "description": "### \u30d6\u30e9\u30f3\u30c9\u30ed\u30b4\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "landmarkicon",
        "type": "ENUM",
        "description": "### \u30e9\u30f3\u30c9\u30de\u30fc\u30af\u30a2\u30a4\u30b3\u30f3\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "### \u51fa\u529b\u3059\u308b\u753b\u50cf\u5f62\u5f0f\n|\u753b\u50cf\u5f62\u5f0f|\u5024|\n|---|---|\n|png|image/png|\n|jpeg|image/jpeg|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`image/png`",
        "default": ""
      },
      {
        "name": "resolution",
        "type": "ENUM",
        "description": "### \u89e3\u50cf\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\n\u89e3\u50cf\u5ea6\u306b2\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6a19\u6e96\u306e2\u500d\u306e\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n|\u89e3\u50cf\u5ea6|\u5024|\n|---|---|\n|\u6a19\u6e96|1|\n|2\u500d|2|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "rotationangle",
        "type": "NUMBER",
        "description": "### \u89d2\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\n\u5730\u56f3\u3092\u6307\u5b9a\u3057\u305f\u89d2\u5ea6\u306b\u50be\u3051\u305f\u753b\u50cf\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeresultid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u7d50\u679cID\n\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30c8\u7d50\u679cID\u306b\u7d10\u4ed8\u304f\u30eb\u30fc\u30c8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u30eb\u30fc\u30c8\u7d50\u679cID\u306f\u30eb\u30fc\u30c8\u691c\u7d22API\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeicon",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u30eb\u30fc\u30c8\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3057\u306a\u3044|0|\n|\u6a19\u6e96\u306e\u30eb\u30fc\u30c8\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "scaler",
        "type": "ENUM",
        "description": "### \u30b9\u30b1\u30fc\u30e9\u8868\u793a\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`",
        "default": ""
      },
      {
        "name": "bldgname",
        "type": "ENUM",
        "description": "### \u30d3\u30eb\u540d\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\n- mapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u30d3\u30eb\u540d\u79f0\u306f\u3001\u30b9\u30b1\u30fc\u30eb\u304c19\u4ee5\u4e0a\u306e\u5834\u5408\u306e\u307f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "contour",
        "type": "ENUM",
        "description": "### \u7b49\u9ad8\u7dda\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`on`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "target",
        "type": "ENUM",
        "description": "### \u5730\u56f3\u306e\u8868\u793a\u5185\u5bb9\n|\u8868\u793a\u5185\u5bb9|\u5024|\n|---|---|\n|\u80cc\u666f\u306e\u307f\u3092\u8868\u793a|1|\n|\u6ce8\u8a18\u306e\u307f\u3092\u8868\u793a|2|\n|\u80cc\u666f + \u6ce8\u8a18\u3092\u8868\u793a|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`3`",
        "default": ""
      },
      {
        "name": "mapstyle",
        "type": "STRING",
        "description": "### \u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u6307\u5b9a\u7528\u30d1\u30e9\u30e1\u30fc\u30bf\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u30c7\u30b6\u30a4\u30f3]_[\u6ce8\u8a18\u30b5\u30a4\u30ba]`\n\n|\u30c7\u30b6\u30a4\u30f3|\u5024|\n|---|---|\n|\u6a19\u6e96|std|\n|\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb|gray|\n|RPG\u98a8\u5730\u56f3|rpg|\n|\u53e4\u5730\u56f3\u98a8\u5730\u56f3|antique|\n|\u9053\u8def\u5f37\u8abf\u5730\u56f3|hlightroad|\n|\u9244\u9053\u5f37\u8abf\u5730\u56f3|hlightrail|\n|\u5370\u5237\u7528\u767d\u9ed2\u30c7\u30b6\u30a4\u30f3|monochrome|\n|\u304a\u3082\u3066\u306a\u3057\u30de\u30c3\u30d7|tourism|\n\n|\u6ce8\u8a18\u30b5\u30a4\u30ba|\u5024|\n|---|---|\n|\u4e2d|pc|\n|\u5927|sp|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`std_pc`\n\n#### \u6ce8\u8a18\n\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-map.p.rapidapi.com/mapimage\"\nquerystring = {\"lonlat\": lonlat, \"scale\": scale, \"size\": size}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-map.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "mapimage",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a static map image as raw binary data in the PNG file format. This image visually represents a geographical map centered on the specified latitude and longitude coordinates. The dimensions and zoom level of the map are determined by the input `size` and `scale` parameters, making it suitable for direct display or saving as an image file.",
      "output_format": "The output is not a structured text format like JSON or XML, but rather the raw binary data of a PNG image. Each output string begins with the standard PNG file signature (`\\x89PNG\\r\\n\\x1a\\n`). Concepts like nesting, pagination, and nullability are not applicable to this binary file format."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map image could be used as a background reference when enhancing route data"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The map image could be used as a custom marker icon on another map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map image could be used as a visual reference for the routing enhancement"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Route",
    "parent tool description": "MapFan API \u306e\u30eb\u30fc\u30c8\u691c\u7d22\uff08\u7d4c\u8def\u63a2\u7d22\uff09API\u3067\u3059\u3002\u30ab\u30fc\u30ca\u30d3\u3067\u5b9f\u7e3e\u306e\u3042\u308b\u672c\u683c\u7684\u306a\u30eb\u30fc\u30c8\u691c\u7d22\u3001\u5927\u578b\u8eca\u898f\u5236\u3084\u6b69\u884c\u8005\u5411\u3051\u306a\u3069\u7279\u6b8a\u306a\u72b6\u6cc1\u3092\u8003\u616e\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u306b\u52a0\u3048\u3001\u6307\u5b9a\u4f4d\u7f6e\u4ed8\u8fd1\u306e\u9053\u8def\u306e\u9053\u8def\u540d\u30fb\u4ea4\u5dee\u70b9\u540d\u30fb\u4fe1\u53f7\u6709\u7121\u7b49\u306e\u9053\u8def\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002",
    "tool name": "MapFanAPI - Route: altcalcroute",
    "tool description": "Provides multiple recommended route search functionality, returning up to three route options for a single set of search conditions, with 'Recommendation 1' being the standard calcroute result and 'Recommendation 2' and 'Recommendation 3' as alternatives (when available). This leverages MapFan API's sophisticated route search technology, which has proven reliability in car navigation systems, offering professional-grade route planning capabilities. The API can handle specialized routing scenarios including large vehicle restrictions and pedestrian-specific routes, while also providing detailed road information such as road names, intersection names, and traffic signal locations near specified positions. Note that response times may vary depending on route distance and search parameters.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "passablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u306e\u307f\u3092\u901a\u884c\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "saveresult",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306e\u4fdd\u5b58\u6709\u7121\n\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306b'routeResultId'\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n\n|\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306e\u4fdd\u5b58|\u5024|\n|---|---|\n|\u4fdd\u5b58\u3057\u306a\u3044|0|\n|\u4fdd\u5b58\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n`routeResultId`\u306e\u6709\u52b9\u671f\u9650\u306f1\u30f6\u6708\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "daytime",
        "type": "ENUM",
        "description": "### \u65e5\u6642\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u65e5\u6642\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u65e5\u6642\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u3001regulations\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`generalroad`\u3001`tollroad`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "generalroad",
        "type": "ENUM",
        "description": "### \u4e00\u822c\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u4e00\u822c\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "uturnavoid",
        "type": "ENUM",
        "description": "### \u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\n|\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f|\u5024|\n|---|---|\n|\u3057\u306a\u3044|0|\n|\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`priority`\u3067\u6307\u5b9a\u3057\u305f\u5024\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u3002\n- `priority=3\u3001100\uff5e103`\u306e\u5834\u5408\n`0`\n- `priority`\u304c\u4e0a\u8a18\u4ee5\u5916\u306e\u5834\u5408\n`1`\n\n#### \u6ce8\u8a18\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturn`\uff08U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tollroad",
        "type": "ENUM",
        "description": "### \u9ad8\u901f\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u9ad8\u901f\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u9ad8\u901f\u9053\u898f\u5236\u306e\u5bfe\u8c61\u3068\u306a\u308b\u9053\u306f\u3001\u9053\u8def\u7a2e\u5225100\u756a\u53f0\u306811\u756a\u306e\u9053\u3067\u3059\u3002\u9053\u8def\u7a2e\u5225\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u9053\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "regulations",
        "type": "ENUM",
        "description": "### \u305d\u306e\u4ed6\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|0|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`generalroad`\u3001`tollroad`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "impassablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u4e0d\u53ef\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u5916\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u3092\u56de\u907f\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u8b58\u5225\u5b50\n\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u8b58\u5225\u3059\u308b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u5217\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u305d\u306e\u307e\u307e\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306b\u5f71\u97ff\u306f\u3057\u307e\u305b\u3093\u3002\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u534a\u89d2\u306e\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u306f\u7981\u6b62\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u534a\u89d2\u8a18\u53f7\u3084\u5168\u89d2\u6587\u5b57\u306fURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u884c\u3063\u3066\u3044\u308c\u3070\u4f7f\u7528\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "uturn",
        "type": "ENUM",
        "description": "### U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\n|U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055|\u5024|\n|---|---|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u3046|0|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u308f\u306a\u3044|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturnavoid `\uff08\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "danger",
        "type": "ENUM",
        "description": "### \u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u306a\u3044|0|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "width",
        "type": "NUMBER",
        "description": "### \u8eca\u5e45\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u5e45\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "weight",
        "type": "NUMBER",
        "description": "### \u8eca\u91cd\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u91cd\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "highwayspeed",
        "type": "NUMBER",
        "description": "### \u9ad8\u901f\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u9ad8\u901f\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`90.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "height",
        "type": "NUMBER",
        "description": "### \u8eca\u9ad8\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u9ad8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "loadage",
        "type": "NUMBER",
        "description": "### \u7a4d\u8f09\u91cf\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u4e21\u306e\u6700\u5927\u7a4d\u8f09\u91cf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "normalspeed",
        "type": "NUMBER",
        "description": "### \u4e00\u822c\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u4e00\u822c\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`25.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tollwayspeed",
        "type": "NUMBER",
        "description": "### \u6709\u6599\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u6709\u6599\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`55.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "ferryspeed",
        "type": "NUMBER",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u901f\u5ea6\n\u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`27.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "vehicletype",
        "type": "ENUM",
        "description": "### \u8eca\u7a2e\n\u9053\u8def\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u8eca\u7a2e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u6307\u5b9a\u306a\u3057|0|\n|\u5927\u578b\u4e57\u7528\u81ea\u52d5\u8eca|1|\n|\u5927\u578b\u8ca8\u7269\u81ea\u52d5\u8eca|6|\n|\u5927\u578b\u7279\u6b8a\u81ea\u52d5\u8eca|11|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "tolltarget",
        "type": "ENUM",
        "description": "### \u6599\u91d1\u8a08\u7b97\u5bfe\u8c61\n|\u6599\u91d1\u8a08\u7b97\u5bfe\u8c61|\u5024|\n|---|---|\n|\u901a\u5e38\u6599\u91d1|0|\n|\u901a\u5e38\u6599\u91d1\uff0bETC\u5272\u5f15\u6599\u91d1|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "smartic",
        "type": "ENUM",
        "description": "## \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u975e\u63a8\u5968\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002 `etc` \u3092\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\n\n### \u30b9\u30de\u30fc\u30c8IC\u5229\u7528\u6709\u7121\n|\u30b9\u30de\u30fc\u30c8IC\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "cartype",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u5229\u7528\u6642\u306e\u8eca\u7a2e\n\u6709\u6599\u9053\u8def\u306e\u6599\u91d1\u8a08\u7b97\u306e\u307f\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u8efd\u81ea\u52d5\u8eca|0|\n|\u666e\u901a\u8eca|1|\n|\u4e2d\u578b\u8eca|2|\n|\u5927\u578b\u8eca|3|\n|\u7279\u5927\u8eca|4|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "date",
        "type": "STRING",
        "description": "### \u51fa\u767a\u65e5\u6642\n\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306e\u4ea4\u901a\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u3068\u304d\u306e\u65e5\u6642\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u5e744\u6841][\u67082\u6841][\u65e52\u6841]_[\u66422\u6841][\u52062\u6841][\u79d22\u6841]` \uff08`yyyyMMdd_HHmmss`\uff09\n\n#### \u8a18\u8ff0\u4f8b\n`20220420_170505` \uff082022\u5e744\u670820\u65e5\u5348\u5f8c5\u66425\u52065\u79d2 \uff09\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\nAPI\u5b9f\u884c\u65e5\u6642\u3092\u9069\u7528\u3057\u3066\u3001\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "tollway",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u4f7f\u7528\u6761\u4ef6\n|\u6709\u6599\u9053\u8def\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6709\u6599\u9053\u8def\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `tollway=2` \u3068\u3057\u305f\u5834\u5408\u3001\u6709\u6599\u9053\u8def\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `tollway=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00108`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "etc",
        "type": "ENUM",
        "description": "### ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528\u6709\u7121\n|ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b9\u30de\u30fc\u30c8IC\u306b\u3082\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u672a\u6307\u5b9a\u3001\u304b\u3064\u3001 `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u9650\u308a\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f `smartic` \u3068\u540c\u3058\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "ferry",
        "type": "ENUM",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u4f7f\u7528\u6761\u4ef6\n|\u30d5\u30a7\u30ea\u30fc\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `ferry=2` \u3068\u3057\u305f\u5834\u5408\u3001\u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `ferry=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00107`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "destination",
        "type": "STRING",
        "description": "### \u76ee\u7684\u5730\u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.62261961,35.46606942`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.62261961,35.46606942,,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.62261961,35.46606942"
      },
      {
        "name": "via",
        "type": "STRING",
        "description": "### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n##### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n`[\u7d4c\u7531\u5730#1]|[\u7d4c\u7531\u5730#2|...|[\u7d4c\u7531\u5730#n]`\n\n##### \u7d4c\u7531\u5730\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6ede\u5728\u6642\u9593],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6ede\u5728\u6642\u9593]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u7bc4\u56f2\n|n\uff08\u7d4c\u7531\u5730\u306e\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|30|\n\n|\u6ede\u5728\u6642\u9593\uff08\u5206\uff09|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n|\u6700\u5927|10080|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6ede\u5728\u6642\u9593\uff08\u5206\uff09\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7d4c\u7531\u5730\u30923\u5730\u70b9\u6307\u5b9a\n`139.75723347,35.66593095|139.73893125,35.62911118|139.69695771,35.53136405`\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.75723347,35.66593095`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1`\n\n##### \u6ede\u5728\u6642\u9593\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,60`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,,1`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "startangle",
        "type": "NUMBER",
        "description": "### \u51fa\u767a\u65b9\u5411\n\u51fa\u767a\u5730\u306e\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u304c\u53cc\u65b9\u5411\u306b\u9032\u884c\u53ef\u80fd\u306a\u5834\u5408\u306b\u3001\u9032\u884c\u65b9\u5411\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306b\u5bfe\u3057\u3001\u6307\u5b9a\u89d2\u5ea6\u306b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u65b9\u5411\u306b\u9032\u884c\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306e\u3044\u305a\u308c\u304b\u304c\u3001\u30eb\u30fc\u30c8\u306e\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u63a1\u7528\u3055\u308c\u307e\u3059\u3002\u771f\u5317\u30920\u5ea6\u3068\u3057\u3001\u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "priority",
        "type": "ENUM",
        "description": "### \u57fa\u672c\u6761\u4ef6\n|\u57fa\u672c\u6761\u4ef6|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u8ddd\u96e2\u512a\u5148|1|\n|\u76f4\u9032\u512a\u5148|2|\n|\u7c21\u6613\u6b69\u884c\u8005|3|\n|\u9053\u5e45\u512a\u5148|4|\n\n#### \u6ce8\u8a18\n- `altcalcroute`\u3067\u306f\u3001`priority=100\uff5e103`\u306f\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002\n- \u5404\u6761\u4ef6\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3 \uff1e \u30eb\u30fc\u30c8\u57fa\u672c\u6761\u4ef6 (priority)\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "start",
        "type": "STRING",
        "description": "### \u51fa\u767a\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.76730676,35.68095910`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.76730676,35.68095910,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.76730676,35.68095910"
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-route.p.rapidapi.com/altcalcroute\"\nquerystring = {\"destination\": destination, \"start\": start}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-route.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "altcalcroute",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool provides up to three recommended driving routes between specified start and end points. For each route, it returns a summary including the total distance, estimated travel time, and any applicable toll costs. It also provides a detailed list of turn-by-turn navigation instructions, which includes coordinates, road names, and intersection names for each maneuver of the journey.",
      "output_format": "The tool returns a single JSON object. The primary data is nested under the 'result' key, which contains an array of route objects. According to the description, this array can hold up to three elements, each representing a unique route recommendation. Each route object contains a 'summary' object for overall trip statistics and a 'guide' array which lists the detailed turn-by-turn steps."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "routeresultid",
            "description": "Can use route result IDs from the altcalcroute output to display routes on a map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "path",
            "description": "Can use coordinates from route guidance to draw the route path on a static map"
          },
          {
            "name": "center",
            "description": "Can use coordinates from route points to center the map"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Can use start coordinates from altcalcroute as origin point"
          },
          {
            "name": "destination",
            "description": "Can use destination coordinates from altcalcroute as destination point"
          },
          {
            "name": "waypoints",
            "description": "Can use via points from altcalcroute as waypoints"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use coordinates from route points to query county boundaries"
          },
          {
            "name": "latitude",
            "description": "Can use coordinates from route points to query county boundaries"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from route points to search for nearby spots"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from route points to search for nearby stations"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from route points to get nearby road information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
    "tool description": "Returns vector tiles that follow the OpenMapTiles schema, providing standardized geographic data in vector format. This endpoint is part of Mapilion's comprehensive mapping service that delivers both vector and raster map tiles at scale, built on OpenStreetMap data and the OpenMapTiles specification. The vector tiles enable efficient rendering of map features with reduced bandwidth requirements compared to traditional raster tiles, making them ideal for interactive web and mobile mapping applications.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/vector/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Vector Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single binary vector tile containing geographic data for a specific map area and zoom level. This data is structured into layers, such as 'water', 'boundary', and 'landcover', representing various physical and administrative map features. The binary tile is not human-readable and is intended to be parsed and rendered by a mapping library to create interactive maps in web or mobile applications.",
      "output_format": "The output is a raw binary string representing a single Mapbox Vector Tile (MVT). This tile is encoded using the Protocol Buffers (Protobuf) format, as specified by the OpenMapTiles schema. The content must be processed by a specialized client-side mapping library to be visualized."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "The vector tile data can be converted to GeoJSON for rendering on static maps"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Vector tile data containing road networks can be extracted and used for routing"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Vector tile data containing geographic features can be used to enhance routes"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Style Json",
        "connect params": [
          {
            "name": "style",
            "description": "The vector tile can be styled using a style JSON definition"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
    "tool description": "Returns vector tiles following the OpenMapTiles schema, allowing access to standardized map data in vector format. This endpoint is part of Mapilion's comprehensive mapping service that delivers both vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles technologies. The vector tiles provide efficient, detailed geographic data that can be styled and rendered dynamically for interactive mapping applications.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/vector/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Vector Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single map tile in a binary format. This tile contains geographic data features, such as boundaries, water bodies, and labels, organized into distinct layers (e.g., 'boundary', 'water', 'aerodrome_label'). The data follows the OpenMapTiles schema and is intended to be consumed by a mapping client to dynamically render a segment of an interactive map.",
      "output_format": "The output is a raw binary data stream, not a structured text format like JSON or XML. It represents a single vector tile encoded using the Mapbox Vector Tile (MVT) specification, which is based on Protocol Buffers. The data is not human-readable and requires a specialized parser to interpret its contents."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "Can use vector tile data converted to GeoJSON for rendering geographic features on static maps"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Planet Vector Tiles",
        "connect params": [
          {
            "name": "x",
            "description": "Can use vector tile coordinates to request complementary vector tile data"
          },
          {
            "name": "y",
            "description": "Can use vector tile coordinates to request complementary vector tile data"
          },
          {
            "name": "z",
            "description": "Can use vector tile coordinates to request complementary vector tile data"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "x",
            "description": "Can overlay hillshading on the same tile coordinates as the vector tile"
          },
          {
            "name": "y",
            "description": "Can overlay hillshading on the same tile coordinates as the vector tile"
          },
          {
            "name": "z",
            "description": "Can overlay hillshading on the same tile coordinates as the vector tile"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
    "tool description": "Returns special hillshading raster tiles as PNG images that create the visual effect of mountains when used as map overlays, with support for either v1 or v2 versions. This endpoint is part of Mapilion's comprehensive mapping service that delivers vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles data, allowing you to enhance your maps with realistic topographical features.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "756"
      },
      {
        "name": "version",
        "type": "string",
        "description": "",
        "default": "v2"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "11"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "805"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/hillshades/{version}/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Hillshading Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a binary PNG image file that represents a map tile with hillshading effects. This image is intended to be used as an overlay on a digital map to create a visual representation of topography and terrain, such as mountains and valleys. In the event of an error, the tool returns a plain text string describing the issue.",
      "output_format": "The primary successful output is raw binary data for a PNG image, not a structured format like JSON. Error responses are returned as simple, plain text strings. The output is a single entity, so concepts like pagination or nesting do not apply."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "contour",
            "description": "The hillshading tile can be used as a complementary layer to contour lines"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "The hillshading PNG can be used as a base layer for the static map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "ratio",
            "description": "The hillshading tile can be combined with terrain raster data"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Winter",
        "connect params": [
          {
            "name": "ratio",
            "description": "The hillshading tile can be overlaid with winter terrain visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "ratio",
            "description": "The hillshading tile can be used as input for additional hillshading processing"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
    "tool description": "Returns special hillshading raster tiles as PNG images that create the visual effect of mountains when used as an overlay. Available in either v1 or v2 versions, this endpoint is part of Mapilion's comprehensive mapping service that delivers vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles data sources.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "756"
      },
      {
        "name": "version",
        "type": "string",
        "description": "",
        "default": "v2"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "11"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "805"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/hillshades/{version}/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Hillshading Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a raster map tile as a PNG image file. This image contains hillshading data, which is used to create a visual representation of terrain and mountains on a map. This output is intended to be used as an overlay on another map layer to provide a 3D effect. In case of an error, such as a non-existent tile, the tool returns a plain text error message.",
      "output_format": "The primary, successful output is raw binary data for a PNG image, not a structured format like JSON. The examples show that error responses are returned as plain text strings."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "marker",
            "description": "The hillshading tile can be used as a custom marker icon"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "format",
            "description": "The hillshading PNG can be used as an overlay on the map image"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "kml",
            "description": "The hillshading tile can be used as a ground overlay in KML"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "tool name": "MapToolkit: Routing",
    "tool description": "Provides global routing capabilities for calculating optimal paths between locations. This is part of a comprehensive mapping toolkit that includes map tiles, address search (geocoding), static maps, and elevation data, enabling developers to build complete location-based applications with navigation functionality.",
    "required_parameters": [
      {
        "name": "points",
        "type": "STRING",
        "description": "Value: `{lat},{lng}[|{lat},{lng} ...]`\nDefine multiple routing waypoints, consisting of latitude and longitude. At least 2 points are needed.",
        "default": "48.202596,16.369801|48.208373,16.370401"
      }
    ],
    "optional_parameters": [
      {
        "name": "finish_instruction",
        "type": "STRING",
        "description": "Adds a finish instruction at the end of the route.",
        "default": ""
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "Language for the given instructions. Must be a valid ISO 639-1 language code. Default value is `en`.",
        "default": ""
      },
      {
        "name": "voice_instructions",
        "type": "STRING",
        "description": "Enables voice instructions for text to speech engines.",
        "default": ""
      },
      {
        "name": "filename",
        "type": "STRING",
        "description": "Only available if the set `format` is `gpx` or `kml`. ",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Default format is `json`.",
        "default": ""
      },
      {
        "name": "weighting",
        "type": "STRING",
        "description": "Only available if the set `routeType` is `bike`. Default value is `networks`.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/route\"\nquerystring = {\"points\": points, \"routeType\": routetype}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Routing",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object containing detailed routing information for a calculated path. The response includes high-level summary data such as the total distance, travel time, and elevation changes. It also provides a granular, turn-by-turn list of instructions for navigation, and an encoded polyline string representing the path's geometry for rendering on a map.",
      "output_format": "The output is a single JSON object. The core information is within a top-level `paths` key, which is an array containing one or more route objects. Each route object has a complex, nested structure, including an `instructions` array that details each segment of the journey. Some data, like the path geometry in the `points` field, is provided as an encoded string. Fields can be empty, such as an empty string for a road name."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "routeresultid",
            "description": "Can use the route result ID from the source tool to display the calculated route on a map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "path",
            "description": "Can use the encoded polyline or coordinates from the route path to display the route on a static map"
          },
          {
            "name": "geojson",
            "description": "Can use the path geometry from the route to render it on a static map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Can use the path geometry from the route to enhance it with additional data like elevation and surface information"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "Can use the coordinates from the route's path points to create a new route with the same stops"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Can use the first coordinate from the route path as the starting point"
          },
          {
            "name": "destination",
            "description": "Can use the last coordinate from the route path as the destination point"
          },
          {
            "name": "waypoints",
            "description": "Can use intermediate coordinates from the route path as waypoints"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: altcalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use the first coordinate from the route path as the starting point"
          },
          {
            "name": "destination",
            "description": "Can use the last coordinate from the route path as the destination point"
          },
          {
            "name": "via",
            "description": "Can use intermediate coordinates from the route path as via points"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: calcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use the first coordinate from the route path as the starting point"
          },
          {
            "name": "destination",
            "description": "Can use the last coordinate from the route path as the destination point"
          },
          {
            "name": "via",
            "description": "Can use intermediate coordinates from the route path as via points"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: multicalcroute",
        "connect params": [
          {
            "name": "start",
            "description": "Can use the first coordinate from the route path as the starting point"
          },
          {
            "name": "destination",
            "description": "Can use the last coordinate from the route path as the destination point"
          },
          {
            "name": "via",
            "description": "Can use intermediate coordinates from the route path as via points"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "tool name": "MapToolkit: Search",
    "tool description": "Performs global geocoding to convert addresses into geographic coordinates or vice versa. This is part of a comprehensive mapping toolkit that provides essential geographic services including map tiles, address search capabilities, routing directions, static map generation, and elevation data - giving you the core functionality needed for location-based applications and spatial analysis.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "",
        "default": "Kirchengasse Wien"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "Language for the given instructions. Must be a valid ISO 639-1 language code. Default value is `de`.",
        "default": ""
      },
      {
        "name": "viewbox",
        "type": "STRING",
        "description": "Defines a preferred area to search in. Format is `{minLng},{minLat},{maxLng},{maxLat}`.",
        "default": ""
      },
      {
        "name": "polygon",
        "type": "STRING",
        "description": "Defines whether available polygons are added to the response data or not. Default value is `0`.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of returned results. Default value is `10`.",
        "default": ""
      },
      {
        "name": "countrycodes",
        "type": "STRING",
        "description": "Limits result to one or multiple countries. Passing multiple countries, they need to be separated by a comma `,`. Must be a valid  ISO 3166-1 alpha-2 country code.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/geocode/search\"\nquerystring = {\"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a list of geographic locations that match a search query. Each location includes a full display name, precise latitude and longitude coordinates, and a detailed, structured address. Additionally, it provides metadata such as a unique place ID, OpenStreetMap (OSM) data, a bounding box for the location's extent, and an importance score, making it suitable for geocoding and location-based applications.",
      "output_format": "The output is a JSON array of objects, with each object representing a potential location match for the query. Within each location object, there is a nested `address` object that contains structured address components (e.g., road, city, country). The `boundingbox` field is an array of string-formatted coordinates. The examples provided appear to be truncated."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output location data"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output location data"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output location data"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output location data"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Elevation",
        "connect params": [
          {
            "name": "points",
            "description": "Can use latitude,longitude pairs from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Can use latitude,longitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's output location data"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output location data"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output location data"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output location data"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output location data"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's output location data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Places Nearby a Coordinates",
    "parent tool description": "Find places nearby a given coordinates.",
    "tool name": "Places Nearby a Coordinates: Categories",
    "tool description": "Retrieves categories of establishments available in the system. This endpoint is part of a location-based service that helps users find places of interest near specific geographic coordinates, allowing for targeted searches of businesses, landmarks, and other points of interest based on their classification.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://places-nearby-a-coordinates.p.rapidapi.com/categories\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"places-nearby-a-coordinates.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Categories",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool output provides a comprehensive list of all available categories and sub-categories for establishments within the system. The categories are represented as dot-separated strings, indicating a hierarchical structure (e.g., 'commercial.clothing.shoes'). This list is intended to inform users or developers of the valid category filters that can be used when searching for places.",
      "output_format": "The output is a JSON string that, when parsed, becomes a single, flat array of strings. Each string is a unique category identifier. The hierarchy is implicit in the dot-notation of the strings, not represented by nested JSON objects."
    },
    "connected tools": [
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "categories",
            "description": "Can use the category strings from the source tool output as filtering criteria for nearby place searches"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "TrueWay Geocoding",
    "parent tool description": "Forward and Reverse Geocoding",
    "tool name": "TrueWay Geocoding: Geocode",
    "tool description": "Obtains precise geocoordinates (latitude and longitude) for a given address. This forward geocoding functionality is part of a comprehensive geocoding service that converts between physical addresses and geographic coordinates in both directions. The tool transforms human-readable location information into machine-readable geographic coordinates that can be used for mapping, distance calculations, location-based services, and spatial analysis.",
    "required_parameters": [
      {
        "name": "address",
        "type": "STRING",
        "description": "The address that you want to geocode",
        "default": "505 Howard St, San Francisco"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "The language in which to return results",
        "default": "en"
      },
      {
        "name": "country",
        "type": "STRING",
        "description": "The country code",
        "default": ""
      },
      {
        "name": "bounds",
        "type": "STRING",
        "description": "The bounding box",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://trueway-geocoding.p.rapidapi.com/Geocode\"\nquerystring = {\"address\": address, \"language\": language}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trueway-geocoding.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of geocoding results for a given address query. Each result contains a full, formatted address, its individual components (such as street, city, postal code, and country), and the precise latitude and longitude coordinates. Additionally, it includes metadata about the location type (e.g., 'street_address', 'poi') and the accuracy of the coordinates, which is useful for mapping, location-based services, and spatial analysis.",
      "output_format": "The output is a JSON object containing a single key, 'results', which holds an array of result objects. This structure implies that a query can return multiple potential matches. Each result object is a flat structure, with the exception of the 'location' key, which is a nested object containing 'lat' and 'lng' values. Some fields, such as 'house' and 'area', appear to be optional and may be omitted if not applicable."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Address From To Latitude Longitude",
    "parent tool description": "Free API to convert coordinates (latitude, longitude) to and from address \nAn Easy, Open, Worldwide, Free Geocoding API",
    "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
    "tool description": "Converts a street address into latitude and longitude coordinates, requiring city/town, state, and street name for optimal accuracy. This free, open worldwide geocoding API transforms physical addresses into precise GPS coordinates, enabling geographic positioning for various applications without cost or restrictions.",
    "required_parameters": [
      {
        "name": "lng",
        "type": "NUMBER",
        "description": "",
        "default": "2.29451"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "",
        "default": "48.85824"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://address-from-to-latitude-longitude.p.rapidapi.com/geolocationapi\"\nquerystring = {\"lng\": lng, \"lat\": lat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"address-from-to-latitude-longitude.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Coordinates  (latitude longitude) to Address",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographic locations matching an input address. For each match, it provides a full, formatted address string, its constituent parts (like city, region, country, and postal code), and the precise latitude and longitude coordinates. The output also includes a 'Distance' value, which likely measures the proximity or relevance of the found address to the original query.",
      "output_format": "The output is a string-encoded JSON object. This object has a single key, \"Results\", which contains an array of result objects. Each object in the array represents a single location match. Fields within these objects can be optional and may not appear in every result (e.g., 'subregion', 'neighborhood', 'addressnumber')."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lng",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "City List",
    "parent tool description": "List of all countries and cities",
    "tool name": "City List: getCountryList",
    "tool description": "Returns a comprehensive list of all countries with their corresponding ISO codes, ISO3 codes, and phone codes. This endpoint provides access to a standardized global database of country information, allowing users to retrieve internationally recognized identification codes and telecommunication prefixes for every nation. Part of a broader geographical reference service that maintains detailed records of countries and cities worldwide for use in applications requiring location data, address validation, or international communications.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://city-list.p.rapidapi.com/api/getCountryList\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"city-list.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "getCountryList",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive list of all countries. For each country, it provides a unique numeric ID, the official name (cname), the 2-character ISO code, the 3-character ISO3 code, and the international phone code. This data is useful for populating user interface elements like dropdowns, validating location data, or standardizing country information within an application.",
      "output_format": "The tool returns a JSON object. This object contains a key named \"0\", which holds a JSON array of country objects. Each object in the array represents a single country and has a consistent structure. Some fields, such as 'iso3', can be empty strings for certain entries like Antarctica."
    },
    "connected tools": [
      {
        "tool name": "City List: getCity",
        "connect params": [
          {
            "name": "iso",
            "description": "The ISO code from the source tool's country list can be used to retrieve cities for a specific country"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: Geocode",
        "connect params": [
          {
            "name": "country",
            "description": "The ISO code from the source tool can be used to specify the country for geocoding"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Search",
        "connect params": [
          {
            "name": "countrycodes",
            "description": "The ISO code from the source tool can be used to limit search results to specific countries"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/geocoding",
        "connect params": [
          {
            "name": "country",
            "description": "The ISO code or country name from the source tool can be used to specify the country for geocoding"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocode - Forward and Reverse",
    "parent tool description": "Forward and reverse geocoding using Google Geocoding API.",
    "tool name": "Geocode - Forward and Reverse: Forward geocode",
    "tool description": "Converts a street address into precise latitude and longitude coordinates. This endpoint uses Google's Geocoding API to transform human-readable addresses into geographic coordinates that can be used for mapping, distance calculations, or location-based services. The service provides reliable forward geocoding capabilities backed by Google's extensive global location database.",
    "required_parameters": [
      {
        "name": "address",
        "type": "STRING",
        "description": "",
        "default": "2795 Hastings St, Vancouver, BC V5K 1Z8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocode-forward-and-reverse.p.rapidapi.com/forward\"\nquerystring = {\"address\": address}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocode-forward-and-reverse.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Forward geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a set of geographic data corresponding to an input street address. It provides a full, formatted address string, a unique Google Place ID for the location, and a nested object containing the precise latitude and longitude coordinates. This information is intended for use in mapping, distance calculations, or other location-aware applications.",
      "output_format": "The output is a single JSON object. It contains a nested object for the 'location' key, which in turn holds the 'lat' and 'lng' floating-point number values. Based on the examples, all top-level keys ('address', 'location', 'place_id') are consistently present and appear to be non-null."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "latitude",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "latitude",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "latitude",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "latitude",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the source tool's location.lng,location.lat values formatted as a string"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the source tool's location.lng,location.lat values formatted as a string"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the source tool's location.lng,location.lat values formatted as a string"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the source tool's location.lng,location.lat values formatted as a string"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "lat",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "latitude",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "lat",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "lat",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude parameter can use the source tool's location.lng value"
          },
          {
            "name": "lat",
            "description": "Latitude parameter can use the source tool's location.lat value"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Location parameter can use the source tool's location.lat,location.lng values formatted as a string"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocode - Forward and Reverse",
    "parent tool description": "Forward and reverse geocoding using Google Geocoding API.",
    "tool name": "Geocode - Forward and Reverse: Reverse geocode",
    "tool description": "Retrieves a complete address from a latitude and longitude coordinate pair. This reverse geocoding functionality leverages the Google Geocoding API to convert geographic coordinates into a human-readable address, allowing for precise location identification from raw coordinate data. The service provides comprehensive address components including street names, cities, postal codes, and countries based on Google's extensive global mapping database.",
    "required_parameters": [
      {
        "name": "lng",
        "type": "NUMBER",
        "description": "",
        "default": "-123.0470199"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "",
        "default": "49.2813458"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocode-forward-and-reverse.p.rapidapi.com/reverse\"\nquerystring = {\"lng\": lng, \"lat\": lat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocode-forward-and-reverse.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Reverse geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides a structured object containing the geocoded information for a specific location. This includes a full, human-readable street address, the original latitude and longitude coordinates in a nested 'location' object, and a unique Google 'place_id'. This allows for the precise identification of an address from coordinates and provides a stable identifier for further use in other Google Maps services.",
      "output_format": "The output is a string that represents a single JSON object. This object contains a nested 'location' object which holds the floating-point 'lat' and 'lng' values. Based on the examples, all fields appear to be non-nullable and there is no indication of pagination or arrays."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocoding by API-Ninjas",
    "parent tool description": "Convert city locations to latitude/longitude coordinates and vice versa. See more info at https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "tool name": "Geocoding by API-Ninjas: /v1/geocoding",
    "tool description": "Converts city locations to latitude/longitude coordinates and vice versa using the API Ninjas Geocoding API endpoint. This service enables seamless translation between human-readable place names and precise geographic coordinates, allowing for location-based functionality in applications. The API supports both forward geocoding (converting addresses to coordinates) and reverse geocoding (converting coordinates to addresses), providing a comprehensive solution for location data needs. For more detailed information, visit https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "required_parameters": [
      {
        "name": "city",
        "type": "STRING",
        "description": "City name.",
        "default": "Seattle"
      }
    ],
    "optional_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "Country name, 2-letter ISO country code, or 3-letter ISO country code.",
        "default": ""
      },
      {
        "name": "state",
        "type": "STRING",
        "description": "US state (for United States cities only).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://geocoding-by-api-ninjas.p.rapidapi.com/v1/geocoding\"\nquerystring = {\"city\": city}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocoding-by-api-ninjas.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "/v1/geocoding",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographic locations that match an input query. Each location in the list is an object containing the place name, its precise latitude and longitude coordinates, and its two-letter country code. When applicable, the state or region is also included. This information is primarily used to convert human-readable place names into machine-readable coordinates for mapping or other location-based functionalities.",
      "output_format": "The output is a JSON-formatted string which represents a list (array) of location objects. Each object corresponds to a potential location match. The 'state' field within an object is optional and may not be present for all locations (e.g., locations in Japan from the examples). The list can contain multiple results for a single query, representing different possible matches."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          },
          {
            "name": "lon",
            "description": "Longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Latitude and longitude from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocoding by API-Ninjas",
    "parent tool description": "Convert city locations to latitude/longitude coordinates and vice versa. See more info at https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
    "tool description": "Converts latitude and longitude coordinates into corresponding city location information using the API Ninjas Reverse Geocoding endpoint. This service enables bidirectional geographic data conversion, allowing users to translate between precise geographic coordinates and human-readable location names. The API provides comprehensive geocoding functionality for applications requiring location-based services, mapping features, or address validation. For additional details and documentation, see the official API resources at api-ninjas.com.",
    "required_parameters": [
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "Latitude coordinate.",
        "default": "47.6062"
      },
      {
        "name": "lon",
        "type": "NUMBER",
        "description": "Longitude coordinate.",
        "default": "-122.3321"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocoding-by-api-ninjas.p.rapidapi.com/v1/reversegeocoding\"\nquerystring = {\"lat\": lat, \"lon\": lon}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocoding-by-api-ninjas.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "/v1/reversegeocoding",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a list of potential geographic locations corresponding to a given set of coordinates. Each location is an object containing its name (which could be a city or county), its state or equivalent administrative division, and its two-letter country code. This information is used to translate raw geographic coordinates into human-readable place names.",
      "output_format": "The output is a JSON array of objects. Each object represents a location and contains the keys 'name', 'country', and 'state', all with string values. The use of an array indicates that multiple location results can be returned for a single coordinate query."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Get County names by State.",
        "connect params": [
          {
            "name": "state",
            "description": "Can use the state value from the source tool's output"
          }
        ]
      },
      {
        "tool name": "City List: getCity",
        "connect params": [
          {
            "name": "iso",
            "description": "Can use the country code from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: addr",
        "connect params": [
          {
            "name": "addr",
            "description": "Can use the location name, state and country information from the source tool's output to form an address"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spot",
        "connect params": [
          {
            "name": "name",
            "description": "Can use the location name from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/geocoding",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the location name from the source tool's output"
          },
          {
            "name": "state",
            "description": "Can use the state value from the source tool's output"
          },
          {
            "name": "country",
            "description": "Can use the country code from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Map",
    "parent tool description": "MapFan API \u306e\u5730\u56f3API\u3067\u3059\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u5730\u56f3\u306b\u5fc5\u8981\u306aWMTS\u5f62\u5f0f\u306e\u5730\u56f3\u753b\u50cf\u3084\u3001\u6307\u5b9a\u3055\u308c\u305f\u7def\u5ea6\u7d4c\u5ea6\u30fb\u30b5\u30a4\u30ba\u30fb\u7e2e\u5c3a\u306e\u9759\u6b62\u753b\u5730\u56f3\u753b\u50cf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002",
    "tool name": "MapFanAPI - Map: mapimage",
    "tool description": "Retrieves a map image with specified latitude/longitude, size, and scale parameters. This endpoint uses MapFan API's mapping technology to deliver static map images based on the coordinates (`lonlat`), dimensions (`size`), and zoom level (`scale`) you provide. When the resolution parameter is set to 2, the returned image will be twice the size specified in the size parameter. The MapFan API offers comprehensive mapping capabilities, including WMTS format images for scrollable maps and these customizable static map images for precise location visualization.",
    "required_parameters": [
      {
        "name": "lonlat",
        "type": "STRING",
        "description": "### \u4e2d\u5fc3\u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`\u7d4c\u5ea6,\u7def\u5ea6`\n\n#### \u8a18\u8ff0\u4f8b\n`139.767231,35.681196`\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|\u7d4c\u5ea6 120, \u7def\u5ea620|\n|\u6700\u5927|\u7d4c\u5ea6 155, \u7def\u5ea646|\n\n#### \u6ce8\u8a18\n\u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": "139.767231,35.681196"
      },
      {
        "name": "scale",
        "type": "NUMBER",
        "description": "### \u5730\u56f3\u7e2e\u5c3a\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|6|\n|\u6700\u5927|21|",
        "default": "16"
      },
      {
        "name": "size",
        "type": "STRING",
        "description": "### \u753b\u50cf\u30b5\u30a4\u30ba\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u753b\u50cf\u5e45\uff08\u30d4\u30af\u30bb\u30eb\u5024\uff09],[\u753b\u50cf\u9ad8\u3055\uff08\u30d4\u30af\u30bb\u30eb\u5024\uff09]`\n\n#### \u8a18\u8ff0\u4f8b\n`320,240`\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u30b5\u30a4\u30ba|\n|---|---|\n|\u6700\u5c0f\u5024|1px, 1px|\n|\u6700\u5927\u5024|2048px, 2048px|",
        "default": "320,240"
      }
    ],
    "optional_parameters": [
      {
        "name": "icon",
        "type": "STRING",
        "description": "### \u30a2\u30a4\u30b3\u30f3\u8a2d\u5b9a\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9#1]|[\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9#2]|\u2026|[\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9#n]`\n\n#### \u8a18\u8ff0\u5f62\u5f0f\uff08\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9\uff09\n`[\u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\u30b3\u30fc\u30c9],[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024]`\n\n#### \u8a18\u8ff0\u4f8b\n`1,139.7672,35.6811|102,139.7671,35.6799`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9\u306e\u4ef6\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|50|\n\n|\u7d4c\u5ea6\u3001\u7def\u5ea6|\u5024|\n|---|---|\n|\u6700\u5c0f|\u7d4c\u5ea6120, \u7def\u5ea620|\n|\u6700\u5927|\u7d4c\u5ea6155, \u7def\u5ea646|\n\n#### \u6ce8\u8a18\n- scaler\u30fbcentericon\u304con\u306e\u5834\u5408\u3001\u8868\u793a\u3055\u308c\u308b\u30b9\u30b1\u30fc\u30e9\u30fb\u4e2d\u5fc3\u70b9\u30a2\u30a4\u30b3\u30f3\u3082\u305d\u308c\u305e\u308c\u30a2\u30a4\u30b3\u30f3\u5b9a\u7fa9\u3068\u3057\u3066\u4ef6\u6570\u306b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u3059\u3002\n- \u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\u30b3\u30fc\u30c9\u306e\u8a2d\u5b9a\u5024\u306b\u3064\u3044\u3066\u306f\u3001\u4ed8\u5247. \u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\u4e00\u89a7\u3092\u53c2\u7167\u3002",
        "default": ""
      },
      {
        "name": "centericon",
        "type": "ENUM",
        "description": "### \u4e2d\u5fc3\u70b9\u30a2\u30a4\u30b3\u30f3\u8868\u793a\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`",
        "default": ""
      },
      {
        "name": "logo",
        "type": "ENUM",
        "description": "### \u30d6\u30e9\u30f3\u30c9\u30ed\u30b4\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "landmarkicon",
        "type": "ENUM",
        "description": "### \u30e9\u30f3\u30c9\u30de\u30fc\u30af\u30a2\u30a4\u30b3\u30f3\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "### \u51fa\u529b\u3059\u308b\u753b\u50cf\u5f62\u5f0f\n|\u753b\u50cf\u5f62\u5f0f|\u5024|\n|---|---|\n|png|image/png|\n|jpeg|image/jpeg|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`image/png`",
        "default": ""
      },
      {
        "name": "resolution",
        "type": "ENUM",
        "description": "### \u89e3\u50cf\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\n\u89e3\u50cf\u5ea6\u306b2\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6a19\u6e96\u306e2\u500d\u306e\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n|\u89e3\u50cf\u5ea6|\u5024|\n|---|---|\n|\u6a19\u6e96|1|\n|2\u500d|2|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "rotationangle",
        "type": "NUMBER",
        "description": "### \u89d2\u5ea6\u30d1\u30e9\u30e1\u30fc\u30bf\n\u5730\u56f3\u3092\u6307\u5b9a\u3057\u305f\u89d2\u5ea6\u306b\u50be\u3051\u305f\u753b\u50cf\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeresultid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u7d50\u679cID\n\u6307\u5b9a\u3057\u305f\u30eb\u30fc\u30c8\u7d50\u679cID\u306b\u7d10\u4ed8\u304f\u30eb\u30fc\u30c8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u30eb\u30fc\u30c8\u7d50\u679cID\u306f\u30eb\u30fc\u30c8\u691c\u7d22API\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeicon",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u30a2\u30a4\u30b3\u30f3\u7a2e\u5225\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u30eb\u30fc\u30c8\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3057\u306a\u3044|0|\n|\u6a19\u6e96\u306e\u30eb\u30fc\u30c8\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "scaler",
        "type": "ENUM",
        "description": "### \u30b9\u30b1\u30fc\u30e9\u8868\u793a\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`",
        "default": ""
      },
      {
        "name": "bldgname",
        "type": "ENUM",
        "description": "### \u30d3\u30eb\u540d\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`off`\n\n#### \u6ce8\u8a18\n- mapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u30d3\u30eb\u540d\u79f0\u306f\u3001\u30b9\u30b1\u30fc\u30eb\u304c19\u4ee5\u4e0a\u306e\u5834\u5408\u306e\u307f\u63cf\u753b\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "contour",
        "type": "ENUM",
        "description": "### \u7b49\u9ad8\u7dda\u306e\u8868\u793a/\u975e\u8868\u793a\u6307\u5b9a\u30d1\u30e9\u30e1\u30fc\u30bf\n\n|\u8868\u793a\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u975e\u8868\u793a|off|\n|\u8868\u793a|on|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`on`\n\n#### \u6ce8\u8a18\nmapstyle\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u90e8\u306e\u5024\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 on \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001`[E03004] map parameter error (invalid combination)`\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002\nmapstyle\u3068\u4ed6\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u53ef\u5426\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "target",
        "type": "ENUM",
        "description": "### \u5730\u56f3\u306e\u8868\u793a\u5185\u5bb9\n|\u8868\u793a\u5185\u5bb9|\u5024|\n|---|---|\n|\u80cc\u666f\u306e\u307f\u3092\u8868\u793a|1|\n|\u6ce8\u8a18\u306e\u307f\u3092\u8868\u793a|2|\n|\u80cc\u666f + \u6ce8\u8a18\u3092\u8868\u793a|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`3`",
        "default": ""
      },
      {
        "name": "mapstyle",
        "type": "STRING",
        "description": "### \u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u6307\u5b9a\u7528\u30d1\u30e9\u30e1\u30fc\u30bf\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u30c7\u30b6\u30a4\u30f3]_[\u6ce8\u8a18\u30b5\u30a4\u30ba]`\n\n|\u30c7\u30b6\u30a4\u30f3|\u5024|\n|---|---|\n|\u6a19\u6e96|std|\n|\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb|gray|\n|RPG\u98a8\u5730\u56f3|rpg|\n|\u53e4\u5730\u56f3\u98a8\u5730\u56f3|antique|\n|\u9053\u8def\u5f37\u8abf\u5730\u56f3|hlightroad|\n|\u9244\u9053\u5f37\u8abf\u5730\u56f3|hlightrail|\n|\u5370\u5237\u7528\u767d\u9ed2\u30c7\u30b6\u30a4\u30f3|monochrome|\n|\u304a\u3082\u3066\u306a\u3057\u30de\u30c3\u30d7|tourism|\n\n|\u6ce8\u8a18\u30b5\u30a4\u30ba|\u5024|\n|---|---|\n|\u4e2d|pc|\n|\u5927|sp|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`std_pc`\n\n#### \u6ce8\u8a18\n\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u5730\u56f3\u30c7\u30b6\u30a4\u30f3\u8a2d\u5b9a\u65b9\u6cd5\u3068\u8868\u793a\u30a4\u30e1\u30fc\u30b8\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-map.p.rapidapi.com/mapimage\"\nquerystring = {\"lonlat\": lonlat, \"scale\": scale, \"size\": size}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-map.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "mapimage",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns raw binary data that constitutes a static map image in PNG format. This image provides a visual representation of a specific geographic area, determined by the input latitude, longitude, size, and scale parameters. The primary use of this output is for direct display or saving as an image file for location visualization.",
      "output_format": "The output is raw binary data for a PNG image, not a structured text format like JSON. It is a single, complete data stream representing the image file. There is no concept of nesting, pagination, or null fields within the binary image data itself."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: map",
        "connect params": [
          {
            "name": "format",
            "description": "The output format of the map image can be set to match the PNG format of the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "format",
            "description": "The format parameter can be set to 'png' to match the source tool's PNG output format"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map image could be used as a background or reference for the routing visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "kml",
            "description": "The map image could be used as a background or reference for the enhanced route visualization"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapFanAPI - Route",
    "parent tool description": "MapFan API \u306e\u30eb\u30fc\u30c8\u691c\u7d22\uff08\u7d4c\u8def\u63a2\u7d22\uff09API\u3067\u3059\u3002\u30ab\u30fc\u30ca\u30d3\u3067\u5b9f\u7e3e\u306e\u3042\u308b\u672c\u683c\u7684\u306a\u30eb\u30fc\u30c8\u691c\u7d22\u3001\u5927\u578b\u8eca\u898f\u5236\u3084\u6b69\u884c\u8005\u5411\u3051\u306a\u3069\u7279\u6b8a\u306a\u72b6\u6cc1\u3092\u8003\u616e\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u306b\u52a0\u3048\u3001\u6307\u5b9a\u4f4d\u7f6e\u4ed8\u8fd1\u306e\u9053\u8def\u306e\u9053\u8def\u540d\u30fb\u4ea4\u5dee\u70b9\u540d\u30fb\u4fe1\u53f7\u6709\u7121\u7b49\u306e\u9053\u8def\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002",
    "tool name": "MapFanAPI - Route: altcalcroute",
    "tool description": "Provides multiple recommended route search functionality, returning up to three route options for a single set of search conditions, with 'Recommendation 1' being the standard calcroute result and 'Recommendation 2' and 'Recommendation 3' as alternatives (when available). This leverages MapFan API's sophisticated route search technology, which has proven reliability in car navigation systems, offering professional-grade route planning capabilities. The API can handle specialized routing scenarios including large vehicle restrictions and pedestrian-specific routes, while also providing detailed road information such as road names, intersection names, and traffic signal locations near specified positions. Note that response times may vary depending on route distance and search parameters.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "fmt",
        "type": "ENUM",
        "description": "### \u51fa\u529b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n|\u30d5\u30a9\u30fc\u30de\u30c3\u30c8|\u5024|\n|---|---|\n|JSON|json |\n|XML|xml|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`json`\n\n#### \u6ce8\u8a18\n`callback`\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\u304c\u7834\u68c4\u3055\u308c\u3001JSONP\u5f62\u5f0f\u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "passablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u306e\u307f\u3092\u901a\u884c\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "### JSONP\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u7528\u95a2\u6570\u540d\n\u95a2\u6570\u540d\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306fJSONP\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001`fmt`\u3067\u6307\u5b9a\u3055\u308c\u305f\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "saveresult",
        "type": "ENUM",
        "description": "### \u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306e\u4fdd\u5b58\u6709\u7121\n\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306b'routeResultId'\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n\n|\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306e\u4fdd\u5b58|\u5024|\n|---|---|\n|\u4fdd\u5b58\u3057\u306a\u3044|0|\n|\u4fdd\u5b58\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n`routeResultId`\u306e\u6709\u52b9\u671f\u9650\u306f1\u30f6\u6708\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "daytime",
        "type": "ENUM",
        "description": "### \u65e5\u6642\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u65e5\u6642\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u65e5\u6642\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u3001regulations\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`generalroad`\u3001`tollroad`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "generalroad",
        "type": "ENUM",
        "description": "### \u4e00\u822c\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u4e00\u822c\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u4e00\u822c\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "uturnavoid",
        "type": "ENUM",
        "description": "### \u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\n|\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f|\u5024|\n|---|---|\n|\u3057\u306a\u3044|0|\n|\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`priority`\u3067\u6307\u5b9a\u3057\u305f\u5024\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u3002\n- `priority=3\u3001100\uff5e103`\u306e\u5834\u5408\n`0`\n- `priority`\u304c\u4e0a\u8a18\u4ee5\u5916\u306e\u5834\u5408\n`1`\n\n#### \u6ce8\u8a18\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturn`\uff08U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tollroad",
        "type": "ENUM",
        "description": "### \u9ad8\u901f\u9053\u898f\u5236\n\u7121\u52b9\u3068\u3057\u305f\u5834\u5408\u3001\u9ad8\u901f\u9053\u306e\u898f\u5236\u3092\u7121\u8996\u3057\u305f\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u7121\u52b9\u306b\u3059\u308b|0|\n|\u9ad8\u901f\u9053\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `daytime`\u3001`regulations`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n- \u9ad8\u901f\u9053\u898f\u5236\u306e\u5bfe\u8c61\u3068\u306a\u308b\u9053\u306f\u3001\u9053\u8def\u7a2e\u5225100\u756a\u53f0\u306811\u756a\u306e\u9053\u3067\u3059\u3002\u9053\u8def\u7a2e\u5225\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u9053\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "regulations",
        "type": "ENUM",
        "description": "### \u305d\u306e\u4ed6\u898f\u5236\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u306e\u6709\u52b9/\u7121\u52b9\u3092\u3001<br>generalroad\u3001tollroad\u306e\u8a2d\u5b9a\u306b\u5f93\u3046|0|\n|\u4e00\u65b9\u901a\u884c\u898f\u5236\u3092\u6709\u52b9\u306b\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n`daytime`\u3001`generalroad`\u3001`tollroad`\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "impassablearea",
        "type": "STRING",
        "description": "### \u901a\u884c\u4e0d\u53ef\u30a8\u30ea\u30a2\n\u30eb\u30fc\u30c8\u691c\u7d22\u5bfe\u8c61\u5916\u3068\u306a\u308b\u30a8\u30ea\u30a2\u3092\u77e9\u5f62\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30ea\u30a2\u5185\u3092\u56de\u907f\u3059\u308b\u30eb\u30fc\u30c8\u304c\u691c\u7d22\u3055\u308c\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n##### \u901a\u884c\u53ef\u80fd\u30a8\u30ea\u30a2\n`[\u30a8\u30ea\u30a2#1]|[\u30a8\u30ea\u30a2#2]|...|[\u30a8\u30ea\u30a2#n]`\n\n##### \u30a8\u30ea\u30a2\n`[\u5357\u897f\u7d4c\u5ea6\u306e\u5024],[\u5357\u897f\u7def\u5ea6\u306e\u5024],[\u5317\u6771\u7d4c\u5ea6\u306e\u5024],[\u5317\u6771\u7def\u5ea6\u306e\u5024]`\n\n#### \u7bc4\u56f2\n|n\uff08\u30a8\u30ea\u30a2\u306e\u500b\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|10|\n\n#### \u8a18\u8ff0\u4f8b\n`139.6965,35.6867,139.7029,35.6921|139.7000,35.6818,139.7044,35.6879`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u3057\u305f\u77e9\u5f62\u3068\u6574\u5408\u6027\u306e\u7121\u3044`start`\u3001`destination`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n- `passablearea`\u3068`impassablearea`\u3067\u91cd\u306a\u3063\u305f\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001`impassablearea`\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\n- `travel=1`\u3068\u3057\u305f\u5834\u5408\u3001\u672c\u8a2d\u5b9a\u306f\u6307\u5b9a\u306f\u51fa\u6765\u307e\u305b\u3093\u3002\n- \u9577\u8ddd\u96e2\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u8fd4\u5374\u304c\u9045\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "routeid",
        "type": "STRING",
        "description": "### \u30eb\u30fc\u30c8\u8b58\u5225\u5b50\n\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u8b58\u5225\u3059\u308b\u4efb\u610f\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u305f\u6587\u5b57\u5217\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u305d\u306e\u307e\u307e\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u30eb\u30fc\u30c8\u691c\u7d22\u7d50\u679c\u306b\u5f71\u97ff\u306f\u3057\u307e\u305b\u3093\u3002\n\n#### \u6ce8\u8a18\n- URL\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305fUTF-8\u306e\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u534a\u89d2\u306e\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u306f\u7981\u6b62\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e\u534a\u89d2\u8a18\u53f7\u3084\u5168\u89d2\u6587\u5b57\u306fURL\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u884c\u3063\u3066\u3044\u308c\u3070\u4f7f\u7528\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "uturn",
        "type": "ENUM",
        "description": "### U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055\n|U\u30bf\u30fc\u30f3\u306e\u3057\u6613\u3055|\u5024|\n|---|---|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u3046|0|\n|U\u30bf\u30fc\u30f3\u3092\u6bd4\u8f03\u7684\u884c\u308f\u306a\u3044|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f`uturnavoid `\uff08\u7d4c\u7531\u5730\u3067\u306eU\u30bf\u30fc\u30f3\u56de\u907f\uff09\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "danger",
        "type": "ENUM",
        "description": "### \u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8a2d\u5b9a|\u5024|\n|---|---|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u306a\u3044|0|\n|\u5371\u967a\u7269\u7a4d\u8f09\u8eca\u4e21\u3067\u3042\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "width",
        "type": "NUMBER",
        "description": "### \u8eca\u5e45\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u5e45\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "weight",
        "type": "NUMBER",
        "description": "### \u8eca\u91cd\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u91cd\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "highwayspeed",
        "type": "NUMBER",
        "description": "### \u9ad8\u901f\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u9ad8\u901f\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`90.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "height",
        "type": "NUMBER",
        "description": "### \u8eca\u9ad8\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u9ad8\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001cm \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "loadage",
        "type": "NUMBER",
        "description": "### \u7a4d\u8f09\u91cf\n\u9053\u8def\u898f\u5236\u3067\u8003\u616e\u3059\u308b\u8eca\u4e21\u306e\u6700\u5927\u7a4d\u8f09\u91cf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n\n#### \u6ce8\u8a18\n\u5358\u4f4d\u306f\u3001kg \u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "normalspeed",
        "type": "NUMBER",
        "description": "### \u4e00\u822c\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u4e00\u822c\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`25.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "tollwayspeed",
        "type": "NUMBER",
        "description": "### \u6709\u6599\u9053\u306e\u8d70\u884c\u901f\u5ea6\n\u6709\u6599\u9053\u306e\u8d70\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`55.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "ferryspeed",
        "type": "NUMBER",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u901f\u5ea6\n\u30d5\u30a7\u30ea\u30fc\u306e\u822a\u884c\u6642\u9593\u306e\u8a08\u7b97\u306b\u7528\u3044\u307e\u3059\u3002\n\n### \u8a18\u8ff0\u4f8b\n`27.0`\n\n#### \u6ce8\u8a18\n- \u5358\u4f4d\u306f\u3001km/h \u3067\u3059\u3002\n- \u7d4c\u8def\u7a2e\u5225\u3068\u306e\u95a2\u4fc2\u304a\u3088\u3073\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u4ed8\u5247 \uff1e \u30eb\u30fc\u30c8\u6a5f\u80fd \uff1e \u7d4c\u8def\u7a2e\u5225\u4e00\u89a7\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "vehicletype",
        "type": "ENUM",
        "description": "### \u8eca\u7a2e\n\u9053\u8def\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u8eca\u7a2e\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u6307\u5b9a\u306a\u3057|0|\n|\u5927\u578b\u4e57\u7528\u81ea\u52d5\u8eca|1|\n|\u5927\u578b\u8ca8\u7269\u81ea\u52d5\u8eca|6|\n|\u5927\u578b\u7279\u6b8a\u81ea\u52d5\u8eca|11|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "tolltarget",
        "type": "ENUM",
        "description": "### \u6599\u91d1\u8a08\u7b97\u5bfe\u8c61\n|\u6599\u91d1\u8a08\u7b97\u5bfe\u8c61|\u5024|\n|---|---|\n|\u901a\u5e38\u6599\u91d1|0|\n|\u901a\u5e38\u6599\u91d1\uff0bETC\u5272\u5f15\u6599\u91d1|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`",
        "default": ""
      },
      {
        "name": "smartic",
        "type": "ENUM",
        "description": "## \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u975e\u63a8\u5968\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\u3002 `etc` \u3092\u3054\u4f7f\u7528\u304f\u3060\u3055\u3044\u3002\n\n### \u30b9\u30de\u30fc\u30c8IC\u5229\u7528\u6709\u7121\n|\u30b9\u30de\u30fc\u30c8IC\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "cartype",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u5229\u7528\u6642\u306e\u8eca\u7a2e\n\u6709\u6599\u9053\u8def\u306e\u6599\u91d1\u8a08\u7b97\u306e\u307f\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n|\u8eca\u7a2e|\u5024|\n|---|---|\n|\u8efd\u81ea\u52d5\u8eca|0|\n|\u666e\u901a\u8eca|1|\n|\u4e2d\u578b\u8eca|2|\n|\u5927\u578b\u8eca|3|\n|\u7279\u5927\u8eca|4|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`",
        "default": ""
      },
      {
        "name": "date",
        "type": "STRING",
        "description": "### \u51fa\u767a\u65e5\u6642\n\u30eb\u30fc\u30c8\u691c\u7d22\u6642\u306e\u4ea4\u901a\u898f\u5236\u3092\u8003\u616e\u3059\u308b\u3068\u304d\u306e\u65e5\u6642\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u5e744\u6841][\u67082\u6841][\u65e52\u6841]_[\u66422\u6841][\u52062\u6841][\u79d22\u6841]` \uff08`yyyyMMdd_HHmmss`\uff09\n\n#### \u8a18\u8ff0\u4f8b\n`20220420_170505` \uff082022\u5e744\u670820\u65e5\u5348\u5f8c5\u66425\u52065\u79d2 \uff09\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\nAPI\u5b9f\u884c\u65e5\u6642\u3092\u9069\u7528\u3057\u3066\u3001\u30eb\u30fc\u30c8\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "tollway",
        "type": "ENUM",
        "description": "### \u6709\u6599\u9053\u8def\u4f7f\u7528\u6761\u4ef6\n|\u6709\u6599\u9053\u8def\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6709\u6599\u9053\u8def\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `tollway=2` \u3068\u3057\u305f\u5834\u5408\u3001\u6709\u6599\u9053\u8def\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `tollway=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00108`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "etc",
        "type": "ENUM",
        "description": "### ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528\u6709\u7121\n|ETC\u5c02\u7528\u65bd\u8a2d\u5229\u7528|\u5024|\n|---|---|\n|\u5229\u7528\u3057\u306a\u3044|0|\n|\u5229\u7528\u3059\u308b|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`1`\n\n#### \u6ce8\u8a18\n- `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3054\u5229\u7528\u4e0b\u3055\u3044\u3002\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30b9\u30de\u30fc\u30c8IC\u306b\u3082\u9069\u7528\u3055\u308c\u307e\u3059\u3002\n- \u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u672a\u6307\u5b9a\u3001\u304b\u3064\u3001 `smartic` \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u9650\u308a\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f `smartic` \u3068\u540c\u3058\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "ferry",
        "type": "ENUM",
        "description": "### \u30d5\u30a7\u30ea\u30fc\u4f7f\u7528\u6761\u4ef6\n|\u30d5\u30a7\u30ea\u30fc\u4f7f\u7528|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u512a\u5148|1|\n|\u56de\u907f|2|\n|\u7d76\u5bfe\u56de\u907f|3|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u308f\u306a\u3044\u3068\u30eb\u30fc\u30c8\u304c\u5f15\u3051\u306a\u3044\u6761\u4ef6\u3067\u3001\n    - `ferry=2` \u3068\u3057\u305f\u5834\u5408\u3001\u30d5\u30a7\u30ea\u30fc\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30c8\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308a\u307e\u3059\u3002\n    - `ferry=3` \u3068\u3057\u305f\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00107`\uff09\u3068\u306a\u308a\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "destination",
        "type": "STRING",
        "description": "### \u76ee\u7684\u5730\u7def\u5ea6\u7d4c\u5ea6\n\n#### \u8a18\u8ff0\u5f62\u5f0f\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.62261961,35.46606942`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.62261961,35.46606942,1,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.62261961,35.46606942,,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.62261961,35.46606942"
      },
      {
        "name": "via",
        "type": "STRING",
        "description": "### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n##### \u7d4c\u7531\u5730\u7def\u5ea6\u7d4c\u5ea6\n`[\u7d4c\u7531\u5730#1]|[\u7d4c\u7531\u5730#2|...|[\u7d4c\u7531\u5730#n]`\n\n##### \u7d4c\u7531\u5730\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225],[\u6ede\u5728\u6642\u9593],[\u6a2a\u4ed8\u3051\u512a\u5148]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u3001`[\u6ede\u5728\u6642\u9593]`\u3001`[\u6a2a\u4ed8\u3051\u512a\u5148]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n|\u6a2a\u4ed8\u3051\u512a\u5148|\u5024|\n|---|---|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u306a\u3057|0|\n|\u6a2a\u4ed8\u3051\u512a\u5148\u3042\u308a|1|\n\n#### \u7bc4\u56f2\n|n\uff08\u7d4c\u7531\u5730\u306e\u6570\uff09|\u5024|\n|---|---|\n|\u6700\u5927|30|\n\n|\u6ede\u5728\u6642\u9593\uff08\u5206\uff09|\u5024|\n|---|---|\n|\u6700\u5c0f|0|\n|\u6700\u5927|10080|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n##### \u6ede\u5728\u6642\u9593\uff08\u5206\uff09\n`0`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n\n##### \u7d4c\u7531\u5730\u30923\u5730\u70b9\u6307\u5b9a\n`139.75723347,35.66593095|139.73893125,35.62911118|139.69695771,35.53136405`\n\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.75723347,35.66593095`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1`\n\n##### \u6ede\u5728\u6642\u9593\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60`\n\n##### \u6a2a\u4ed8\u3051\u512a\u5148\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.75723347,35.66593095,1,60,1`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,60`\n\n##### \u5730\u70b9\u7a2e\u5225\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6ede\u5728\u6642\u9593\u6307\u5b9a\uff1a\u306a\u3057\u3001\u6a2a\u4ed8\u3051\u512a\u5148\u6307\u5b9a\uff1a\u3042\u308a\n`139.75723347,35.66593095,,,1`\n\n#### \u6ce8\u8a18\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": ""
      },
      {
        "name": "startangle",
        "type": "NUMBER",
        "description": "### \u51fa\u767a\u65b9\u5411\n\u51fa\u767a\u5730\u306e\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u304c\u53cc\u65b9\u5411\u306b\u9032\u884c\u53ef\u80fd\u306a\u5834\u5408\u306b\u3001\u9032\u884c\u65b9\u5411\u3092\u6307\u5b9a\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306b\u5bfe\u3057\u3001\u6307\u5b9a\u89d2\u5ea6\u306b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u65b9\u5411\u306b\u9032\u884c\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u3001\u6700\u8fd1\u508d\u30ea\u30f3\u30af\u306e\u9032\u884c\u53ef\u80fd\u306a\u65b9\u5411\u306e\u3044\u305a\u308c\u304b\u304c\u3001\u30eb\u30fc\u30c8\u306e\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u63a1\u7528\u3055\u308c\u307e\u3059\u3002\u771f\u5317\u30920\u5ea6\u3068\u3057\u3001\u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002\n\n#### \u7bc4\u56f2\n|\u7bc4\u56f2|\u5024|\n|---|---|\n|\u6700\u5c0f|0\uff08\u5317\u4e0a\uff09|\n|\u6700\u5927|359|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n`0`\n\n#### \u6ce8\u8a18\n- \u6574\u6570\u306e\u307f\u6307\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n- \u6642\u8a08\u56de\u308a\u306b\u5897\u52a0\u3057\u307e\u3059\u3002",
        "default": ""
      },
      {
        "name": "priority",
        "type": "ENUM",
        "description": "### \u57fa\u672c\u6761\u4ef6\n|\u57fa\u672c\u6761\u4ef6|\u5024|\n|---|---|\n|\u6a19\u6e96|0|\n|\u8ddd\u96e2\u512a\u5148|1|\n|\u76f4\u9032\u512a\u5148|2|\n|\u7c21\u6613\u6b69\u884c\u8005|3|\n|\u9053\u5e45\u512a\u5148|4|\n\n#### \u6ce8\u8a18\n- `altcalcroute`\u3067\u306f\u3001`priority=100\uff5e103`\u306f\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3002\n- \u5404\u6761\u4ef6\u306e\u8a73\u7d30\u306f\u3001\u300eAPI\u4ed5\u69d8\u66f8\uff1aMapFanAPI_\u30b5\u30fc\u30d0\u30fcAPI\u6280\u8853\u4ed5\u69d8\u66f8 \uff1e \u30eb\u30fc\u30c8\u691c\u7d22 \uff1e \u88dc\u8db3 \uff1e \u30eb\u30fc\u30c8\u57fa\u672c\u6761\u4ef6 (priority)\u300f\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002",
        "default": ""
      },
      {
        "name": "start",
        "type": "STRING",
        "description": "### \u51fa\u767a\u5730\u7def\u5ea6\u7d4c\u5ea6\n#### \u8a18\u8ff0\u5f62\u5f0f\n\n`[\u7d4c\u5ea6\u306e\u5024],[\u7def\u5ea6\u306e\u5024],[\u5730\u70b9\u7a2e\u5225]`\n\u203b`[\u5730\u70b9\u7a2e\u5225]`\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n\n|\u5730\u70b9\u7a2e\u5225|\u5024|\n|---|---|\n|\u4e00\u822c\u9053\u30fb\u6709\u6599\u9053|0|\n|\u4e00\u822c\u9053\u306e\u307f|1|\n|\u6709\u6599\u9053\u306e\u307f|2|\n\n#### \u30c7\u30d5\u30a9\u30eb\u30c8\n\n##### \u5730\u70b9\u7a2e\u5225\n`0`\n\n#### \u8a18\u8ff0\u4f8b\n##### \u7def\u5ea6\u7d4c\u5ea6\u306e\u307f\u6307\u5b9a\n`139.76730676,35.68095910`\n\n##### \u5730\u70b9\u7a2e\u5225\u3082\u5408\u308f\u305b\u3066\u6307\u5b9a\n`139.76730676,35.68095910,1`\n\n#### \u6ce8\u8a18\n- `routeresultid`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u672c\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u6e2c\u5730\u7cfb\u306f\u3001\u4e16\u754c\u6e2c\u5730\u7cfb\uff08JGD2011\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n- \u7def\u5ea6\u7d4c\u5ea6\u306e\u5c0f\u6570\u70b9\u306f\u7b2c8\u4f4d\u307e\u3067\u8003\u616e\u3055\u308c\u3001\u305d\u308c\u3088\u308a\u5927\u304d\u3044\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n- \u6307\u5b9a\u5730\u70b9\u304b\u3089\u7d045km\u306e\u7bc4\u56f2\u306b\u9053\u8def\u304c\u3042\u308b\u5834\u5408\u306b\u30eb\u30fc\u30c8\u691c\u7d22\u304c\u53ef\u80fd\u3067\u3059\u3002\u9053\u8def\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u3001\u30a8\u30e9\u30fc\uff08`I00104`\uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b69\u884c\u8005\uff08`priority=100\uff5e103`\uff09\u306e\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\u3002",
        "default": "139.76730676,35.68095910"
      }
    ],
    "code": "import requests\n\nurl = \"https://mapfanapi-route.p.rapidapi.com/altcalcroute\"\nquerystring = {\"destination\": destination, \"start\": start}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapfanapi-route.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "altcalcroute",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object containing an array of recommended routes, with up to three options. Each route option includes a summary of the total distance, travel time, and toll fees. Additionally, it provides a detailed, turn-by-turn navigation guide with specific instructions, coordinates, road names, and intersection names for each step of the journey. This output is intended for applications requiring comprehensive route planning and navigation capabilities.",
      "output_format": "The top-level structure is a JSON object containing a 'result' key. The value of 'result' is a JSON array where each element represents a distinct route option. Each route option is an object with two main keys: 'summary' (an object with overall route metrics) and 'guide' (an array of objects, each representing a step in the navigation). Some nested objects like 'guideRoad' or 'guideCrossing' appear to be optional and are only present when relevant information, such as a road name, is available for a given step."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "routeresultid",
            "description": "Can use the route result ID from altcalcroute to display the calculated route on a map"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use coordinates from route guide points"
          },
          {
            "name": "latitude",
            "description": "Can use coordinates from route guide points"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from route guide points to get road information"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use coordinates from route guide points"
          },
          {
            "name": "longitude",
            "description": "Can use coordinates from route guide points"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Can use start coordinates from the route"
          },
          {
            "name": "destination",
            "description": "Can use end coordinates from the route"
          },
          {
            "name": "waypoints",
            "description": "Can use intermediate coordinates from the route guide points"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "Can use coordinates from route guide points as stops"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
    "tool description": "Returns vector tiles that follow the OpenMapTiles schema, providing standardized geographic data in vector format. This endpoint is part of Mapilion's comprehensive mapping service that delivers both vector and raster map tiles at scale, built on OpenStreetMap data and the OpenMapTiles specification. The vector tiles enable efficient rendering of map features with reduced bandwidth requirements compared to traditional raster tiles, making them ideal for interactive web and mobile mapping applications.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/vector/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Vector Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns geographic data packaged as a binary vector tile. This tile contains map features like water bodies, administrative boundaries, and buildings, organized into distinct layers with associated properties. The output is intended for programmatic use by map rendering engines to efficiently display interactive maps, rather than for direct human interpretation.",
      "output_format": "The successful output is a single binary file in the Protocol Buffers (PBF) format, specifically following the Mapbox Vector Tile (.mvt) specification. This is not a human-readable format like JSON. In case of an error (e.g., a 404), the tool returns a plain text string describing the error. The response is not paginated; it is a single, self-contained data file."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "The vector tile can be converted to GeoJSON and used as input for map visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "The vector tile coordinates can be used to request matching hillshading overlay"
          },
          {
            "name": "y",
            "description": "The vector tile coordinates can be used to request matching hillshading overlay"
          },
          {
            "name": "z",
            "description": "The vector tile coordinates can be used to request matching hillshading overlay"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "x",
            "description": "The vector tile coordinates can be used to request matching hillshading overlay"
          },
          {
            "name": "y",
            "description": "The vector tile coordinates can be used to request matching hillshading overlay"
          },
          {
            "name": "z",
            "description": "The vector tile coordinates can be used to request matching hillshading overlay"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
    "tool description": "Returns vector tiles following the OpenMapTiles schema, allowing access to standardized map data in vector format. This endpoint is part of Mapilion's comprehensive mapping service that delivers both vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles technologies. The vector tiles provide efficient, detailed geographic data that can be styled and rendered dynamically for interactive mapping applications.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/vector/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Vector Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single vector map tile containing geographic feature data for a specific map area. This data, which includes features like buildings, land cover, and transportation infrastructure, is structured according to the OpenMapTiles schema. It is intended to be consumed by mapping libraries to dynamically render interactive maps. In case of an error, such as a tile not being found, a plain text error message is returned.",
      "output_format": "The successful output is a binary blob, specifically a vector tile in a compressed Protocol Buffers (PBF) format (.mvt). This is not a human-readable format like JSON or XML. The internal structure of the data is defined by the OpenMapTiles schema. Error responses are returned as a simple, human-readable text string."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "The vector tile can be converted to GeoJSON for visualization on static maps"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Vector tile data can be extracted and converted to GeoJSON for route enhancement"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Routing Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Vector tile data containing road networks can be converted to GeoJSON for routing"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
    "tool description": "Returns special hillshading raster tiles as PNG images that create the visual effect of mountains when used as map overlays, with support for either v1 or v2 versions. This endpoint is part of Mapilion's comprehensive mapping service that delivers vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles data, allowing you to enhance your maps with realistic topographical features.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "756"
      },
      {
        "name": "version",
        "type": "string",
        "description": "",
        "default": "v2"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "11"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "805"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/hillshades/{version}/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Hillshading Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns the binary data for a PNG image file. This image is a hillshading raster tile, designed to be used as an overlay on a digital map to add visual depth and represent topographical features like mountains and hills. In the case of an error, such as a tile not being found, the tool returns a plain text error message.",
      "output_format": "The successful output is raw binary data for a PNG image, not a structured format like JSON. Error responses appear to be simple plain text strings."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "kml",
            "description": "Can use the hillshading PNG as a background overlay for static maps"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "format",
            "description": "Can use the hillshading PNG as a base layer for map visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "elevation",
            "description": "Can use hillshading data to enhance route visualization with terrain information"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "ratio",
            "description": "Can combine with the hillshading PNG to create enhanced terrain visualization"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
    "tool description": "Returns special hillshading raster tiles as PNG images that create the visual effect of mountains when used as an overlay. Available in either v1 or v2 versions, this endpoint is part of Mapilion's comprehensive mapping service that delivers vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles data sources.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "756"
      },
      {
        "name": "version",
        "type": "string",
        "description": "",
        "default": "v2"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "11"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "805"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/hillshades/{version}/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Hillshading Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single raster map tile as a PNG image. This image contains hillshading data, which visually represents terrain elevation to create the 3D effect of mountains and hills. The output is intended to be used as a visual overlay on another map layer to provide topographical context.",
      "output_format": "The output is the raw binary data of a PNG image, not a structured text format like JSON or XML. The provided examples show the characteristic file signature and data chunks (e.g., 'IHDR', 'IDAT', 'IEND') of the PNG binary format."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "The hillshading PNG can be used as a base map layer"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "contour",
            "description": "The hillshading PNG can complement the contour lines for enhanced terrain visualization"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "elevation",
            "description": "The hillshading PNG can provide visual context for elevation data"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "z",
            "description": "The hillshading PNG can be combined with terrain data at matching zoom levels"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Winter",
        "connect params": [
          {
            "name": "z",
            "description": "The hillshading PNG can be overlaid with winter terrain at matching zoom levels"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "tool name": "MapToolkit: Routing",
    "tool description": "Provides global routing capabilities for calculating optimal paths between locations. This is part of a comprehensive mapping toolkit that includes map tiles, address search (geocoding), static maps, and elevation data, enabling developers to build complete location-based applications with navigation functionality.",
    "required_parameters": [
      {
        "name": "points",
        "type": "STRING",
        "description": "Value: `{lat},{lng}[|{lat},{lng} ...]`\nDefine multiple routing waypoints, consisting of latitude and longitude. At least 2 points are needed.",
        "default": "48.202596,16.369801|48.208373,16.370401"
      }
    ],
    "optional_parameters": [
      {
        "name": "finish_instruction",
        "type": "STRING",
        "description": "Adds a finish instruction at the end of the route.",
        "default": ""
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "Language for the given instructions. Must be a valid ISO 639-1 language code. Default value is `en`.",
        "default": ""
      },
      {
        "name": "voice_instructions",
        "type": "STRING",
        "description": "Enables voice instructions for text to speech engines.",
        "default": ""
      },
      {
        "name": "filename",
        "type": "STRING",
        "description": "Only available if the set `format` is `gpx` or `kml`. ",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Default format is `json`.",
        "default": ""
      },
      {
        "name": "weighting",
        "type": "STRING",
        "description": "Only available if the set `routeType` is `bike`. Default value is `networks`.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/route\"\nquerystring = {\"points\": points, \"routeType\": routetype}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Routing",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a JSON object containing detailed routing information. It provides one or more potential paths, with each path including summary data like total distance in meters, travel time in milliseconds, and a geographical bounding box. Additionally, each path contains a granular, turn-by-turn list of instructions, where each step includes a textual description, distance, duration, and specific coordinates for the maneuver.",
      "output_format": "The top-level structure is a JSON object containing an `info` object and a `paths` array. The `paths` array holds one or more path objects, suggesting that multiple alternative routes can be returned. Each path object is complex, containing summary fields and a nested array of `instructions` objects for turn-by-turn navigation. The full geometry of the route is provided as an encoded polyline string in the `points` field."
    },
    "connected tools": [
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use coordinates from the routing path points to center the map on a specific point in the route"
          },
          {
            "name": "routeresultid",
            "description": "Can potentially use route information to display the route on a map"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Can use coordinates from the routing path to center the static map"
          },
          {
            "name": "path",
            "description": "Can use the path coordinates from the routing output to draw the route on a static map"
          },
          {
            "name": "geojson",
            "description": "Can use the encoded polyline from the routing output to render the route on a map"
          },
          {
            "name": "bounds",
            "description": "Can use the bounding box from the routing output to set the map boundaries"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use coordinates from the routing path to find county boundaries along the route"
          },
          {
            "name": "latitude",
            "description": "Can use coordinates from the routing path to find county boundaries along the route"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Elevation",
        "connect params": [
          {
            "name": "points",
            "description": "Can use the coordinates from the routing path to get elevation data along the route"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "geometry",
            "description": "Can use the path geometry from the routing output to enhance with additional data"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use coordinates from the routing path to find nearby places along the route"
          },
          {
            "name": "lat",
            "description": "Can use coordinates from the routing path to find nearby places along the route"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "tool name": "MapToolkit: Search",
    "tool description": "Performs global geocoding to convert addresses into geographic coordinates or vice versa. This is part of a comprehensive mapping toolkit that provides essential geographic services including map tiles, address search capabilities, routing directions, static map generation, and elevation data - giving you the core functionality needed for location-based applications and spatial analysis.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "",
        "default": "Kirchengasse Wien"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "Language for the given instructions. Must be a valid ISO 639-1 language code. Default value is `de`.",
        "default": ""
      },
      {
        "name": "viewbox",
        "type": "STRING",
        "description": "Defines a preferred area to search in. Format is `{minLng},{minLat},{maxLng},{maxLat}`.",
        "default": ""
      },
      {
        "name": "polygon",
        "type": "STRING",
        "description": "Defines whether available polygons are added to the response data or not. Default value is `0`.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of returned results. Default value is `10`.",
        "default": ""
      },
      {
        "name": "countrycodes",
        "type": "STRING",
        "description": "Limits result to one or multiple countries. Passing multiple countries, they need to be separated by a comma `,`. Must be a valid  ISO 3166-1 alpha-2 country code.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/geocode/search\"\nquerystring = {\"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output is a list of geographic locations that match a given search query. Each location in the list includes a full display name, precise latitude and longitude coordinates, and a detailed, structured address broken down into components like road, city, and country. Additional metadata is provided, such as a unique place ID, the location's classification (e.g., 'tourism', 'office'), and an importance score, making it useful for mapping and location-based services.",
      "output_format": "The output is a string that represents a JSON array of objects. Each object corresponds to a single location match. Within each location object, there is a nested 'address' object that contains the structured address details. The number of location objects in the array can vary from one to many. Key values, such as latitude and longitude, are returned as strings."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the search results"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use longitude,latitude from the search results"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "latitude",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from the search results"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Can use longitude from the search results"
          },
          {
            "name": "lat",
            "description": "Can use latitude from the search results"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the search results"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Places Nearby a Coordinates",
    "parent tool description": "Find places nearby a given coordinates.",
    "tool name": "Places Nearby a Coordinates: Categories",
    "tool description": "Retrieves categories of establishments available in the system. This endpoint is part of a location-based service that helps users find places of interest near specific geographic coordinates, allowing for targeted searches of businesses, landmarks, and other points of interest based on their classification.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://places-nearby-a-coordinates.p.rapidapi.com/categories\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"places-nearby-a-coordinates.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Categories",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive list of all available categories for establishments and points of interest. These categories are represented as strings in a hierarchical format, using a dot as a separator (e.g., `commercial.supermarket`). This list serves as a taxonomy that can be used to filter targeted searches in other related tools.",
      "output_format": "The output is a single, non-nested JSON array containing strings. Each string represents a distinct category or sub-category. The list appears to be a complete, static enumeration, as all examples are identical and do not suggest any form of pagination."
    },
    "connected tools": [
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "categories",
            "description": "The source tool provides a list of category strings that can be directly used as input for this parameter to filter nearby places by specific categories"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "TrueWay Geocoding",
    "parent tool description": "Forward and Reverse Geocoding",
    "tool name": "TrueWay Geocoding: Geocode",
    "tool description": "Obtains precise geocoordinates (latitude and longitude) for a given address. This forward geocoding functionality is part of a comprehensive geocoding service that converts between physical addresses and geographic coordinates in both directions. The tool transforms human-readable location information into machine-readable geographic coordinates that can be used for mapping, distance calculations, location-based services, and spatial analysis.",
    "required_parameters": [
      {
        "name": "address",
        "type": "STRING",
        "description": "The address that you want to geocode",
        "default": "505 Howard St, San Francisco"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "The language in which to return results",
        "default": "en"
      },
      {
        "name": "country",
        "type": "STRING",
        "description": "The country code",
        "default": ""
      },
      {
        "name": "bounds",
        "type": "STRING",
        "description": "The bounding box",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://trueway-geocoding.p.rapidapi.com/Geocode\"\nquerystring = {\"address\": address, \"language\": language}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trueway-geocoding.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool output provides detailed geocoding information for a given location query. It returns a list of potential matches, where each match includes a full formatted address, its individual components (such as country, region, city, street, and postal code), and the precise latitude and longitude coordinates. This structured data is designed for use in mapping applications, location-based services, and spatial analysis.",
      "output_format": "The output is a JSON object containing a single key, \"results\", which holds a JSON array of location objects. Each object in the array represents a possible geocoded match and includes a nested \"location\" object with \"lat\" and \"lng\" keys. The number of results can be one or more. Some address component fields like \"area\", \"sublocality\", \"street\", and \"house\" are optional and may be absent depending on the type of result (e.g., a postal code match vs. a full street address)."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "longitude",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "longitude",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "longitude",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "longitude",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude,latitude coordinates from geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude,latitude coordinates from geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude,latitude coordinates from geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude,latitude coordinates from geocoding result"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "lon",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "latitude",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "longitude",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingPath",
        "connect params": [
          {
            "name": "origin",
            "description": "Origin coordinates from geocoding result"
          },
          {
            "name": "destination",
            "description": "Destination coordinates from geocoding result"
          }
        ]
      },
      {
        "tool name": "TrueWay Directions: FindDrivingRoute",
        "connect params": [
          {
            "name": "stops",
            "description": "Coordinates for route stops from geocoding result"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "lng",
            "description": "Longitude from geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from geocoding result"
          },
          {
            "name": "lon",
            "description": "Longitude from geocoding result"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flightera Flight Data",
    "parent tool description": "Flight status, on-time performance and statistics by Flightera",
    "required_parameters": [
      {
        "name": "flnr",
        "type": "STRING",
        "description": "The flight number to request",
        "default": "DL456"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://flightera-flight-data.p.rapidapi.com/flight/search\"\nquerystring = {\"flnr\": flnr}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"flightera-flight-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Flightera Flight Data: flightSearch",
    "tool description": "Retrieves a list of flights for a specific flight number, with optional date filters to narrow results, ordered by departure date ascending, and includes the next departure time for pagination. This endpoint is part of Flightera's service, which provides flight status, on-time performance, and statistics. It leverages the parent tool's data to ensure accurate flight information retrieval, enforcing subscription-level date range restrictions to deliver reliable results.",
    "API name": "flightSearch",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool output is a JSON object that provides information about flights. In a successful case, it is expected to return a list of flight data, including status and performance statistics, ordered by departure date. In an error case, such as when the requested date is outside the user's subscription limits, it returns a JSON object with an 'Error' key and a descriptive message.",
      "output_format": "The output is a JSON object. The provided examples only illustrate the error format, which consists of a single key 'Error' with a string value. Based on the description, a successful response would likely contain a list of flight objects and a 'next_departure_time' key for pagination."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: flightInfo",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          },
          {
            "name": "date",
            "description": "The date, if omitted the current flight will be returned"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: flightStatistics",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          },
          {
            "name": "aptFrom",
            "description": "Departure airport ident"
          },
          {
            "name": "aptTo",
            "description": "Arrival airport ident"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportFlights",
        "connect params": [
          {
            "name": "ident",
            "description": "Ident of the airport to request"
          },
          {
            "name": "time",
            "description": "Timestamp in UTC"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Sun Seeker API",
    "parent tool description": "Get live solar position (azimuth and elevation) with a simple API request for given Latitude and Longitude\n",
    "required_parameters": [
      {
        "name": "lat",
        "type": "STRING",
        "description": "",
        "default": "37.788022"
      },
      {
        "name": "lon",
        "type": "STRING",
        "description": "",
        "default": "-122.399797"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://sun-seeker-api.p.rapidapi.com/sunposition\"\nquerystring = {\"lat\": lat, \"lon\": lon}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"sun-seeker-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Sun Seeker API: sunposition",
    "tool description": "Retrieves the live solar position (azimuth and elevation) for a given latitude and longitude. This endpoint utilizes solar positioning algorithms to calculate real-time azimuth and elevation angles, providing precise data for applications such as solar energy planning, astronomical tracking, and geospatial analysis, with inputs validated to ensure accuracy within global coordinates.",
    "API name": "sunposition",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output provides the live solar position relative to a specific geographic coordinate. It returns two key metrics: the azimuth, which represents the sun's compass direction, and the elevation, its angle above the horizon. This data is useful for applications like positioning solar panels, architectural design, or astronomical tracking.",
      "output_format": "The output is a single, non-nested JSON object containing two key-value pairs. The keys, 'azimuth' and 'elevation', correspond to floating-point number values. The output is not an array and does not involve pagination or cursoring."
    },
    "connected tools": [
      {
        "tool name": "WeatherAPI.com: Astronomy API",
        "connect params": [
          {
            "param_name": "q",
            "connection_type": "indirect",
            "description": "This tool provides complementary astronomical data (sunrise, sunset, moonrise, etc.) that could be used alongside sun position data"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Astronomy API",
        "connect params": [
          {
            "param_name": "q",
            "connection_type": "indirect",
            "description": "This tool provides complementary astronomical data that could be used alongside sun position data"
          },
          {
            "param_name": "date",
            "connection_type": "indirect",
            "description": "This tool provides complementary astronomical data that could be used alongside sun position data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "resume_key",
        "type": "STRING",
        "description": "Resume results from given ID.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of results from the response.",
        "default": 100
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/hotels/downloadChains\"\nquerystring = {\"resume_key\": \"\", \"limit\": 100}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Download chains",
    "tool description": "Retrieves a list of hotel chains. This endpoint is part of the Priceline.com platform, which enables users to search for hotels, car rentals, and flights. It provides a comprehensive database of hotel chains to support efficient travel planning and booking, allowing travelers to explore and compare accommodation options within the broader travel service ecosystem.",
    "API name": "Download chains",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool output provides a list of hotel chains available on the Priceline platform. Each entry in the list includes the chain's unique ID, its name, and its creation date and time. This data can be used to browse available hotel chains or to provide identifiers for more specific searches within the Priceline ecosystem.",
      "output_format": "The output is a deeply nested JSON object. The list of hotel chains is not a direct array but an object where keys are sequentially named (e.g., \"chain_0\", \"chain_1\") and the values are objects containing the individual chain's details. The presence of a `resume_key` in the `results` object indicates that the output is paginated using a cursor to retrieve subsequent sets of data."
    },
    "connected tools": [
      {
        "tool name": "Priceline com Provider: Hotel details",
        "connect params": [
          {
            "name": "hotel_id",
            "description": "The PPN Hotel ID identifying the desired property."
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Hotel photos",
        "connect params": [
          {
            "name": "hotel_ids",
            "description": "Comma separated string of PPN hotel ids (Semi Opaque Only)"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Hotel reviews",
        "connect params": [
          {
            "name": "hotel_id",
            "description": "The PPN Hotel ID identifying the desired property."
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Ski Resort Forecast",
    "parent tool description": "Forecast and current snow conditions for nearly every ski resort.  Perfect spelling of resort names is NOT required in most cases.",
    "required_parameters": [
      {
        "name": "resort",
        "type": "string",
        "description": "",
        "default": "Jackson Hole"
      }
    ],
    "optional_parameters": [
      {
        "name": "el",
        "type": "STRING",
        "description": "Specify a part of the mountain. Accepted values are 'top', 'mid', and 'bot'. Using this parameter improves response time.",
        "default": "top"
      },
      {
        "name": "units",
        "type": "STRING",
        "description": "Specify desired units. Accepted values are 'i' (imperial) and 'm' (metric). Using this parameter improves response time.",
        "default": "i"
      },
      {
        "name": "c",
        "type": "BOOLEAN",
        "description": "Limit result to current day only",
        "default": "false"
      }
    ],
    "code": "import requests\n\nurl = \"https://ski-resort-forecast.p.rapidapi.com/{resort}/hourly\"\nquerystring = {\"el\": el, \"units\": units, \"c\": c}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ski-resort-forecast.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Ski Resort Forecast: Hourly Forecast",
    "tool description": "Returns the hourly forecast for a given resort name, leveraging a comprehensive database of ski resorts to provide accurate snow condition updates. This is part of a service offering forecasts and current snow conditions for nearly every ski resort, with flexibility in resort name spelling to ensure accessibility and reliability.",
    "API name": "Hourly Forecast",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output provides a detailed hourly weather forecast for a specific ski resort. This forecast includes data points such as temperature, wind speed and direction, precipitation (snow and rain), humidity, wind chill, and the freeze level. The output may also contain basic information about the resort itself, including its name, region, and various lift elevations.",
      "output_format": "The output is a JSON object. It contains a primary key, \"forecast\", which holds an array of objects, with each object detailing the weather for a specific hour. All data values, including numerical ones like temperature and wind speed, are formatted as strings. The `minTemp` field was observed to be null in the examples, indicating it may be nullable. A second top-level key, \"basicInfo\", may also be present, containing metadata about the ski resort."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "The ski resort's latitude from basicInfo can be used for location-specific weather data"
          },
          {
            "name": "lon",
            "description": "The ski resort's longitude from basicInfo can be used for location-specific weather data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "The ski resort's latitude from basicInfo can be used for current weather conditions"
          },
          {
            "name": "lon",
            "description": "The ski resort's longitude from basicInfo can be used for current weather conditions"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "The ski resort's latitude from basicInfo can be used for daily forecasts"
          },
          {
            "name": "lon",
            "description": "The ski resort's longitude from basicInfo can be used for daily forecasts"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "description": "The ski resort's latitude from basicInfo can be used for hourly forecasts"
          },
          {
            "name": "longitude",
            "description": "The ski resort's longitude from basicInfo can be used for hourly forecasts"
          }
        ]
      },
      {
        "tool name": "Ski Resort Forecast: 5 Day Forecast",
        "connect params": [
          {
            "name": "resort",
            "description": "The resort name from basicInfo can be used to get a longer-term forecast"
          }
        ]
      },
      {
        "tool name": "Ski Resort Forecast: Current Snow Conditions",
        "connect params": [
          {
            "name": "resort",
            "description": "The resort name from basicInfo can be used to get current snow conditions"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "tool name": "Priceline com Provider: Hotel details",
    "tool description": "Provides detailed information on a specified hotel, including amenities, pricing, and availability. This endpoint leverages priceline.com's extensive travel database, allowing users to access comprehensive hotel data as part of a broader service that also includes search capabilities for rental cars and flights. The information retrieved can help travelers make informed accommodation decisions while planning their trips through this comprehensive travel booking platform.",
    "required_parameters": [
      {
        "name": "hotel_id",
        "type": "STRING",
        "description": "The PPN Hotel ID identifying the desired property.",
        "default": "700008849"
      }
    ],
    "optional_parameters": [
      {
        "name": "airport_limit",
        "type": "NUMBER",
        "description": "airport_limit",
        "default": ""
      },
      {
        "name": "check_in",
        "type": "STRING",
        "description": "Check In Date (YYYY-MM-DD or MM/DD/YYYY)",
        "default": ""
      },
      {
        "name": "promo",
        "type": "BOOLEAN",
        "description": "Toggle the hotels promo data on and off. By default, promo data is excluded in the response. To include promo data in the response, set promo to 1.",
        "default": true
      },
      {
        "name": "photos",
        "type": "BOOLEAN",
        "description": "Toggles photo data. By default, hotel photo data is excluded in the response. Valid Options: 0 = Off, 1 = On.",
        "default": "1"
      },
      {
        "name": "videos",
        "type": "BOOLEAN",
        "description": "Toggle videos. Valid Options: True or False",
        "default": true
      },
      {
        "name": "guest_score_breakdown",
        "type": "BOOLEAN",
        "description": "Toggle guest score breakdown on and off. Valid Options: True or False",
        "default": true
      },
      {
        "name": "reviews",
        "type": "BOOLEAN",
        "description": "Toggle hotel review data. By default, review data is excluded in the response. Valid Options: 0 = False, 1 = On.",
        "default": "1"
      },
      {
        "name": "city_limit",
        "type": "NUMBER",
        "description": "city_limit",
        "default": ""
      },
      {
        "name": "sid",
        "type": "STRING",
        "description": "Session ID. Random string",
        "default": "iSiX639"
      },
      {
        "name": "important_info",
        "type": "BOOLEAN",
        "description": "Toggles important info. Important info is extra details regarding the specified hotel. By default, important info is excluded in the response. Valid Options: 0 = Off, 1 = On.",
        "default": true
      },
      {
        "name": "recent",
        "type": "BOOLEAN",
        "description": "Toggle recent sales. Valid Options: True, False",
        "default": true
      },
      {
        "name": "poi_limit",
        "type": "NUMBER",
        "description": "poi_limit",
        "default": ""
      },
      {
        "name": "plugins",
        "type": "BOOLEAN",
        "description": "Provides extra information regarding plugins for the specified hotel. To include specific plugin information, include the ID of the plugin as a comma separated value to the plugins parameter.",
        "default": true
      },
      {
        "name": "image_size",
        "type": "STRING",
        "description": "The size of the image returned. Valid Options: small (60px), medium(300 to 312px) or large(500 to 800px)",
        "default": ""
      },
      {
        "name": "id_lookup",
        "type": "BOOLEAN",
        "description": "Allows non-PPN Hotel IDs to be searched in the database. Valid Options: True or False",
        "default": true
      },
      {
        "name": "check_out",
        "type": "STRING",
        "description": "Check In Date (YYYY-MM-DD or MM/DD/YYYY)",
        "default": ""
      },
      {
        "name": "currency",
        "type": "STRING",
        "description": "Requested currency for the results. ISO 4217 format.",
        "default": ""
      },
      {
        "name": "nearby",
        "type": "BOOLEAN",
        "description": "Toggles nearby data. Nearby data is extra information regarding the specified hotel s location. Nearby data can include city_data, airport_data, and poi_category_data. By default, nearby data is excluded from the response. To include nearby data, set nearby to 1. To include city_data within nearby data, include a city_limit parameter to a value greater than 1. To include airport_data within nearby data, include a airport_limit parameter to a value greater than 1. To include poi_category_data within nearby data, include a poi_limit parameter to a value greater than 1.",
        "default": true
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/hotels/details\"\nquerystring = {\"airport_limit\": \"\", \"check_in\": \"\", \"promo\": true, \"photos\": \"1\", \"videos\": true, \"guest_score_breakdown\": true, \"reviews\": \"1\", \"city_limit\": \"\", \"sid\": \"iSiX639\", \"important_info\": true, \"hotel_id\": \"700008849\", \"recent\": true, \"poi_limit\": \"\", \"plugins\": true, \"image_size\": \"\", \"id_lookup\": true, \"check_out\": \"\", \"currency\": \"\", \"nearby\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Hotel details",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive profile for a single, specified hotel. This profile includes the hotel's name, address, star rating, user review scores, and geographic coordinates. It also provides various booking URLs, image thumbnails, and operational details like check-in/check-out times, intended to give a user a complete picture of the property to aid in their travel planning.",
      "output_format": "The output is a deeply nested JSON object. The primary hotel details are located under the path `getHotelHotelDetails.results.hotel_data`. The hotel data itself is contained within a key-value pair (e.g., 'hotel_0': {...}), suggesting a dictionary that holds the hotel object. Many attributes, such as `address`, `geo`, `hotel_chain`, and `thumbnail_hq`, are structured as nested objects. Some fields can be null."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "The hotel's location can be used as a destination for trip planning"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the hotel's latitude coordinate"
          },
          {
            "name": "lng",
            "description": "Can use the hotel's longitude coordinate"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the hotel's latitude coordinate"
          },
          {
            "name": "lng",
            "description": "Can use the hotel's longitude coordinate"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations by geolocation",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the hotel's latitude coordinate"
          },
          {
            "name": "longitude",
            "description": "Can use the hotel's longitude coordinate"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "RapidWeather",
    "parent tool description": "The proprietary convolutional neural network collects and processes wide range of data sources to cover any location and consider the local nuances of climate.\n\nWe collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations.\n\nFor each point on the globe, RapidWeather provides historical, current and forecasted weather data via light-speed APIs.",
    "required_parameters": [
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "Geographical coordinates (latitude, longitude)",
        "default": "51.5098"
      },
      {
        "name": "lon",
        "type": "NUMBER",
        "description": "Geographical coordinates (latitude, longitude)",
        "default": "-0.1180"
      }
    ],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Number of the location names in the API response (several results can be returned in the API response)",
        "default": "5"
      }
    ],
    "code": "import requests\n\nurl = \"https://rapidweather.p.rapidapi.com/geo/1.0/reverse\"\nquerystring = {\"lat\": lat, \"lon\": lon, \"limit\": limit}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"rapidweather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "RapidWeather: Reverse geocoding",
    "tool description": "Reverse geocoding to retrieve location names (city or area) using geographical coordinates (lat, lon), with a limit parameter to control the number of results. This uses a proprietary convolutional neural network that processes a wide range of data sources, including global and local weather models, satellites, radars, and a vast network of weather stations, to ensure accurate location identification and account for local climate nuances, enhancing the precision of location-based weather services.",
    "API name": "Reverse geocoding",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output is a list of location objects that match a given set of geographical coordinates. Each object contains the location's primary name (typically in English), a nested object of localized names in various languages, the precise latitude and longitude, a two-letter country code, and an optional state/region. This information is primarily used to identify a human-readable place name from a lat/lon pair.",
      "output_format": "The output is a JSON string that deserializes into an array of objects, where each object represents a single location. The `state` key within a location object appears to be optional, as it is not present in all examples. The `local_names` key contains a nested JSON object mapping language codes to translated location names."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use location ID from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get the forecast",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get current weather",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get hourly forecast",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get wind speed",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get humidty",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from reverse geocoding output"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from reverse geocoding output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "AI Weather by Meteosource",
    "parent tool description": "Accurate hyper-local weather forecasts, powered by our cutting-edge machine learning (ML) models. Historical weather, current weather, weather statistics , and hour-by-hour forecast - all weather data updated in real-time!",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "place_id",
        "type": "STRING",
        "description": "Identifier of a place. To obtain the `place_id` for the location you want, please use `Location endpoints`. **Alternatively, you can specify the location by parameters `lat` and `lon`.**",
        "default": ""
      },
      {
        "name": "lat",
        "type": "STRING",
        "description": "Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4. **Alternatively, you can specify the location by parameter `place_id`.**",
        "default": "45.74846"
      },
      {
        "name": "lon",
        "type": "STRING",
        "description": "Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4. **Alternatively, you can specify the location by parameter `place_id`.**",
        "default": "4.84671"
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "The language of text summaries (variable names are never translated). Available languages are:\n\n- `en`: English\n- `es`: Spanish\n- `fr`: French\n- `de`: German\n- `pl`: Polish\n- `cs`: Czech\n",
        "default": "en"
      },
      {
        "name": "timezone",
        "type": "STRING",
        "description": "Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value `auto` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).\n",
        "default": "auto"
      }
    ],
    "code": "import requests\n\nurl = \"https://ai-weather-by-meteosource.p.rapidapi.com/alerts\"\nquerystring = {\"lat\": lat, \"lon\": lon, \"language\": language, \"timezone\": timezone}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ai-weather-by-meteosource.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "AI Weather by Meteosource: alerts",
    "tool description": "Generates severe weather alerts for the USA, Europe, and Canada based on user-defined locations using GPS coordinates or `place_id` from Location endpoints. This leverages the parent tool's hyper-local weather forecasting capabilities, powered by cutting-edge machine learning models and real-time weather data, to deliver precise, actionable alerts tailored to specific geographic areas and conditions.",
    "API name": "alerts",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output is a list of severe weather alerts for a given location. Each alert includes the event type, its effective and expiration times, the issuing authority, its severity and certainty, a headline, and a detailed description of the hazard and recommended precautions. The response also echoes the location information (latitude, longitude, elevation, timezone) for which the alerts were generated.",
      "output_format": "The output is a JSON object. A successful response contains top-level location keys and a nested 'alerts' object. This object contains a 'data' key, which holds an array of individual alert objects. An error response is a JSON object with a 'detail' key explaining the error."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          },
          {
            "name": "timezone",
            "description": "Can use timezone from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          },
          {
            "name": "timezone",
            "description": "Can use timezone from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          },
          {
            "name": "timezone",
            "description": "Can use timezone from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          },
          {
            "name": "timezone",
            "description": "Can use timezone from alerts response location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from alerts response location data"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from alerts response location data"
          }
        ]
      },
      {
        "tool name": "National Weather Service: /alerts?{parameters}",
        "connect params": [
          {
            "name": "point",
            "description": "Can use latitude,longitude from alerts response location data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mboum Finance",
    "parent tool description": "Mboum Finance Official API for stocks, options, ETFs, mutual funds, SEC Data, news, screeners and more! ",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "A single symbol",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mboum-finance.p.rapidapi.com/qu/quote/insider-transactions\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mboum-finance.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Mboum Finance: stock/insider-transactions/{stock}",
    "tool description": "Retrieves historical insider transaction data for stocks. This endpoint is part of the Mboum Finance Official API, which provides comprehensive financial data including stocks, options, ETFs, mutual funds, SEC filings, news, and screeners. By accessing real-time SEC filings, it enables users to track insider trading activities, offering insights into corporate governance and potential market trends.",
    "API name": "stock/insider-transactions/{stock}",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool retrieves a list of historical insider transactions for a specified stock ticker. Each transaction in the list includes details about the insider, such as their name and relationship to the company, the transaction date, and the number of shares involved. The output also provides the total value of the transaction and a text description of the transaction type (e.g., sale, stock grant). This data is useful for monitoring the activities of corporate executives and directors.",
      "output_format": "The output is a single JSON object containing a `body` key. Inside `body`, there is a `transactions` key, which holds an array of transaction objects. Each transaction object contains nested objects for `shares`, `value`, and `startDate`, providing both raw and formatted representations of the data. Some fields, like `value.fmt` or `filerUrl`, can be null or empty."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The name of the equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_WEEKLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The name of the equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_INTRADAY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_MONTHLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The name of the security of your choice. For example: symbol=MSFT"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: search",
        "connect params": [
          {
            "name": "symbol",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/calendar-events/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/income-statement/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/index-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/institution-ownership/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/net-share-purchase-activity/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/upgrade-downgrade-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/recommendation-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/sec-filings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-holders/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/balance-sheet/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: options/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: News Sentiment Data",
        "connect params": [
          {
            "name": "ticker",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Most Negative News",
        "connect params": [
          {
            "name": "ticker",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Market Data",
        "connect params": [
          {
            "name": "ticker",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-holders",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/upgrade-downgrade-history",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-transactions",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/index-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/calendar-events",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/recommendation-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/net-share-purchase-activity",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/institution-ownership",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/sec-filings",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/earnings",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Yahoo Finance_v2",
    "parent tool description": "Yahoo Finance API for stocks, options, ETFs, mutual funds and news. Moved to: https://rapidapi.com/sparior/api/mboum-finance",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "start",
        "type": "NUMBER",
        "description": "Enter a start index",
        "default": "0"
      }
    ],
    "code": "import requests\n\nurl = \"https://yahoo-finance15.p.rapidapi.com/api/yahoo/co/collections/undervalued_growth_stocks\"\nquerystring = {\"start\": \"0\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"yahoo-finance15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Yahoo Finance_v2: market/undervalued_growth_stocks",
    "tool description": "Identifies stocks with earnings growth rates above 25% and relatively low PE/PEG ratios. This endpoint leverages the Yahoo Finance API's extensive financial data repository, including stock metrics, options, ETFs, and market news, to filter and surface undervalued equities with strong growth potential. By analyzing real-time market data and historical financials, it helps investors pinpoint opportunities where high earnings growth aligns with favorable valuation metrics.",
    "API name": "market/undervalued_growth_stocks",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a list of stocks identified as having high growth potential (earnings growth > 25%) and being undervalued (low PE/PEG ratios). For each stock, the output provides a comprehensive set of financial data, including company identifiers, current market price, historical price ranges (52-week high/low), key financial ratios (P/E, EPS), and analyst ratings. This information is intended to help investors discover and evaluate potential investment opportunities.",
      "output_format": "The output is a JSON object containing a `meta` object and a `body` array. The `meta` object provides information about the request, including pagination details (`offset`, `count`, `total`). The `body` array contains a list of JSON objects, where each object represents a single stock and its detailed financial metrics. The examples provided appear to be truncated."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get real-time quotes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get daily time series data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get detailed company profiles"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get detailed financial data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get key statistics"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get time series data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Bybit",
    "parent tool description": "Public Data Bybit. Cryptocurrency prices and charts. Derivatives, Futures, Spot, USDC Contract",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Symbol",
        "default": "BTCUSD"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://bybit4.p.rapidapi.com/v2/public/orderBook/L2\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"bybit4.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Bybit: Order Book",
    "tool description": "Retrieves the orderbook for cryptocurrency trading pairs with a depth of 25 levels on each side, providing detailed buy and sell order information. This endpoint is part of Bybit's Public Data service, which offers cryptocurrency prices, charts, and market data across derivatives, futures, spot trading, and USDC contracts, enabling traders to analyze market liquidity and make informed decisions based on real-time order flow.",
    "API name": "Order Book",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool retrieves the current order book for a given cryptocurrency trading pair from the Bybit exchange. The output lists the top 25 buy orders (bids) and the top 25 sell orders (asks). For each price level, it provides the total size of orders, allowing traders to assess market depth, liquidity, and potential support/resistance levels.",
      "output_format": "A successful response is a JSON object containing a 'result' key, which is a list of individual order objects. Each object in the list specifies the 'symbol', 'price' (as a string), 'side' ('Buy' or 'Sell'), and 'size'. Error conditions or cases where the data is not found may return a simple, non-JSON string like 'Not Found' or an empty string."
    },
    "connected tools": [
      {
        "tool name": "Bybit: Merged Order Book",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book data can be used to query a merged order book for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Open Interest",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query open interest for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Funding Rate History",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query funding rate history for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Index Price Kline",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query index price kline for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Mark Price Kline",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query mark price kline for the same symbol"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains cryptocurrency trading pair information that can be used to query time series data for the same symbol"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Easy Weather",
    "parent tool description": "Detailed current conditions, hourly forecasts, daily forecasts, and weather alerts by latitude and longitude in JSON format.",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "STRING",
        "description": "",
        "default": "103.86"
      },
      {
        "name": "latitude",
        "type": "STRING",
        "description": "",
        "default": "1.28"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://easy-weather1.p.rapidapi.com/daily/5\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"easy-weather1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Easy Weather: Daily forecast (5 days)",
    "tool description": "Generates a 5-day daily weather forecast based on the provided latitude and longitude. This endpoint is part of a comprehensive weather service that delivers detailed current conditions, hourly forecasts, daily forecasts, and alerts in JSON format, leveraging real-time meteorological data to enable precise, location-specific planning and decision-making.",
    "API name": "Daily forecast (5 days)",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool provides a 5-day weather forecast for a given geographical coordinate. The output is a JSON object containing metadata and a `forecastDaily` object, which holds an array of daily forecast data. Each daily forecast includes a summary with min/max temperatures, UV index, and precipitation details. It is further broken down into more granular `daytimeForecast` and `overnightForecast` objects, which provide specifics like cloud cover, humidity, and wind conditions.",
      "output_format": "The output is a single, non-paginated JSON object. The core forecast data is located in the `forecastDaily.days` key, which is an array of objects, one for each of the 5 forecast days. Each daily forecast object contains two further nested objects, `daytimeForecast` and `overnightForecast`, detailing conditions for those periods. All timestamps are in ISO 8601 format."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "RapidWeather",
    "parent tool description": "The proprietary convolutional neural network collects and processes wide range of data sources to cover any location and consider the local nuances of climate.\n\nWe collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations.\n\nFor each point on the globe, RapidWeather provides historical, current and forecasted weather data via light-speed APIs.",
    "required_parameters": [
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "",
        "default": "50"
      },
      {
        "name": "lon",
        "type": "NUMBER",
        "description": "",
        "default": "50"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://rapidweather.p.rapidapi.com/data/2.5/air_pollution/forecast\"\nquerystring = {\"lat\": lat, \"lon\": lon}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"rapidweather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "RapidWeather: Forecast air pollution data",
    "tool description": "Generates 5-day air pollution forecasts with hourly data on pollutants like Carbon monoxide (CO), Nitrogen dioxide (NO2), PM2.5, and Ozone (O3), leveraging historical data from 27th November 2020. This uses a proprietary convolutional neural network that integrates global and local weather models, satellite imagery, radar systems, and a network of weather stations to process diverse data sources, ensuring accurate localized predictions by accounting for regional climate nuances.",
    "API name": "Forecast air pollution data",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool provides a 5-day air pollution forecast for a given latitude and longitude. The output contains a list of hourly data points, where each point includes the Air Quality Index (AQI) and the concentration of various pollutants like Carbon monoxide (CO), Nitrogen dioxide (NO2), PM2.5, and Ozone (O3). This information is intended for detailed, localized air quality monitoring and analysis.",
      "output_format": "The output is a single JSON object. The core data is within a top-level key named 'list', which contains a JSON array of objects, each representing an hourly forecast. Each object in the array contains a Unix timestamp ('dt'), the AQI (nested under 'main'), and a 'components' object with detailed pollutant concentrations. There is no pagination; the full forecast appears to be returned in one response."
    },
    "connected tools": [
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's input"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's input"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's input"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's input"
          }
        ]
      },
      {
        "tool name": "Air Quality: Current Air Quality",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's input"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's input"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Current air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's input"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's input"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Historical air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's input"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's input"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard API_v2",
    "parent tool description": "Billboard charts API: Weekly Billboard Hot 100, Weekly Billboard 200, Weekly Artist 100, Weekly Billboard Weekly Global 200, Weekly Catalog Albums, Weekly Independent Albums, Weekly Billboard U.S. Afrobeats Songs. Year End Hot 100 Songs, Year End Billboard 200 Albums, Year End Billboard  Global 200, Year End Top Artists, Year End Top Artists \u2013 Duo/Group, Year End Top Labels, Year End Top New Artists, Year End Top Artists \u2013 Male, Year End Top Artists \u2013 Female. \nAll Greatest of All Time Charts....",
    "tool name": "Billboard API_v2: Catalog Albums",
    "tool description": "Retrieves the weekly Billboard U.S. Afrobeats Songs chart data, defaulting to the most recent week if no date is specified. If a date is provided but isn't a Saturday, the system automatically adjusts to the Saturday of that week. This endpoint is part of the comprehensive Billboard charts API, which provides access to a wide range of music industry rankings including the Hot 100, Billboard 200, Artist 100, Global 200, and various specialized charts like Catalog Albums and Independent Albums, along with year-end rankings across multiple categories and Greatest of All Time charts.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "week",
        "type": "DATE (YYYY-MM-DD)",
        "description": "",
        "default": "2022-10-08"
      }
    ],
    "code": "import requests\n\nurl = \"https://billboard-api5.p.rapidapi.com/api/charts/catalog-albums\"\nquerystring = {\"week\": \"2022-10-08\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api5.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Catalog Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides weekly chart data for Billboard's Catalog Albums. For a given week, it returns a ranked list of albums, including the album's title, artist, current rank, peak position, last week's position, and total weeks on the chart. The output also contains the specific chart week's date and navigation links to the previous and next week's charts.",
      "output_format": "The output is a single, nested JSON object. The primary data is a JSON array located at `chart.entries`. Each object within this array represents a single album on the chart. The `position.positionLastWeek` field can be null, likely indicating the album was not on the chart the previous week."
    },
    "connected tools": [
      {
        "tool name": "Billboard: Billboard 200",
        "connect params": [
          {
            "param_name": "date",
            "description": "Can use the chart week date from Catalog Albums to view Billboard 200 from the same time period"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use album titles or artist names from Catalog Albums to search on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "param_name": "query",
            "description": "Can use album titles or artist names from Catalog Albums to search on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/ht_phasor\"\nquerystring = {\"format\": \"json\", \"series_type\": \"close\", \"symbol\": \"AAPL\", \"outputsize\": 30, \"interval\": \"1min\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: HT_PHASOR",
    "tool description": "Extracts phasor components from financial time series data to identify phase and amplitude characteristics of market trends. This endpoint leverages the Hilbert Transform algorithm, as detailed in *Rocket Science for Traders* by John F. Ehlers, to analyze real-time and historical financial data (stocks, forex, crypto, ETFs, indices) provided by the parent tool, enabling advanced technical analysis for pattern recognition and market forecasting.",
    "API name": "HT_PHASOR",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns Hilbert Transform Phasor Components for a specified financial instrument. The output includes metadata about the symbol, interval, and indicator used, followed by a time-series array of values. Each value in the series provides a timestamp along with its corresponding 'in_phase' and 'quadrature' components, which are used in advanced technical analysis to identify market cycles and trends.",
      "output_format": "The output is a single JSON object with two main keys: 'meta' (an object) and 'values' (an array of objects). The 'values' array contains the time-series data, sorted in reverse chronological order. Numeric values for the phasor components ('in_phase', 'quadrature') are formatted as strings. The fields within the 'meta' object may vary slightly depending on the type of financial asset being analyzed (e.g., stock vs. forex pair). No pagination or cursoring is evident in the examples."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the HT_PHASOR output can be used to query the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: HT_SINE",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the HT_PHASOR output can be used to analyze the same instrument with HT_SINE"
          }
        ]
      },
      {
        "tool name": "Twelve Data: HT_TRENDMODE",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the HT_PHASOR output can be used to analyze trend components of the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: HT_DCPERIOD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the HT_PHASOR output can be used to calculate dominant cycle period"
          }
        ]
      },
      {
        "tool name": "Twelve Data: HT_DCPHASE",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the HT_PHASOR output can be used to calculate dominant cycle phase"
          }
        ]
      },
      {
        "tool name": "Twelve Data: HT_TRENDLINE",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the HT_PHASOR output can be used to extract trendlines for the same instrument"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Realtime Crypto Prices",
    "parent tool description": "Get the Fastest and Realtime Crypto Rates and more...",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "",
        "default": "BTC"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://realtime-crypto-prices.p.rapidapi.com/liquidity\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"realtime-crypto-prices.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Realtime Crypto Prices: Get Liquidity Value",
    "tool description": "Returns the liquidity value of a cryptocurrency coin in US Dollars. This endpoint leverages real-time market data to provide instant liquidity insights, enhancing the parent tool's capability to deliver fast and accurate crypto rate information, enabling users to make informed trading decisions.",
    "API name": "Get Liquidity Value",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output provides the liquidity value for a specific cryptocurrency. For a given coin symbol, it returns the raw liquidity value as a large integer and a corresponding human-readable string formatted in millions of US dollars (e.g., '$ 814.76M'). This information is designed to help users quickly assess market depth and make informed trading decisions.",
      "output_format": "The output is a single, non-nested JSON object. The examples are provided as strings but represent a standard key-value object structure. There is no evidence of arrays, pagination, or cursoring."
    },
    "connected tools": [
      {
        "tool name": "Realtime Crypto Prices: Get Realtime Volume",
        "connect params": [
          {
            "name": "symbol",
            "description": "The liquidity data can be used alongside volume data for the same cryptocurrency to provide a more complete market depth analysis"
          }
        ]
      },
      {
        "tool name": "Realtime Crypto Prices: Market Capitalization",
        "connect params": [
          {
            "name": "symbol",
            "description": "The liquidity data can be compared with market cap for the same cryptocurrency to assess liquidity ratio"
          }
        ]
      },
      {
        "tool name": "Realtime Crypto Prices: Get Realtime Rates",
        "connect params": [
          {
            "name": "symbol",
            "description": "The liquidity data can be used alongside price data to evaluate trading impact and market depth"
          }
        ]
      },
      {
        "tool name": "Binance Futures Leaderboard: search_leaderboard",
        "connect params": [
          {
            "name": "tradeType",
            "description": "Liquidity data can inform which cryptocurrency markets have sufficient depth for trading analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Cryptocurrencies List",
        "connect params": [
          {
            "name": "currency_base",
            "description": "Liquidity data can help filter cryptocurrency lists to focus on those with adequate market depth"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/disposableDomain\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
    "tool description": "Checks if a domain is disposable and provides a suggested domain. This is part of APISOLUTION's comprehensive API for email validation and verification, leveraging its database of verified email domains to ensure reliability and accuracy, helping developers and startups streamline email address validation and reduce errors in communication.",
    "API name": "disposable Domain and Suggest Domain",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object with two main pieces of information about a given email domain. The 'IsDisposable' key provides a human-readable sentence indicating whether the domain is a temporary, disposable one. The 'suggestion' key provides a sentence either suggesting a correction for a likely misspelled domain or confirming that no misspellings were found. This helps developers validate email addresses to ensure they are from legitimate, non-temporary domains.",
      "output_format": "The output is a single, flat JSON object. The provided examples are string representations of a dictionary (using single quotes), but the actual output is assumed to be a standard JSON object. Both the 'IsDisposable' and 'suggestion' keys contain string values which are full, human-readable sentences, not booleans or simple keywords."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the domain suggestion to correct potentially misspelled email domains"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the domain suggestion to correct potentially misspelled email domains"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the domain suggestion to correct potentially misspelled email domains"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the disposable domain information to validate if a domain is disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Cities Cost of Living",
    "parent tool description": "Get detailed information about the living expenses of 650+ cities around the world.",
    "tool name": "Cities Cost of Living: Get Cities List",
    "tool description": "Retrieves a comprehensive list of all available cities in the database. This endpoint taps into a global dataset covering over 650 cities worldwide, providing access to the complete catalog of locations for which detailed living expense information is available. The parent service offers extensive cost-of-living data that helps users compare and understand financial requirements across different urban centers globally.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://cities-cost-of-living1.p.rapidapi.com/get_cities_list\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"cities-cost-of-living1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Cities List",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a list of cities and their corresponding countries from a global database. This list serves as a comprehensive catalog of all locations for which the parent service can provide detailed cost-of-living information. Users can utilize this output to discover which cities are available for more specific data queries.",
      "output_format": "The output is a JSON object containing a single key, \"cities\". The value associated with this key is an array of objects. Each object in the array represents a single city and has two string fields: \"country\" and \"name\". The examples provided appear to be truncated, suggesting the full response contains a large number of cities."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use city and country from the cities list as destination"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "Can use city name from the cities list as market"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "Can use city name from the cities list as market"
          }
        ]
      },
      {
        "tool name": "Deutsche Bahn: Autocomplete",
        "connect params": [
          {
            "name": "query",
            "description": "Can use city name from the cities list as query"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Auto Suggest",
        "connect params": [
          {
            "name": "string",
            "description": "Can use city name from the cities list as search string"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Auto complete",
        "connect params": [
          {
            "name": "string",
            "description": "Can use city name from the cities list as search string"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations",
        "connect params": [
          {
            "name": "name",
            "description": "Can use city name from the cities list as name"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search cars locations",
        "connect params": [
          {
            "name": "name",
            "description": "Can use city name from the cities list as name"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/avgprice\"\nquerystring = {\"outputsize\": 30, \"interval\": \"1min\", \"symbol\": \"AAPL\", \"format\": \"json\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: AVGPRICE",
    "tool description": "Calculates the average price using the formula (open + high + low + close) / 4. This endpoint is part of a financial data platform offering real-time and historical data for stocks, forex, crypto, ETFs, and indices, empowering developers to access comprehensive market insights for analysis and application development.",
    "API name": "AVGPRICE",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides historical time-series data for the average price of a financial instrument, such as a stock, forex pair, or cryptocurrency. The output consists of metadata about the requested symbol and interval, and a list of data points. Each data point includes a specific datetime and the corresponding average price, calculated as (open + high + low + close) / 4, for that period.",
      "output_format": "The output is a single JSON object containing two main keys: `meta` and `values`. `meta` is an object holding metadata about the query, like the symbol, interval, and currency. `values` is a JSON array of objects, sorted in reverse chronological order. Each object in the array represents a single time period and contains a `datetime` (string) and an `avgprice` (a string-encoded number)."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: ADD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output contains financial instrument data that can be used as the symbol input for ADD calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: DIV",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output provides financial instrument data that can be used as the symbol input for DIV calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MULT",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output contains financial instrument data that can be used as the symbol input for MULT calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUB",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output provides financial instrument data that can be used as the symbol input for SUB calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: CORREL",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output contains financial instrument data that can be used as the symbol input for correlation analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BETA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output provides financial instrument data that can be used as the symbol input for beta calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output contains financial instrument data that can be used as the symbol input for SMA calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output provides financial instrument data that can be used as the symbol input for EMA calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: WMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output contains financial instrument data that can be used as the symbol input for WMA calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output provides financial instrument data that can be used as the symbol input for RSI calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output contains financial instrument data that can be used as the symbol input for MACD calculations"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The AVGPRICE output provides financial instrument data that can be used as the symbol input for Bollinger Bands calculations"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Playlist extraction",
    "tool description": "Produces information on all songs in a playlist from YouTube, Spotify, SoundCloud, and other platforms, with exceptionally fast response times (O(1) for YouTube, O(log n) for Spotify and SoundCloud). This endpoint leverages a multipurpose API that handles various image, video, and audio operations, using an efficient algorithm for YouTube playlists that's documented in their technical article. The service provides comprehensive song data retrieval that outperforms most comparable tools in speed and efficiency while being part of a broader media processing ecosystem.",
    "required_parameters": [
      {
        "name": "search",
        "type": "STRING",
        "description": "",
        "default": "https://www.youtube.com/playlist?list=PLXFwTY00FRUUZzL_Vjhy-bE8WIao3eyOi"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": search}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Playlist extraction",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool extracts and provides information about all the songs within a given playlist from various platforms. For each song, it returns the name, a direct URL, and the duration in seconds. This output is intended to be used for displaying playlist contents, calculating total duration, or for further processing of individual tracks. The tool can also return structured error messages in cases of failure, such as API timeouts.",
      "output_format": "The successful output is a string containing a JSON array of objects. Each object represents a song and contains 'name' (string), 'url' (string), and 'duration' (integer) keys. Error responses are formatted as a string containing a JSON object detailing the error. One provided example is raw binary data for a JPEG image, which suggests the tool might return non-JSON data under certain un-documented conditions, possibly for errors or captchas. The provided examples show truncated data, but there is no explicit information on pagination or cursoring."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use the 'url' field from individual songs in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use the 'url' field from the first song in the playlist extraction output"
          },
          {
            "name": "u2",
            "description": "Can use the 'url' field from the second song in the playlist extraction output"
          },
          {
            "name": "u3",
            "description": "Can use the 'url' field from the third song in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use the 'name' field from individual songs in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use the 'name' field from individual songs in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use the 'name' field from individual songs in the playlist extraction output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/tema\"\nquerystring = {\"format\": \"json\", \"outputsize\": 30, \"interval\": \"1min\", \"time_period\": 9, \"symbol\": \"AAPL\", \"series_type\": \"close\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: TEMA",
    "tool description": "Calculates the Triple Exponential Moving Average (TEMA) to identify trend directions in financial data, using historical price inputs. This endpoint leverages the parent tool's comprehensive financial data API, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, enabling developers to analyze market trends with reduced lag compared to traditional moving averages while enhancing trend detection accuracy through advanced statistical processing.",
    "API name": "TEMA",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a time series of Triple Exponential Moving Average (TEMA) values for a specified financial symbol. This data is used in technical analysis to identify market trends. The output also includes comprehensive metadata about the symbol (e.g., type, exchange, currency) and the specific parameters used for the TEMA calculation (e.g., time period, interval).",
      "output_format": "The output is a single JSON object with two main keys: `meta` and `values`. The `meta` key contains an object with descriptive information about the query and the financial instrument. The `values` key contains a JSON array of objects, each representing a data point in the time series with a `datetime` and the calculated `tema` value. The TEMA value is represented as a string."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The TEMA output contains symbol information that can be used to query the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to retrieve time series data for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate MACD for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate RSI for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate Bollinger Bands for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate SMA for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate EMA for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate Stochastic Oscillator for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ADX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate ADX for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to retrieve financial data for the same asset"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Alpha Vantage",
    "parent tool description": "The simplest and most effective way to receive stock, ETF, forex, technical indicators, and cryptocurrency data.  Constantly ranked as a leading API provider for ease of use, accuracy, and price. [See the documentation](https://www.alphavantage.co/documentation/) and [read more](https://medium.com/@patrick.collins_58673/stock-api-landscape-5c6e054ee631) on the market data industry.  [Start now for free](https://www.alphavantage.co/support/#api-key).",
    "required_parameters": [
      {
        "name": "from_symbol",
        "type": "STRING",
        "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR",
        "default": "EUR"
      },
      {
        "name": "to_symbol",
        "type": "STRING",
        "description": "A three-letter symbol from the forex currency list. For example: from_symbol=USD",
        "default": "USD"
      },
      {
        "name": "function",
        "type": "STRING",
        "description": "The time series of your choice.",
        "default": "FX_MONTHLY"
      }
    ],
    "optional_parameters": [
      {
        "name": "datatype",
        "type": "STRING",
        "description": "By default, datatype=json. Strings json and csv are accepted with the following specifications: json returns the monthly time series in JSON format; csv returns the time series as a CSV (comma separated value) file.",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://alpha-vantage.p.rapidapi.com/query\"\nquerystring = {\"from_symbol\": from_symbol, \"datatype\": datatype, \"to_symbol\": to_symbol, \"function\": function}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"alpha-vantage.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Alpha Vantage: FX_MONTHLY",
    "tool description": "Returns the monthly time series (timestamp, open, high, low, close) for a specified FX currency pair, updated in real-time. This endpoint is part of a leading financial data platform that provides stock, ETF, forex, technical indicators, and cryptocurrency data. Leveraging real-time market feeds and a comprehensive database, it delivers accurate, up-to-date information to support informed decision-making, consistently ranked for ease of use, reliability, and competitive pricing.",
    "API name": "FX_MONTHLY",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides historical monthly time series data for a specified foreign exchange (FX) currency pair. The output includes the open, high, low, and close (OHLC) prices for each month. It also contains metadata detailing the currency symbols, the last refresh date, and the time zone, which is useful for financial analysis and tracking long-term currency trends.",
      "output_format": "The output is a JSON object with two primary keys: 'Meta Data' and 'Time Series FX (Monthly)'. The 'Time Series FX (Monthly)' value is an object where each key is a date string (YYYY-MM-DD) representing a specific month. The corresponding value is another nested object containing the open, high, low, and close prices for that month. All numerical price values are represented as strings."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: FX_DAILY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: to_symbol=USD"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_WEEKLY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: to_symbol=USD"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_INTRADAY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: to_symbol=USD"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: CURRENCY_EXCHANGE_RATE (Crypto)",
        "connect params": [
          {
            "name": "from_currency",
            "description": "The cryptocurrency you want to convert from"
          },
          {
            "name": "to_currency",
            "description": "The currency you want to convert to"
          }
        ]
      },
      {
        "tool name": "Exchange Rate API: Convert currency",
        "connect params": [
          {
            "name": "base",
            "description": "The three-letter currency code of the currency you would like to convert from."
          },
          {
            "name": "target",
            "description": "The three-letter currency code of the currency you would like to convert to."
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: Role Account",
    "tool description": "Checks the rols account associated with your domain, allowing you to verify domain-specific email configurations. This endpoint leverages APISOLUTION's comprehensive email validation and verification API, designed for developers working on start-ups and staff projects who need fast, reliable email infrastructure assessment.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/IsRoleAccount\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Role Account",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "This tool checks if a given email domain is classified as a \"RoleAccount domain\". Based on the examples, this appears to identify common free email providers (like gmail.com, yahoo.com) and distinguish them from what are presumably corporate or organizational domains. The output is a simple statement confirming the result of the check, or a \"Not Found\" message if the domain cannot be processed or is invalid.",
      "output_format": "The output format is inconsistent. A successful lookup returns a string that represents a single key-value pair, similar to a Python dictionary (`{'RoleAccount': '...'}`). An error or a case where the domain is not found returns a simple plain text string ('Not Found\\n'). The output is not serialized as a standard JSON object and is not nested or paginated."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain classification can be used to check if it's disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "ALL Crypto News Feed",
    "parent tool description": "All news about crypto. Tweets, listing news, .gov announcements, blogs etc.",
    "tool name": "ALL Crypto News Feed: Get Blogs Feed",
    "tool description": "Returns a feed of crypto-related blog posts from various sources. This endpoint is part of a comprehensive crypto news aggregation service that collects and organizes diverse information including tweets, exchange listing announcements, government regulatory updates, and blog content from across the cryptocurrency ecosystem, providing users with a centralized source for staying informed about developments in the crypto space.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://all-crypto-news-feed.p.rapidapi.com/get_blogs_feed\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"all-crypto-news-feed.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get Blogs Feed",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool provides a feed of recent, crypto-related blog posts aggregated from multiple sources. Each entry in the feed includes the article's title, a direct URL, publication time, and social engagement metrics like likes and dislikes. Additionally, if the article mentions specific cryptocurrencies, the output includes associated coin symbols and exchange listing information.",
      "output_format": "The output is a string containing a JSON array of objects. Each object represents a single blog post. Some fields, like 'firstPrice' and 'suggestions', appear to be conditional and are not present in every object. The 'time' field is a numerical Unix timestamp, likely in milliseconds."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could use cryptocurrency symbols or names from the blog feed as search terms"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could search for movies related to cryptocurrencies mentioned in the blog feed"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Could use cryptocurrency symbols or names from the blog feed as keywords"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Gas Price",
    "parent tool description": "Reach gasoline and diesel prices in different fuel stations in different cities.",
    "tool name": "Gas Price: canada",
    "tool description": "Retrieves current gasoline prices across Canada. This service provides access to up-to-date fuel pricing information from various gas stations throughout Canadian cities, allowing users to compare both gasoline and diesel prices between different fuel retailers and locations. The data helps consumers make informed decisions about where to purchase fuel based on current market rates in their area.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://gas-price.p.rapidapi.com/canada\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"gas-price.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "canada",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of Canadian provinces and their current average gasoline prices. Each entry in the list specifies the province's name and the price of gasoline in USD. This information is intended to help users compare fuel costs across different regions in Canada.",
      "output_format": "The output is a JSON object with a 'result' key that contains an array of objects. Each object in the array represents a province and its gasoline price. The price is formatted as a string rather than a number. There is no evidence of pagination or null values in the provided examples."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "The tool can use Canadian province names from the gas price output as potential destinations for trip planning"
          }
        ]
      },
      {
        "tool name": "Gas Price: stateUsaPrice",
        "connect params": [
          {
            "name": "state",
            "description": "While this tool is for US states, it's conceptually related to the Canadian gas price data and could be used for comparison with neighboring Canadian provinces"
          }
        ]
      },
      {
        "tool name": "Gas Price: allUsaPrice",
        "connect params": [
          {
            "description": "This tool provides US gas prices that could be compared with the Canadian gas prices from the source tool"
          }
        ]
      },
      {
        "tool name": "Gas Price: europeanCountries",
        "connect params": [
          {
            "description": "This tool provides European gas prices that could be compared with the Canadian gas prices from the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify _v2",
    "parent tool description": "Get Spotify Tracks & Playlist Details",
    "tool name": "Spotify _v2: Related Artists",
    "tool description": "Retrieves a list of artists related to a specified artist, showing similar musical styles or influences. This endpoint leverages Spotify's extensive music database and recommendation algorithms to help users discover new artists based on their existing preferences. The service provides access to Spotify's rich ecosystem of music data, allowing users to explore musical connections and expand their listening horizons beyond tracks and playlists they already know.",
    "required_parameters": [
      {
        "name": "artist_id",
        "type": "STRING",
        "description": "",
        "default": "0EmeFodog0BfCgMzAIvKQp"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify117.p.rapidapi.com/get_related_artists/\"\nquerystring = {\"artist_id\": \"0EmeFodog0BfCgMzAIvKQp\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify117.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Related Artists",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a list of artists who are musically similar to a specified artist. For each related artist, the output includes their name, genres, popularity score, follower count, and links to their Spotify page and associated images. In the event of an API failure, a structured error message is returned instead.",
      "output_format": "The output is a JSON object. A successful response contains a top-level key, 'artists', which holds a JSON array of artist objects. Each artist object contains nested structures, such as an array of 'genres' (strings), an array of 'images' (objects with URL, height, and width), and an 'external_urls' object. Some fields within the artist object can be null. An error response has a different structure, containing keys like 'messages' and 'info'."
    },
    "connected tools": [
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Can use artist IDs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use artist IDs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use artist IDs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use artist URIs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use artist URIs from related artists output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "Can search for related artists on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "50K Radio Stations",
    "parent tool description": "More than 60,000 radio stations from different countries and various genres",
    "tool name": "50K Radio Stations: Get Genres",
    "tool description": "Retrieves a comprehensive list of available music genres for radio stations. This endpoint taps into a vast database of more than 60,000 radio stations from countries around the world, allowing users to explore the diverse range of broadcasting categories available for streaming. The genre list serves as a navigation tool to help users filter and discover stations based on their musical preferences across this extensive global radio collection.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Use this parameter to filter cities by keyword or set empty if you don't want to use it ",
        "default": "music"
      }
    ],
    "code": "import requests\n\nurl = \"https://50k-radio-stations.p.rapidapi.com/get/genres\"\nquerystring = {\"keyword\": \"music\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"50k-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Genres",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output returns a list of music genres, each with a unique numeric ID and a descriptive name. This information serves as a navigational tool, allowing users to see available categories and use the genre ID to filter or search for specific radio stations in subsequent requests.",
      "output_format": "The response is a JSON object. Key information is nested under a 'data' key, which contains an array of genre objects. Each genre object has a numeric 'id' and a string 'name'. The root object also includes a 'success' flag and a 'total' count, which likely corresponds to the number of items in the 'data' array."
    },
    "connected tools": [
      {
        "tool name": "50K Radio Stations: Get Channels",
        "connect params": [
          {
            "name": "genre_id",
            "description": "Use this parameter to filter cities by genre id or set empty if you don't want to use it"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Retrieve file",
    "tool description": "Retrieves a file hosted by the server, typically accessed by replacing the /p/ path in /merge and /edit endpoint responses with /f/ or /d/. This endpoint is part of a multipurpose API that powers various image, video, and audio operations, allowing you to access and download previously processed media files. The request will fail if the requested file doesn't exist or has been deleted. For premium features on the associated Discord bot, users can visit https://ko-fi.com/mizabot.",
    "required_parameters": [
      {
        "name": "path",
        "type": "string",
        "description": "",
        "default": "ABCDEF"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/d/{path}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Retrieve file",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is the raw binary data of a file, specifically a media file like an image, video, or audio. The examples provided contain the byte stream for a JPEG image, identifiable by the \"JFIF\" file marker. This data is intended to be saved directly to a file or used by other processes that can handle raw file content.",
      "output_format": "The output is a raw binary stream, not a structured format like JSON or XML. It represents the complete contents of a single file. As such, concepts like pagination, nesting, or nullability are not applicable; the entire file is returned in one response."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url"
          }
        ]
      },
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1"
          },
          {
            "name": "u2"
          },
          {
            "name": "u3"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mboum Finance",
    "parent tool description": "Mboum Finance Official API for stocks, options, ETFs, mutual funds, SEC Data, news, screeners and more! ",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "A single symbol",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mboum-finance.p.rapidapi.com/qu/quote/calendar-events\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mboum-finance.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Mboum Finance: stock/calendar-events/{stock}",
    "tool description": "Retrieves stock calendar events by accessing real-time financial data and market schedules. This endpoint is part of the Mboum Finance Official API, which offers comprehensive tools for stocks, options, ETFs, mutual funds, SEC filings, news, and screeners. It leverages the API's integrated financial databases to provide timely information on market holidays, earnings dates, and other scheduled events, helping users stay informed about critical market timelines.",
    "API name": "stock/calendar-events/{stock}",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides key calendar events for a specific stock ticker. This includes upcoming earnings announcement and call dates, along with associated analyst estimates for earnings per share (EPS) and revenue (average, low, and high). It also provides ex-dividend and dividend payment dates, helping users track important corporate events that could impact stock prices.",
      "output_format": "The output is a single, nested JSON object. Key data is located under the `body` attribute. Some fields, like `earningsDate` and `earningsCallDate`, are arrays of objects to accommodate multiple potential dates. Dividend-related fields, such as `exDividendDate` and `dividendDate`, can be either an object with date details or an empty array if no dividend is scheduled."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve daily time series data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_WEEKLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve weekly time series data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve current price information"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_INTRADAY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve intraday time series data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_MONTHLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve monthly time series data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to calculate technical indicators"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve historical data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve related news"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/cashflow-statement/{stock}_",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve cash flow statements"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve earnings history"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/income-statement/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve income statements"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve earnings details"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/index-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve index trend data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-transactions/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve insider transactions"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/institution-ownership/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve institutional ownership data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/net-share-purchase-activity/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve net share purchase activity"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/upgrade-downgrade-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve upgrade/downgrade history"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/recommendation-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve recommendation trends"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/sec-filings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve SEC filings"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-holders/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve insider holder information"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/balance-sheet/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve balance sheet data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: options/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve options data"
          },
          {
            "name": "expiration",
            "description": "The earnings date or dividend date from calendar events can be used to find relevant options expirations"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve options data"
          },
          {
            "name": "expiration",
            "description": "The earnings date or dividend date from calendar events can be used to find relevant options expirations"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve financial data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve related news"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve key statistics"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-holders",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve insider holder information"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/upgrade-downgrade-history",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve upgrade/downgrade history"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-transactions",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve insider transactions"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/index-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve index trend data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve company profile"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/calendar-events",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve additional calendar events"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/recommendation-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve recommendation trends"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/net-share-purchase-activity",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve net share purchase activity"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/institution-ownership",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve institutional ownership data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/sec-filings",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve SEC filings"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/earnings",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the calendar events can be used to retrieve earnings information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "BizToc",
    "parent tool description": "Official BizToc.com API \u2014 The Web's most comprehensive hub for business & finance news.",
    "tool name": "BizToc: News / Hot",
    "tool description": "Retrieves trending topic clusters and their associated stories, ranked by a proprietary popularity algorithm that refreshes every 15 minutes. This endpoint taps into BizToc.com's comprehensive business and finance news ecosystem, providing access to the same trending content featured in the '/hot' section of the website. As the Web's most comprehensive hub for business and finance news, BizToc.com aggregates and organizes the most relevant and timely financial stories, allowing users to stay informed on rapidly developing business trends and market movements.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://biztoc.p.rapidapi.com/news/hot\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"biztoc.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "News / Hot",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool retrieves a list of trending business and finance news stories, which are grouped into topic clusters. For each story, it provides the title, a summary (body), the source domain, creation timestamp, and a URL to the full article. The content is ranked by popularity and refreshed frequently, allowing users to stay informed about current market movements and financial trends.",
      "output_format": "The output is a JSON array where each element is an object representing a topic cluster. Each topic object contains a \"posts\" key, which holds a nested array of individual story objects. Within a story object, fields like \"img\" (image) and \"title\" can be null."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use titles or keywords from trending topic clusters to search for related news"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use movie-related titles or keywords from trending business news to search for related movie news"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use titles or keywords from trending business news to search for related news"
          }
        ]
      },
      {
        "tool name": "Indonesia News: kompas-detail",
        "connect params": [
          {
            "name": "guid",
            "description": "Can extract GUIDs from Kompas URLs if present in trending stories"
          }
        ]
      },
      {
        "tool name": "Instant Cameroon News: Retrieve data",
        "connect params": [
          {
            "name": "search",
            "description": "Can use keywords from trending business news to search for related Cameroon news"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Yahoo Finance_v2",
    "parent tool description": "Yahoo Finance API for stocks, options, ETFs, mutual funds and news. Moved to: https://rapidapi.com/sparior/api/mboum-finance",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "string",
        "description": "A single symbol",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote/AAPL/earnings\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"yahoo-finance15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "tool name": "Yahoo Finance_v2: stock/earnings",
    "tool description": "Retrieves earnings information for a specified stock. This is part of the Yahoo Finance API, which provides comprehensive financial data including stocks, options, ETFs, mutual funds, and news. It leverages real-time and historical financial data to offer insights into a company's performance, aiding investors in making informed decisions.",
    "API name": "stock/earnings",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "This tool retrieves detailed earnings and financial performance data for a specified stock symbol. The output includes both historical quarterly and yearly revenue and earnings figures. It also presents quarterly earnings per share (EPS), comparing actual results to estimates, and provides the estimated date for the next earnings announcement, aiding investors in assessing a company's financial health.",
      "output_format": "The response is a single, nested JSON object. The primary data is contained within the `body.earnings` object. This object contains two main charts, `earningsChart` for EPS data and `financialsChart` for revenue/earnings, both of which have arrays of objects for `quarterly` and `yearly` time series. Financial values are provided in multiple formats: a `raw` number, a short formatted string (`fmt`, e.g., '61.27B'), and a `longFmt` string with commas. No pagination is present."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Search Endpoint",
        "connect params": [
          {
            "name": "keywords",
            "description": "Can use company names or symbols from earnings data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: News Sentiment Data",
        "connect params": [
          {
            "name": "ticker",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Most Negative News",
        "connect params": [
          {
            "name": "ticker",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Market Data",
        "connect params": [
          {
            "name": "ticker",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-holders",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/upgrade-downgrade-history",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-transactions",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/index-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/calendar-events",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/recommendation-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/net-share-purchase-activity",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/institution-ownership",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/sec-filings",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbol from earnings data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Real-Time PNR Status API for Indian Railways",
    "parent tool description": "It is an unofficial PNR Status API that provides real-time information on the status of Indian Railways train reservations. This API is designed for educational purposes only and is not affiliated with Indian Railways in any way.",
    "tool name": "Real-Time PNR Status API for Indian Railways: PNR Status",
    "tool description": "Provides real-time information on the status of Indian Railways train reservations through an unofficial PNR Status API. This service allows users to check current reservation details, including seat assignments, departure times, and journey status for Indian Railways bookings. The API delivers up-to-date tracking information for educational purposes only and is not affiliated with Indian Railways in any official capacity.",
    "required_parameters": [
      {
        "name": "pnr_status",
        "type": "NUMBER",
        "description": "",
        "default": "6217743114"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://real-time-pnr-status-api-for-indian-railways.p.rapidapi.com/indianrail/{pnr_status}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"real-time-pnr-status-api-for-indian-railways.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "PNR Status",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The output provides the real-time status of an Indian Railways train reservation for a specific PNR (Passenger Name Record). This includes current reservation details, such as seat assignments (e.g., coach and berth numbers), train departure and arrival times, and the overall journey status (e.g., confirmed, waiting list, cancelled). This information allows a user to track their train booking.",
      "output_format": "The format is unknown due to a lack of output examples. Given that it is an API providing structured data, the output is likely a JSON object. This object would probably contain various key-value pairs representing the PNR details, such as 'train_number', 'journey_date', and a nested list of 'passengers' with their individual booking statuses."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "The train's destination city could be used as a trip planning destination"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Auto Suggest",
        "connect params": [
          {
            "name": "string",
            "description": "The train's destination city could be used to search for travel options"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "News Network",
    "parent tool description": "Global network of news.",
    "required_parameters": [
      {
        "name": "category",
        "type": "ENUM",
        "description": "",
        "default": "sports"
      },
      {
        "name": "region",
        "type": "ENUM",
        "description": "ae: United Arab Emirates\nar: Argentina\nat: Austria\nau: Australia\nbe: Belgium\nbg: Bulgaria\nbr: Brazil\nca: Canada\nch: Switzerland\ncn: China \nco: Colombia\ncu: Cuba\ncz:\tCzech Republic\nde: Germany\neg: Egypt\nfr: France\ngb: United Kingdom\ngr: Greece\nhk: Hong Kong\nhu: Hungray\nid: Indonesia\nie: Ireland\nil: Israel\nin: India\nit: Italy\njp: Japan\nkr: South Korea\nlt: Lithuania\nlv: Latvia\nma: Morocco\nmx: Mexico\nmy: Malaysia\nng: Nigeria\nnl: Netherlands\nno: Norway\nnz: New Zealand\nph: Philippines\npl: Poland\npt: Portugal\nro: Romania\nrs: Serbia\nru: Russia\nsa: Saudi Arabia\nse: Sweden\nsg: Singapore\nsi: Slovenia\nsk: Slovakia\nth: Thailand\ntr: Turkey\ntw: Taiwan\nua: Ukraine\nus: United States\nve: Venuzuela\nza: South Africa",
        "default": "us"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://news-network.p.rapidapi.com/get_news\"\nquerystring = {\"category\": \"\", \"region\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"news-network.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "News Network: Get News",
    "tool description": "Retrieves a list of news articles filtered by specified region and category. This endpoint utilizes the Global network of news, drawing from a comprehensive database of regional and categorical news sources to deliver targeted and timely updates.",
    "API name": "Get News",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool provides a list of news articles filtered by a specific region and category. Each article in the list includes a title, a URL to the full story, the source, author, a content snippet, a description, and the publication date. This information is intended to be used to present users with relevant and timely news headlines and summaries.",
      "output_format": "The output is a JSON object. The top-level key is a two-letter country code (e.g., 'us', 'gb'). The value of this key is another object, where the key is the news category (e.g., 'business', 'sports'). This category key maps to an array of article objects. Fields within the article objects, such as 'author', 'content', 'urlToImage', and 'description', can frequently be null."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use article titles or topics from the news output as search terms"
          }
        ]
      },
      {
        "tool name": "Coronavirus Smartable: GetNews",
        "connect params": [
          {
            "param_name": "location",
            "description": "Can use the country code from the news output (e.g., 'us', 'gb') to get coronavirus news for that region"
          }
        ]
      },
      {
        "tool name": "Coronavirus Smartable: GetStats",
        "connect params": [
          {
            "param_name": "location",
            "description": "Can use the country code from the news output (e.g., 'us', 'gb') to get coronavirus stats for that region"
          }
        ]
      },
      {
        "tool name": "India Today Unofficial: Tag Search",
        "connect params": [
          {
            "param_name": "tag",
            "description": "Can use topics or keywords extracted from news articles"
          }
        ]
      },
      {
        "tool name": "Instant Cameroon News: Retrieve data",
        "connect params": [
          {
            "param_name": "search",
            "description": "Can use keywords or topics from news articles as search terms"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use movie-related topics or titles extracted from entertainment news articles"
          }
        ]
      },
      {
        "tool name": "News API_v2: Top Headlines",
        "connect params": [
          {
            "param_name": "country",
            "description": "Can use the country code from the news output (e.g., 'us', 'gb')"
          },
          {
            "param_name": "category",
            "description": "Can use the category from the news output (e.g., 'business', 'sports')"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "param_name": "keyword",
            "description": "Can use topics, titles, or keywords from news articles as search terms"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "50K Radio Stations",
    "parent tool description": "More than 60,000 radio stations from different countries and various genres",
    "tool name": "50K Radio Stations: Get Countries",
    "tool description": "Retrieves a comprehensive list of countries that have radio stations available in the system. This endpoint connects you to a vast database of more than 60,000 radio stations spanning across numerous countries worldwide and covering various music genres and broadcast formats. The country list serves as an entry point for exploring the extensive international radio collection, allowing users to subsequently browse stations by their geographic origin.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Use this parameter to filter cities by keyword or set empty if you don't want to use it ",
        "default": "Indonesia"
      }
    ],
    "code": "import requests\n\nurl = \"https://50k-radio-stations.p.rapidapi.com/get/countries\"\nquerystring = {\"keyword\": \"Indonesia\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"50k-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Countries",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output is a list of countries that have available radio stations. Each country in the list is represented as an object containing a unique integer 'id' and its string 'name'. This list can be used to identify countries for subsequent queries, such as searching for stations within a specific geographic region.",
      "output_format": "The tool returns a JSON object with a top-level key 'data' which contains an array of country objects. The root object also includes metadata: a boolean 'success' flag, a boolean 'has_next' for pagination, and an integer 'total' which likely indicates the number of items in the current response."
    },
    "connected tools": [
      {
        "tool name": "50K Radio Stations: Get Cities",
        "connect params": [
          {
            "name": "country_id",
            "description": "Use this parameter to filter cities by country id or set empty if you don't want to use it"
          }
        ]
      },
      {
        "tool name": "50K Radio Stations: Get Channels",
        "connect params": [
          {
            "name": "country_id",
            "description": "Use this parameter to filter cities by country id or set empty if you don't want to use it"
          }
        ]
      },
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getStationByCountry",
        "connect params": [
          {
            "name": "country_id",
            "description": "Country ID* to fetch stations (default: 26 (USA))"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: New releases",
        "connect params": [
          {
            "name": "country",
            "description": "Enter country code like: US, CA, SE, IN, UK..."
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Trends",
        "connect params": [
          {
            "name": "country",
            "description": "ISO 3166-1 Alpha-2 country code. Default: ZZ = Global https://www.iban.com/country-codes"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "active_mer",
        "type": "STRING",
        "description": "Show hotels with Priceline rates.",
        "default": ""
      },
      {
        "name": "latitude_range_end",
        "type": "STRING",
        "description": "Requires latitude to have value.",
        "default": ""
      },
      {
        "name": "active_smop",
        "type": "STRING",
        "description": "Show hotels with semi opaque rates.",
        "default": ""
      },
      {
        "name": "active_vmer",
        "type": "STRING",
        "description": "Show hotels with vacation merchant rates.",
        "default": ""
      },
      {
        "name": "state_code",
        "type": "STRING",
        "description": "Filter by the state code of the hotel.",
        "default": ""
      },
      {
        "name": "longitude_range_end",
        "type": "STRING",
        "description": "Requires longitude to have value.",
        "default": ""
      },
      {
        "name": "active_bkg",
        "type": "STRING",
        "description": "Show hotels with Booking rates.",
        "default": ""
      },
      {
        "name": "latitude",
        "type": "STRING",
        "description": "Filter by latitude of the hotel.",
        "default": ""
      },
      {
        "name": "hotelid_ppn",
        "type": "STRING",
        "description": "Filter by PPN hotel ID.",
        "default": ""
      },
      {
        "name": "longitude",
        "type": "STRING",
        "description": "Requires longitude to have value.",
        "default": ""
      },
      {
        "name": "property_type_ids",
        "type": "STRING",
        "description": "Filter by property type ids. See the Property Type Filter Guide for more detail.",
        "default": ""
      },
      {
        "name": "cityid_ppn",
        "type": "STRING",
        "description": "Filter by PPN city ID.",
        "default": ""
      },
      {
        "name": "hotel_address",
        "type": "STRING",
        "description": "Filter by address of hotel.",
        "default": ""
      },
      {
        "name": "resume_key",
        "type": "STRING",
        "description": "Resume results from given ID.",
        "default": ""
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "Language code: en-US, es-ES, fr-FR, pt-BR",
        "default": "fr-FR"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of results from the response.",
        "default": 100
      },
      {
        "name": "active_agd",
        "type": "STRING",
        "description": "Show hotels with Agoda rates.",
        "default": ""
      },
      {
        "name": "country_code",
        "type": "STRING",
        "description": "Filter by the country code of the hotel.",
        "default": ""
      },
      {
        "name": "changes_since",
        "type": "STRING",
        "description": "Date/time to filter the hotels that have been updated on or after this date. This will discover the last_changed_date of hotels in inventory (inclusive of the selected date). Date should be in a valid ISO 8601: https://en.wikipedia.org/wiki/ISO_8601 (YYYY-MM-DDThh:mm:ss{UTC_Offset}) format.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/hotels/downloadHotels\"\nquerystring = {\"active_mer\": \"\", \"latitude_range_end\": \"\", \"active_smop\": \"\", \"active_vmer\": \"\", \"state_code\": \"\", \"longitude_range_end\": \"\", \"active_bkg\": \"\", \"latitude\": \"\", \"hotelid_ppn\": \"\", \"longitude\": \"\", \"property_type_ids\": \"\", \"cityid_ppn\": \"\", \"hotel_address\": \"\", \"resume_key\": \"\", \"language\": \"fr-FR\", \"limit\": 100, \"active_agd\": \"\", \"country_code\": \"\", \"changes_since\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Downalods hotels",
    "tool description": "Downloads a list of hotels based on user-specified criteria such as destination, dates, and preferences. This is part of Priceline.com's platform, which enables users to search for hotels, cars, and flights, leveraging a comprehensive database of travel options to provide accurate and up-to-date information for bookings. The endpoint integrates seamlessly with the broader service to streamline travel planning and reservation processes.",
    "API name": "Downalods hotels",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The provided output examples exclusively show error messages, not successful results. Each example indicates a timeout error from the Priceline service and suggests the user try the request again. The tool is intended to download a list of hotels, but the structure and content of a successful output containing hotel information are not demonstrated in the examples.",
      "output_format": "The provided examples are consistently a JSON object (serialized as a string) with a single key, \"detail\". The value of this key is a string containing the error message. The structure of a successful response, including potential nesting, arrays of hotels, or pagination, is unknown."
    },
    "connected tools": []
  },
  {
    "parent tool name": "Weee grocery API (sayweee.com) - browsing/searching/details",
    "parent tool description": "(FREE TRIAL)\nReal time scraping API from sayweee.com supports the entire pre-purchase flow.\nGrocery browsing and searching api based on location.\nProvides product details, reviews and shipment information given specific product id.\n",
    "tool name": "Weee grocery API (sayweee.com) - browsing/searching/details: product details (zipcode, product_id)",
    "tool description": "Provides detailed product information including price, availability, and shipment details based on a product ID and user's zipcode. This endpoint leverages a real-time scraping API from sayweee.com that supports the entire pre-purchase grocery shopping flow. The product ID should be obtained from the product search endpoint first, ensuring seamless integration within the grocery browsing and searching capabilities that are customized based on the user's location. Part of a FREE TRIAL service that delivers comprehensive product details and reviews from sayweee.com.",
    "required_parameters": [
      {
        "name": "zipcode",
        "type": "STRING",
        "description": "",
        "default": "77494"
      },
      {
        "name": "product_id",
        "type": "STRING",
        "description": "",
        "default": "85180"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://weee-grocery-api-sayweee-com-browsing-searching-details.p.rapidapi.com/details\"\nquerystring = {\"zipcode\": \"77494\", \"product_id\": \"85180\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"weee-grocery-api-sayweee-com-browsing-searching-details.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "product details (zipcode, product_id)",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "The tool returns detailed information about a specific grocery product based on its ID and a user's zipcode. A successful response contains product attributes like name, price, availability (sold-out status), brand, categories, images, and predicted delivery date. The tool may also return a list of related search topics or a structured error message if the API is unreachable.",
      "output_format": "The output is a string that must be parsed into a JSON object. In a successful product detail response, the core information is deeply nested under the `data.detail.product` path. This `product` object contains numerous fields, some of which can be null or empty. The tool can also return differently structured JSON objects, either for a list of related topics (under `data.relatedTopicsData`) or for API errors (with a `messages` key)."
    },
    "connected tools": [
      {
        "tool name": "BestBuy Product Data: BestBuyProductData",
        "connect params": [
          {
            "param_name": "keyword",
            "description": "The product name from Weee grocery API can be used to search for similar products on BestBuy"
          }
        ]
      },
      {
        "tool name": "Amazon Pricing and Product Info: Main Endpoint",
        "connect params": [
          {
            "param_name": "asin",
            "description": "If the product details include an Amazon ASIN reference, it could be used to get Amazon pricing"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "LGBTQ World News Live",
    "parent tool description": "API showing all the latest LGBTQ+ News around the World",
    "tool name": "LGBTQ World News Live: Get All LGBTQ+ News",
    "tool description": "Returns comprehensive news coverage about LGBTQ+ topics and events from around the world. This API aggregates and delivers the latest LGBTQ+ news stories, developments, and headlines from global sources, providing access to current information on LGBTQ+ rights, culture, politics, and community events worldwide.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://lgbtq-world-news-live.p.rapidapi.com/news\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"lgbtq-world-news-live.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get All LGBTQ+ News",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool's output is a list of news articles related to LGBTQ+ topics from around the world. Each article in the list includes a title, a URL to the full story, and the source of the publication. This information allows users to stay informed about current events, rights, culture, and politics within the LGBTQ+ community by providing direct links to the original articles.",
      "output_format": "The output is a string that contains a JSON array of objects. Each object represents a news article and has three string keys: 'title', 'url', and 'source'. The provided examples appear to be truncated, suggesting the full output may contain a longer list of articles."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could use LGBTQ+ news article titles as search terms"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could search for LGBTQ+ movie-related news using article titles"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Could use LGBTQ+ news article titles as search keywords"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify Web",
    "parent tool description": "Spotify Data API for Millions of songs &amp; podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify Web: Get radio playlist",
    "tool description": "Gets personalized radio recommendations based on a specific artist or song, delivering a curated stream of similar music. This endpoint leverages Spotify's vast database of millions of songs, artists, albums, and playlists to generate contextually relevant music suggestions that match the sonic qualities, genre characteristics, and listener preferences associated with your selected seed artist or track, helping users discover new music that aligns with their current listening preferences.",
    "required_parameters": [
      {
        "name": "uri",
        "type": "STRING",
        "description": "Artist or song URI",
        "default": "spotify:artist:2w9zwq3AktTeYYMuhMjju8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify-web2.p.rapidapi.com/seed_to_playlist/\"\nquerystring = {\"uri\": uri}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"spotify-web2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get radio playlist",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a JSON object that provides the unique URI for a personalized Spotify radio playlist. This playlist is generated based on a seed artist or song. The primary piece of information is this URI, which can be used to access the curated music. The output can also indicate an error with a status and a descriptive message.",
      "output_format": "The output is a single JSON object. A successful response contains a 'total' count and a 'mediaItems' array. This array holds objects, each with a 'uri' string for the playlist. An error response contains a boolean 'status' and a string 'message'. The structure varies between success and failure cases."
    },
    "connected tools": [
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "The playlist URI can be used to access tracks for lyrics retrieval"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "tool name": "Priceline com Provider: Search hotels locations",
    "tool description": "Searches for travel locations by name, allowing you to find specific destinations for your trip planning. This endpoint is part of priceline.com's comprehensive travel booking service that lets you search for hotels, rental cars, and flights across multiple destinations. The service provides access to priceline.com's extensive database of travel options, helping you quickly locate and compare travel destinations to build your ideal itinerary.",
    "required_parameters": [
      {
        "name": "name",
        "type": "STRING",
        "description": "Name",
        "default": "Berlin"
      },
      {
        "name": "search_type",
        "type": "STRING",
        "description": "",
        "default": "ALL"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v1/hotels/locations\"\nquerystring = {\"name\": \"Berlin\", \"search_type\": \"ALL\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Search hotels locations",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographic locations that match a text-based search query. Each location object in the list includes a display name, a unique ID, type (e.g., CITY), geographic coordinates (latitude and longitude), and administrative details like city, state/province, and country. This output is intended to help a user select a specific destination whose ID can then be used for subsequent travel searches.",
      "output_format": "The output is a JSON array of objects, where each object represents a potential location match. If no locations are found, the output may be an empty string instead of a standard empty array. Many fields within the location objects can be null, for example, `stateCode` is null for locations outside the US."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use location name from search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "Can use city/location name from search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from search results"
          },
          {
            "name": "lng",
            "description": "Can use longitude from search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "Can use city/location name from search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count  listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from search results"
          },
          {
            "name": "lng",
            "description": "Can use longitude from search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count Listings by administrative divisions",
        "connect params": [
          {
            "name": "state",
            "description": "Can use state/province from search results"
          },
          {
            "name": "admin1",
            "description": "Can use administrative details from search results"
          },
          {
            "name": "admin2",
            "description": "Can use administrative details from search results"
          },
          {
            "name": "admin3",
            "description": "Can use administrative details from search results"
          },
          {
            "name": "place",
            "description": "Can use city name from search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from search results"
          },
          {
            "name": "lng",
            "description": "Can use longitude from search results"
          }
        ]
      },
      {
        "tool name": "Gas Price: stateUsaPrice",
        "connect params": [
          {
            "name": "state",
            "description": "Can use state code from search results for US locations"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search cars locations",
        "connect params": [
          {
            "name": "name",
            "description": "Can use location name from search results"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations by geolocation",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from search results"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of results from the response.",
        "default": 500
      },
      {
        "name": "resume_key",
        "type": "STRING",
        "description": "Resume results from given ID.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/cars/downloadLocations\"\nquerystring = {\"limit\": 500, \"resume_key\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Download locations",
    "tool description": "Downloads a list of Locations. This endpoint is part of Priceline.com's travel API, which enables users to search hotels, cars, and flights. It leverages AI-powered technology combined with a database of 60k airports to provide location data that supports personalized travel planning and booking decisions.",
    "API name": "Download locations",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool's output is a list of travel-related locations, likely for car rentals, as indicated by the response structure. Each location entry contains detailed information, including a unique Priceline ID, partner codes, a full address, latitude, and longitude. This data is designed to support travel planning and booking by providing comprehensive location details.",
      "output_format": "The output is a deeply nested JSON object. The list of locations is structured as a JSON object where keys are indexed strings (e.g., 'location_0', 'location_1'), rather than a standard JSON array. The response includes a 'resume_key', which indicates the use of a cursor for paginating through large sets of location data."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use location names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's location data"
          },
          {
            "name": "lng",
            "description": "Can use longitude from source tool's location data"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's location data"
          },
          {
            "name": "lng",
            "description": "Can use longitude from source tool's location data"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations by geolocation",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's location data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "Filter by country name or alpha code",
        "default": ""
      },
      {
        "name": "fund_family",
        "type": "STRING",
        "description": "Filter by investment company that manages the fund",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/mutual_funds/family\"\nquerystring = {\"country\": \"\", \"fund_family\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: MFs Family List",
    "tool description": "Retrieves a list of mutual fund families. This endpoint is part of the Twelvedata financial data API, which provides developers with instant access to real-time and historical data for stocks, forex, crypto, ETFs, indices, and more. By leveraging this tool, users can efficiently integrate comprehensive financial market insights into their applications, supported by Twelvedata's extensive financial databases and scalable API infrastructure. Learn more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "API name": "MFs Family List",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a list of mutual fund families, which are the companies that manage and offer various mutual funds. The output is structured as a dictionary where keys are country names and values are lists of the mutual fund family names associated with that country. This information is intended for financial analysis, allowing users to discover and categorize mutual fund providers by their geographic location.",
      "output_format": "The output is a JSON object with a single top-level key, \"result\". The value of \"result\" is another object that acts as a dictionary, mapping country names (strings) to an array of strings, where each string is the name of a mutual fund family. The examples do not indicate any pagination or cursoring."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: MFs List",
        "connect params": [
          {
            "name": "fund_family",
            "description": "Filter mutual funds by the fund family name obtained from the MFs Family List"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Composition",
        "connect params": [
          {
            "name": "country",
            "description": "Filter mutual fund composition by country name obtained from the MFs Family List"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Purchase Info",
        "connect params": [
          {
            "name": "country",
            "description": "Filter mutual fund purchase info by country name obtained from the MFs Family List"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MFs Type List",
        "connect params": [
          {
            "name": "country",
            "description": "Filter mutual fund types by country name obtained from the MFs Family List"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Binance Futures Leaderboard",
    "parent tool description": "Binance Futures Leaderboard API is an API for querying the leaderboard of the Binance Futures Exchange.\n\nAny questions or issues please contact me on Telegram:  [@DevNullZer0](https://t.me/devnullzer0) or via [devnullzer0@proton.me](mailto:devnullzer0@proton.me)",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "isTrader",
        "type": "BOOLEAN",
        "description": "Include only copytraders",
        "default": "false"
      },
      {
        "name": "statisticsType",
        "type": "ENUM",
        "description": "The statistics type to search",
        "default": ""
      },
      {
        "name": "periodType",
        "type": "ENUM",
        "description": "The period type to search",
        "default": ""
      },
      {
        "name": "isShared",
        "type": "BOOLEAN",
        "description": "Include shared positions",
        "default": "true"
      },
      {
        "name": "tradeType",
        "type": "ENUM",
        "description": "The trade type to search. PERPETUAL is USD\u24c8-M and DELIVERY is COIN-M",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://binance-futures-leaderboard1.p.rapidapi.com/v2/searchLeaderboard\"\nquerystring = {\"isTrader\": \"false\", \"statisticsType\": \"\", \"periodType\": \"\", \"isShared\": \"true\", \"tradeType\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"binance-futures-leaderboard1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Binance Futures Leaderboard: search_leaderboard",
    "tool description": "Retrieves the list of traders ranked on the Binance Futures Leaderboard. This endpoint provides real-time access to the leaderboard data from Binance Futures Exchange, enabling users to view top-performing traders based on their trading activities and performance metrics. It leverages the Binance Futures Leaderboard API's capability to aggregate and display dynamic trader rankings, offering insights into market trends and competitive trading strategies.",
    "API name": "search_leaderboard",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a ranked list of top-performing traders from the Binance Futures Leaderboard. Each entry in the list represents a single trader and includes performance metrics like profit and loss (PNL) and return on investment (ROI). This data allows users to track successful traders and analyze their strategies.",
      "output_format": "The output is expected to be a JSON array of objects, where each object contains details for a single trader. The array is likely sorted by rank. The response may be paginated due to the potentially large number of traders on the leaderboard."
    },
    "connected tools": [
      {
        "tool name": "Binance Futures Leaderboard: get_leaderboard_rank",
        "connect params": [
          {
            "name": "statisticsType",
            "description": "The statistics type to search"
          },
          {
            "name": "tradeType",
            "description": "The trade type to search. PERPETUAL is USD\u24c8-M and DELIVERY is COIN-M"
          },
          {
            "name": "periodType",
            "description": "The period type to search"
          }
        ]
      },
      {
        "tool name": "Binance Futures Leaderboard: search_nickname",
        "connect params": [
          {
            "name": "nickname",
            "description": "The trader nickname to search"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: FreeDomain",
    "tool description": "Checks whether a domain is available for registration or already taken. This endpoint leverages APISOLUTION's comprehensive API infrastructure, which specializes in email validation and verification services designed for developers working on start-ups and staff projects, allowing you to quickly determine domain availability as part of your email system setup or digital presence planning.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/FreeDomain\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "FreeDomain",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "This tool checks if a given domain is associated with a free email provider, such as gmail.com or yahoo.com. The output is a status message indicating whether the domain is classified as a free domain. If the tool cannot find or classify the domain, it returns a \"Not Found\" message.",
      "output_format": "The output format is inconsistent. It can be a string that represents a JSON object with a single key, \"FreeDomain\", whose value is a human-readable status string. Alternatively, it can be a simple plain text string, like \"Not Found\", which may include a trailing newline character. The output is a single entity, not an array, and does not support pagination."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain identified as free can be checked if it's also disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "AI Weather by Meteosource",
    "parent tool description": "Accurate hyper-local weather forecasts, powered by our cutting-edge machine learning (ML) models. Historical weather, current weather, weather statistics , and hour-by-hour forecast - all weather data updated in real-time!",
    "required_parameters": [
      {
        "name": "text",
        "type": "STRING",
        "description": "Place name prefix to search for",
        "default": "fishermans wh"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "The language the place names. Available languages are:\n\n- `en`: English\n- `es`: Spanish\n- `fr`: French\n- `de`: German\n- `pl`: Polish\n- `cs`: Czech\n\n",
        "default": "en"
      }
    ],
    "code": "import requests\n\nurl = \"https://ai-weather-by-meteosource.p.rapidapi.com/find_places_prefix\"\nquerystring = {\"text\": text, \"language\": language}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ai-weather-by-meteosource.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "AI Weather by Meteosource: find_places_prefix",
    "tool description": "Searches for places by name prefix to retrieve a place_id and detailed geographical data (country, region, elevation, timezone, etc.) for use with Weather Forecast Endpoints. This endpoint enables precise location identification by accepting partial names and returning multiple results sorted by relevance, allowing selection via coordinates, country, region, or type. It leverages the parent tool's hyper-local weather forecasting capabilities, which combine real-time data and machine learning models to deliver historical weather, current conditions, and hour-by-hour forecasts, enhancing itinerary planning with accurate location-specific insights.",
    "API name": "find_places_prefix",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographical locations matching a search prefix. Each location in the list provides detailed data including its name, a unique `place_id`, administrative areas (state/province and county/municipality), country, and specific latitude/longitude coordinates. The output also includes the IANA timezone for the location, which is crucial for accurate weather forecasting. This information allows a user to identify and select the correct location from a list of possibilities for use in subsequent weather API calls.",
      "output_format": "The output is a JSON array of objects, with each object representing a distinct geographical location. Fields like `adm_area2` can be null if a secondary administrative area is not applicable. Latitude and longitude are provided as strings with cardinal direction suffixes (e.g., 'N', 'S', 'E', 'W'). The list appears to be sorted by relevance to the search query, but no explicit pagination or cursoring mechanism is visible in the examples."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          },
          {
            "name": "timezone",
            "description": "Can use the IANA timezone from find_places_prefix output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          },
          {
            "name": "timezone",
            "description": "Can use the IANA timezone from find_places_prefix output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          },
          {
            "name": "timezone",
            "description": "Can use the IANA timezone from find_places_prefix output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          },
          {
            "name": "timezone",
            "description": "Can use the IANA timezone from find_places_prefix output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          },
          {
            "name": "timezone",
            "description": "Can use the IANA timezone from find_places_prefix output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "place_id",
            "description": "Can use the place_id from find_places_prefix output to specify location"
          },
          {
            "name": "timezone",
            "description": "Can use the IANA timezone from find_places_prefix output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 14
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/rsi\"\nquerystring = {\"format\": \"json\", \"time_period\": 14, \"interval\": \"1min\", \"series_type\": \"close\", \"outputsize\": 30, \"symbol\": \"AAPL\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: RSI",
    "tool description": "Calculates the magnitude of price changes to assess overbought and oversold conditions in an asset's price. This endpoint leverages the Financial Data API's scope, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, using technical analysis algorithms to quantify momentum patterns. By integrating market data from diverse asset classes, it empowers developers to identify potential reversal points in price trends, enhancing decision-making for traders and analysts. Learn more in the [documentation](https://twelvedata.com/docs).",
    "API name": "RSI",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides time-series data for the Relative Strength Index (RSI) of a specified financial asset. The output consists of a metadata object, detailing the asset (e.g., symbol, exchange, type) and RSI parameters, and an array of historical RSI values. This data is used by analysts and traders to assess market momentum and identify potentially overbought or oversold conditions.",
      "output_format": "The output is a single JSON object with two main keys: 'meta' and 'values'. The 'meta' key maps to an object containing metadata about the query and the asset. The 'values' key maps to an array of JSON objects, each containing a 'datetime' (string) and its corresponding 'rsi' value (also a string). The fields within the 'meta' object and the format of the 'datetime' string can vary based on the asset type and the time interval requested."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: STOCHRSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used to query the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used to query the same asset"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used for further technical analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used for additional technical analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used for volatility analysis alongside RSI"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used to get company details"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "The RSI output contains symbol information that can be used to get key statistics"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "World Weather Online API",
    "parent tool description": "Free Weather API and Geo API for worldwide locations, hourly weather, 14-day weather, historical weather, and Marine and Ski weather API for developers and businesses in XML and JSON format.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "",
        "default": "40.73,-73"
      }
    ],
    "optional_parameters": [
      {
        "name": "tp",
        "type": "ENUM",
        "description": "",
        "default": ""
      },
      {
        "name": "aqi",
        "type": "STRING",
        "description": "",
        "default": "yes"
      },
      {
        "name": "format",
        "type": "ENUM",
        "description": "",
        "default": ""
      },
      {
        "name": "lang",
        "type": "STRING",
        "description": "",
        "default": "en"
      },
      {
        "name": "alerts",
        "type": "STRING",
        "description": "",
        "default": "no"
      },
      {
        "name": "num_of_days",
        "type": "NUMBER",
        "description": "",
        "default": "3"
      }
    ],
    "code": "import requests\n\nurl = \"https://world-weather-online-api1.p.rapidapi.com/weather.ashx\"\nquerystring = {\"aqi\": aqi, \"lang\": lang, \"alerts\": alerts, \"num_of_days\": num_of_days, \"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"world-weather-online-api1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "World Weather Online API: Local Weather API",
    "tool description": "Retrieves current weather conditions, 14-day forecasts, air quality data, weather alerts, and monthly climate averages for over 4 million cities and towns worldwide. This is part of the Free Weather API and Geo API, which provides hourly, 14-day, historical weather data, and specialized marine and ski weather information in XML and JSON formats, enabling developers and businesses to access comprehensive weather insights for global locations.",
    "API name": "Local Weather API",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns detailed weather data for a specified location, identified by city, zipcode, or latitude/longitude. The output includes a snapshot of the current conditions (temperature, wind, visibility, air quality) and a daily forecast. The forecast section contains a daily summary (max/min temperatures, sun hours) and astronomical information (sunrise, sunset, moon phase).",
      "output_format": "The output is in XML format, with a root element named `<data>`. The data is nested, containing main elements like `<current_condition>` and `<weather>`. The `<weather>` element, representing a daily forecast, contains further nested elements like `<astronomy>`, `<air_quality>`, and `<hourly>`. The provided examples are truncated, suggesting the full response may contain more data or a sequence of `<weather>` or `<hourly>` elements for multi-day/24-hour forecasts."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get hourly forecast",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get current weather",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's location data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Instant Cameroon News",
    "parent tool description": "Instantly provide the latest news and the latest information on Cameroon. It is the easier way to  get latest news about Cameroon.",
    "tool name": "Instant Cameroon News: Home page",
    "tool description": "Displays the Home and Welcome page that introduces the API for accessing the latest news and information about Cameroon. This service provides an easy way to stay updated with current events, developments, and important stories from Cameroon, offering users a convenient entry point to browse and discover comprehensive news coverage about the country.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://instant-cameroon-news.p.rapidapi.com/\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"instant-cameroon-news.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Home page",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a static HTML string that serves as a welcome page for the Instant Cameroon News API. The content introduces the API and provides instructions on how to retrieve actual news articles, such as by appending `/camerounnews` to the URL. This output does not contain any news articles itself.",
      "output_format": "The output is a single string containing a snippet of HTML code. It is not a structured JSON object or array. The content appears to be static, with no pagination or nesting."
    },
    "connected tools": [
      {
        "tool name": "Instant Cameroon News: Retrieve data",
        "connect params": [
          {
            "name": "page",
            "description": "This parameter could be used to navigate from the home page to specific news pages"
          },
          {
            "name": "search",
            "description": "This parameter could be used to search for specific news topics mentioned in the welcome page"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard API_v2",
    "parent tool description": "Billboard charts API: Weekly Billboard Hot 100, Weekly Billboard 200, Weekly Artist 100, Weekly Billboard Weekly Global 200, Weekly Catalog Albums, Weekly Independent Albums, Weekly Billboard U.S. Afrobeats Songs. Year End Hot 100 Songs, Year End Billboard 200 Albums, Year End Billboard  Global 200, Year End Top Artists, Year End Top Artists \u2013 Duo/Group, Year End Top Labels, Year End Top New Artists, Year End Top Artists \u2013 Male, Year End Top Artists \u2013 Female. \nAll Greatest of All Time Charts....",
    "tool name": "Billboard API_v2: Independent Albums",
    "tool description": "Retrieves the weekly Independent Albums chart from Billboard, defaulting to last week's data if no specific week is provided. If a date that isn't a Saturday is supplied, the API automatically adjusts to the Saturday of that week. This endpoint is part of the comprehensive Billboard charts API, which offers access to numerous weekly rankings including Hot 100, Billboard 200, Artist 100, Global 200, and specialized charts like Catalog Albums and U.S. Afrobeats Songs, as well as year-end rankings and Greatest of All Time charts across various categories.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "week",
        "type": "DATE (YYYY-MM-DD)",
        "description": "",
        "default": "2022-10-08"
      }
    ],
    "code": "import requests\n\nurl = \"https://billboard-api5.p.rapidapi.com/api/charts/independent-albums\"\nquerystring = {\"week\": \"2022-10-08\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api5.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Independent Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides the weekly Billboard Independent Albums chart. The data is structured as a ranked list of albums, where each entry includes the album's title, artist, current rank, and historical performance data such as its rank from the previous week, its peak position, and the total number of weeks it has been on the chart. Additionally, the output contains metadata about the chart itself, including the week's date and links to the previous and next week's charts.",
      "output_format": "The output is a single JSON object. The core data is nested under a 'chart' key, which contains an 'entries' key holding an array of objects. Each object in the array represents an album. The 'positionLastWeek' field within an album's position details can be null, indicating it's a new entry on the chart."
    },
    "connected tools": [
      {
        "tool name": "Billboard API_v2: Independent Albums",
        "connect params": [
          {
            "name": "week",
            "description": "Can use the date from the chart metadata to navigate to previous/next week's chart"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use album title and artist from Independent Albums chart to search on Spotify"
          },
          {
            "name": "type",
            "description": "Can be set to 'albums' to search for albums from the chart"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: email Check SMTP",
    "tool description": "Checks your domain's SMTP configuration to verify email server setup and functionality. This uses APISOLUTION's comprehensive email validation and verification API, designed for developers working on start-ups and staff projects who need to ensure reliable email delivery and communication infrastructure.",
    "required_parameters": [
      {
        "name": "username",
        "type": "STRING",
        "description": "",
        "default": "username"
      },
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/emailCheckSMTP\"\nquerystring = {\"username\": username, \"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "email Check SMTP",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool outputs a simple, plain text status message indicating the result of an SMTP configuration check. The provided examples all show a \"Not Found\" status, which signifies that the tool was unable to find or verify the SMTP server setup for the queried domain. This information is intended to help developers diagnose and troubleshoot email delivery and communication infrastructure problems.",
      "output_format": "The output is a single plain text string, terminated by a newline character. The examples do not show any complex structure like JSON or nested data."
    },
    "connected tools": [
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "The SMTP check result could inform whether to proceed with MX record checking for a domain"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Cloud Cast",
    "parent tool description": "Cloudcast is a simple and efficient API built with Node.js and Express, designed to provide real-time weather information for any city in the world. It is able to fetch and deliver current weather conditions including temperature, humidity, wind speed, and other vital meteorological data.",
    "required_parameters": [
      {
        "name": "city",
        "type": "string",
        "description": "",
        "default": "New York"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://cloud-cast.p.rapidapi.com/hourly/{city}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"cloud-cast.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Cloud Cast: Get hourly forecast",
    "tool description": "Gets the hourly forecast for a specified city. This is part of Cloudcast, a simple and efficient API built with Node.js and Express that provides real-time weather information, including temperature, humidity, wind speed, and other vital meteorological data, ensuring accurate and timely forecasts.",
    "API name": "Get hourly forecast",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns a list of future weather forecasts for a specified city, presented in 3-hour intervals. Each forecast in the list provides detailed meteorological data including temperature (in Kelvin), humidity, wind speed, cloud cover, visibility, and probability of precipitation. In the event of an API failure or an invalid request, the tool may return an HTML error page instead of weather data.",
      "output_format": "A successful response is a JSON array of objects, where each object represents a forecast for a specific 3-hour time block. These objects have a nested structure; for instance, the 'main' key contains temperature and pressure data, and the 'weather' key contains an array with weather descriptions. Some keys, such as 'rain', are conditional and may not be present in all forecast objects. A failed response can be an HTML string."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude extracted from source tool's forecast location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude extracted from source tool's forecast location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude extracted from source tool's forecast location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude extracted from source tool's forecast location data"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get wind speed",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the city name from the source tool's forecast"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get humidty",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the city name from the source tool's forecast"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get the forecast",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the city name from the source tool's forecast"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get current weather",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the city name from the source tool's forecast"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the city name from the source tool's forecast"
          }
        ]
      },
      {
        "tool name": "weather forecast 14 days: Search location by Name or zip code",
        "connect params": [
          {
            "name": "city",
            "description": "Can use the city name from the source tool's forecast"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "resume_key",
        "type": "STRING",
        "description": "Resume results from given ID.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of results from the response.",
        "default": 500
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/flight/downloadAirports\"\nquerystring = {\"resume_key\": \"\", \"limit\": 500}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Download airports",
    "tool description": "Downloads a list of airports with IATA codes to support flight search functionality. This endpoint is part of Priceline.com's travel platform, which enables users to search hotels, cars, and flights. It leverages Priceline's integrated travel API to provide structured airport data, facilitating accurate flight itinerary planning and booking through standardized IATA code references.",
    "API name": "Download airports",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a list of airports, providing detailed information for each. This includes the airport's name, its IATA code (when available), location details like country and state code, geographic coordinates, and a Priceline-specific city ID. The data is intended to support flight search and itinerary planning by providing standardized airport references.",
      "output_format": "The output is a deeply nested JSON object. The list of airports is structured as an object with enumerated keys (e.g., 'airport_0', 'airport_1') rather than a JSON array. The response includes a 'resume_key', which strongly suggests the results are paginated and this key is used as a cursor to retrieve subsequent pages of data. Some fields within an airport object, such as 'iata' and 'state_code', can be null."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: airportInfo",
        "connect params": [
          {
            "name": "iata",
            "description": "Can use IATA codes from the airports list"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportMetar",
        "connect params": [
          {
            "name": "ident",
            "description": "Can use airport identifiers from the airports list"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportFlights",
        "connect params": [
          {
            "name": "ident",
            "description": "Can use airport identifiers from the airports list"
          },
          {
            "name": "counterpart_ident",
            "description": "Can use airport identifiers from the airports list"
          }
        ]
      },
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use airport location information to identify destinations"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from airport geographic coordinates"
          },
          {
            "name": "lng",
            "description": "Can use longitude from airport geographic coordinates"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from airport geographic coordinates"
          },
          {
            "name": "lng",
            "description": "Can use longitude from airport geographic coordinates"
          }
        ]
      }
    ]
  }
]