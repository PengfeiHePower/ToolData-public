[
  {
    "parent tool name": "Alpha Email Verification",
    "parent tool description": "Email Validation Service. check if a specific e-mail address is valid. Is it a proper domain? Is the e-mail a temporary/disposable e-mail? Our API contains 180k disposable email domains and gives the most valid email",
    "required_parameters": [
      {
        "name": "email",
        "type": "string",
        "description": "",
        "default": "rahul@gmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://alpha-email-verification.p.rapidapi.com/disposable/{email}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"alpha-email-verification.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Alpha Email Verification: Email Checker",
    "tool description": "Checks if an email address provided by the user is valid and identifies if it's a disposable email. This uses a database of 180,000 disposable email domains to verify legitimacy and detect temporary addresses, ensuring accurate email validation.",
    "API name": "Email Checker",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool's output specifies whether a given email address is identified as disposable. It provides a single boolean key, 'disposable', which is set to 'false' if the email is from a legitimate domain and would presumably be 'true' if it's from a known temporary or disposable email provider.",
      "output_format": "The output is a JSON array containing one or more strings. Each string is a string-encoded JSON object. This inner object contains a single key, \"disposable\", with a boolean value. The key appears to be non-nullable."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "param_name": "domain",
            "description": "The domain extracted from the email address that was checked by Alpha Email Verification"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "param_name": "email",
            "description": "The email address that was checked by Alpha Email Verification"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Blaze Verify",
    "parent tool description": "Email Verification by Emailable is astonishingly easy and low-cost. Simple, reliable, and affordable list cleaning shouldn\u2019t be hard to find. Emailable helps marketers and developers build powerful and effective marketing campaigns.<br><a href=\"https://emailable.com/docs/api?utm_source=rapid_api&utm_medium=web&utm_campaign=short_description\" style='font-weight:bold;'>View API Docs</a> | <a href=\"https://app.emailable.com/signup?utm_source=rapid_api&utm_medium=web&utm_campaign=short_description\" style='font-weight:bold;'>Click Here to Sign Up for an API Key</a>",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "The email you want verified.",
        "default": ""
      }
    ],
    "optional_parameters": [
      {
        "name": "accept_all",
        "type": "BOOLEAN",
        "description": "Does an accept-all check. Heavily impacts API's response time. Default: false",
        "default": ""
      },
      {
        "name": "smtp",
        "type": "BOOLEAN",
        "description": "The SMTP step takes up a majority of the API's response time. If you would like to speed up your response times, you can disable this step. Default: true",
        "default": ""
      },
      {
        "name": "timeout",
        "type": "NUMBER",
        "description": "Optional timeout to wait for response (in seconds). Min: 2, Max: 30. Default: 5",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://blaze-verify.p.rapidapi.com/v1/verify\"\nquerystring = {\"email\": email}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"blaze-verify.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Blaze Verify: Verify an email",
    "tool description": "Verifies a single email address, allowing retries within a 5-minute window before counting against usage. This endpoint leverages Emailable's reliable email verification service, designed for marketers and developers to ensure accurate email lists. It utilizes a robust backend to validate addresses efficiently, providing results once available while managing retry policies to optimize usage, all through a simple, low-cost solution for clean data and effective marketing campaigns.",
    "API name": "Verify an email",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a detailed verification report for a single email address. The output includes a deliverability state (e.g., 'deliverable'), a confidence score, and the reason for the determination. It also provides metadata about the email, such as whether it belongs to a disposable or free service, is role-based, and includes inferred information like the user's name and gender. This data is intended to help users clean email lists and improve marketing campaign effectiveness.",
      "output_format": "The output is a single, flat JSON object. Several fields, such as 'did_you_mean', 'last_name', and 'tag', are nullable and will contain a null value if the information is not available or applicable. The output does not contain arrays or any form of pagination."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "The email address that was verified by Blaze Verify can be passed to this tool for additional verification"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "The email address that was verified by Blaze Verify can be passed to this tool to check its MX records"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain portion of the email address verified by Blaze Verify can be extracted and passed to this tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain portion of the email address verified by Blaze Verify can be extracted and passed to this tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain portion of the email address verified by Blaze Verify can be extracted and passed to this tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "username",
            "description": "The username portion of the email address verified by Blaze Verify can be extracted and passed to this tool"
          },
          {
            "name": "domain",
            "description": "The domain portion of the email address verified by Blaze Verify can be extracted and passed to this tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "The email address that was verified by Blaze Verify can be passed to this tool to check if it's disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email Existence Validator",
    "parent tool description": "API which checks if email really exist on server or not.\nIt check for different parameters for giving end results .\nCheck for MX records, SMTP deliverability, Disposable check and many more.",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "",
        "default": "example@gmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-existence-validator.p.rapidapi.com/getmx\"\nquerystring = {\"email\": email}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"email-existence-validator.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Email Existence Validator: Get the MX Records",
    "tool description": "Retrieves MX records associated with the domain of a given email address to verify its validity. This endpoint is part of an API designed to check if an email exists on a server by analyzing MX records, SMTP deliverability, and disposable email status. It leverages DNS infrastructure checks and server-level validations to provide structured results, helping determine whether the email address is reachable and authentic.",
    "API name": "Get the MX Records",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object detailing the Mail Exchange (MX) records for a specified email's domain. This output includes the operational status, a timestamp of the check, and the MX records themselves. The records are used to determine if a domain is configured to receive email, which is a primary step in validating an email address's existence and reachability.",
      "output_format": "The output is a single JSON object. The `mx` field is polymorphic; it contains an array of arrays if records are found (each inner array being a [priority_number, server_string] pair) or a descriptive string if no records are found. The `status` and `datetime` fields are strings. The structure is flat, with no pagination or cursoring."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "domain",
            "description": "The source tool provides MX records for a domain, which is relevant for SMTP checking"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The source tool provides MX records for a domain, which can help determine if it's disposable"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "The source tool provides MX records for a domain, which can help determine domain availability"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "The source tool provides MX records for a domain, which is relevant for role account verification"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/FreeDomain\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "fast Email verifier: FreeDomain",
    "tool description": "Checks if a domain is available by querying a database of registered domains. This is part of APISOLUTION's comprehensive API suite for developers, which includes email validation and verification tools, helping startups and staff projects ensure domain availability and email reliability efficiently.",
    "API name": "FreeDomain",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The output is a simple text string indicating the availability of a queried domain. The value \"Not Found\" suggests the domain is not in the database of registered domains, and is therefore available for registration. This tool helps users quickly verify if a desired domain name can be registered.",
      "output_format": "The output is a raw text string, ending with a newline character. It is a non-serialized, flat structure without any nesting. The provided examples show multiple runs, but each individual output is a single string."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain name to check for role accounts"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain name to check if disposable"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain name to check SMTP configuration"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/disposableDomain\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
    "tool description": "Checks if a domain is disposable and provides a suggested domain. This is part of APISOLUTION's comprehensive API for email validation and verification, leveraging its database of verified email domains to ensure reliability and accuracy, helping developers and startups streamline email address validation and reduce errors in communication.",
    "API name": "disposable Domain and Suggest Domain",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object with two main pieces of information about a given email domain. The 'IsDisposable' key provides a human-readable sentence indicating whether the domain is a temporary, disposable one. The 'suggestion' key provides a sentence either suggesting a correction for a likely misspelled domain or confirming that no misspellings were found. This helps developers validate email addresses to ensure they are from legitimate, non-temporary domains.",
      "output_format": "The output is a single, flat JSON object. The provided examples are string representations of a dictionary (using single quotes), but the actual output is assumed to be a standard JSON object. Both the 'IsDisposable' and 'suggestion' keys contain string values which are full, human-readable sentences, not booleans or simple keywords."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the domain suggestion to correct potentially misspelled email domains"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the domain suggestion to correct potentially misspelled email domains"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the domain suggestion to correct potentially misspelled email domains"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the disposable domain information to validate if a domain is disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Alpha Email Verification",
    "parent tool description": "Email Validation Service. check if a specific e-mail address is valid. Is it a proper domain? Is the e-mail a temporary/disposable e-mail? Our API contains 180k disposable email domains and gives the most valid email",
    "tool name": "Alpha Email Verification: Email Checker",
    "tool description": "Checks if an email address provided by a user for registration is valid, disposable, or potentially problematic. This email validation service leverages a comprehensive database of over 180,000 disposable email domains to verify not only if the email has a proper domain structure but also determines whether it's a temporary/disposable address. The service provides highly accurate validation results to help maintain clean user databases and prevent registration with throwaway email accounts.",
    "required_parameters": [
      {
        "name": "email",
        "type": "string",
        "description": "",
        "default": "rahul@gmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://alpha-email-verification.p.rapidapi.com/disposable/{email}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"alpha-email-verification.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Email Checker",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool output indicates whether a provided email address is considered disposable. The output is a simple object containing a single boolean key, 'disposable'. A value of 'true' signifies the email is from a temporary/throwaway domain, while 'false' indicates it is not. This allows applications to filter out low-quality sign-ups.",
      "output_format": "The output is a JSON object, which may be returned as a string. It contains a single key-value pair where the key is \"disposable\" and the value is a boolean."
    },
    "connected tools": [
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "This parameter can use the email address that was checked by the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "This parameter can use the domain extracted from the email that was checked by the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Blaze Verify",
    "parent tool description": "Email Verification by Emailable is astonishingly easy and low-cost. Simple, reliable, and affordable list cleaning shouldn\u2019t be hard to find. Emailable helps marketers and developers build powerful and effective marketing campaigns.<br><a href=\"https://emailable.com/docs/api?utm_source=rapid_api&utm_medium=web&utm_campaign=short_description\" style='font-weight:bold;'>View API Docs</a> | <a href=\"https://app.emailable.com/signup?utm_source=rapid_api&utm_medium=web&utm_campaign=short_description\" style='font-weight:bold;'>Click Here to Sign Up for an API Key</a>",
    "tool name": "Blaze Verify: Verify an email",
    "tool description": "Verifies a single email address, with the option to retry verification requests for up to 5 minutes if they exceed the timeout (after which additional requests count against your usage). This uses Emailable's astonishingly easy and low-cost email verification service, which provides simple, reliable, and affordable list cleaning for marketers and developers. The service helps build powerful and effective marketing campaigns by ensuring your email lists contain valid addresses, with verification results returned as soon as they're available.",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "The email you want verified.",
        "default": ""
      }
    ],
    "optional_parameters": [
      {
        "name": "accept_all",
        "type": "BOOLEAN",
        "description": "Does an accept-all check. Heavily impacts API's response time. Default: false",
        "default": ""
      },
      {
        "name": "smtp",
        "type": "BOOLEAN",
        "description": "The SMTP step takes up a majority of the API's response time. If you would like to speed up your response times, you can disable this step. Default: true",
        "default": ""
      },
      {
        "name": "timeout",
        "type": "NUMBER",
        "description": "Optional timeout to wait for response (in seconds). Min: 2, Max: 30. Default: 5",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://blaze-verify.p.rapidapi.com/v1/verify\"\nquerystring = {\"email\": email}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"blaze-verify.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Verify an email",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool provides a detailed verification report for a single email address. This report includes the deliverability status (e.g., 'deliverable', 'undeliverable'), a numeric score, and the reason for the status. It also returns metadata about the email, such as whether it is a disposable, role-based, or free email address, and provides technical details like the domain's MX record and SMTP provider. The output may also contain inferred personal information like name and gender.",
      "output_format": "The output is a single, non-nested JSON object. Several fields, such as `did_you_mean`, `last_name`, and `tag`, can be null if the information is not found or not applicable."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the verified email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the verified email address from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "Can extract and use the domain portion from the verified email"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can extract and use the domain portion from the verified email"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can extract and use the domain portion from the verified email"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "username",
            "description": "Can extract the username portion from the verified email"
          },
          {
            "name": "domain",
            "description": "Can extract the domain portion from the verified email"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Easy Email Validation",
    "parent tool description": "Use this API to quickly and effectively validate an email addresses. This API runs the following checks: valid email format, mx Record, and disposable email.",
    "tool name": "Easy Email Validation: Validate Email",
    "tool description": "Validates an email address by checking its format and authenticity. This API runs comprehensive verification checks including valid email format validation, MX record verification to confirm the domain can receive emails, and detection of disposable email addresses, providing a quick and effective way to ensure email addresses are legitimate and usable for communication purposes.",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "",
        "default": "example@gmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://easy-email-validation.p.rapidapi.com/validate\"\nquerystring = {\"email\": email}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"easy-email-validation.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Validate Email",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool's output provides a detailed validation report for a single email address. It returns the original email, its extracted domain, and several boolean flags indicating its overall validity, whether the domain has a mail exchange (MX) record, and if it's from a disposable email provider. This information helps a user determine if an email address is legitimate and usable for communication.",
      "output_format": "The output is a single, flat JSON object for each validated email. There is no nesting or pagination indicated. All keys appear to be non-nullable based on the examples provided."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email from the source tool"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the extracted domain from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the extracted domain from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the extracted domain from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the extracted domain from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Address Validator: Validate Email Address",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Validation_v3: Validate_Email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email from the source tool"
          }
        ]
      },
      {
        "tool name": "GetTempMail: Create Email",
        "connect params": [
          {
            "name": "mail",
            "description": "Can use the validated email from the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email Address Validator",
    "parent tool description": "Stop guessing if an email is valid or full. With this API, you can determine first hand if the email is deliverable and working. Not only can this API detect if an email is formatted correctly, it also uses various methods to verify if the email is actually valid",
    "tool name": "Email Address Validator: Validate Email Address",
    "tool description": "Determines firsthand if an email address is deliverable and working by checking its validity. This API goes beyond simple format validation to actively verify if the email is actually functional, using various methods to confirm deliverability. It helps eliminate guesswork about whether an email address is valid or full, providing definitive information about email address usability before you attempt to send messages.",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "",
        "default": "test@gmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-address-validator4.p.rapidapi.com/v1/checkemail\"\nquerystring = {\"email\": \"test@gmail.com\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"email-address-validator4.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Validate Email Address",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a detailed validation report for a given email address. The output indicates overall validity with a primary boolean flag and provides a breakdown of individual checks like syntax (regex), typos, disposable domains, MX records, and SMTP server connectivity. For validation failures, it specifies the check that failed and may include technical error details.",
      "output_format": "The output is a stringified JSON object. A successful API call returns a complex, nested object containing a 'status' and a 'data' field, which in turn holds the detailed validation results. An unsuccessful API call returns a simpler object with a 'message' key describing the error."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Email address that was validated by the source tool"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Email address that was validated by the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Email address that was validated by the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "Domain extracted from the validated email address"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "username",
            "description": "Username portion extracted from the validated email address"
          },
          {
            "name": "domain",
            "description": "Domain portion extracted from the validated email address"
          }
        ]
      },
      {
        "tool name": "Email Validation_v3: Validate_Email",
        "connect params": [
          {
            "name": "email",
            "description": "Email address that was validated by the source tool"
          }
        ]
      },
      {
        "tool name": "GetTempMail: Create Email",
        "connect params": [
          {
            "name": "mail",
            "description": "Email address that was validated by the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email API",
    "parent tool description": "This Email API is helpful to validate email addresses(single or bulk, using txt and csv), detect temporary, get fake emails, check free emails, check MX records and identify free/paid email service providers.",
    "tool name": "Email API: Get Fake Email Address",
    "tool description": "Generates a fake business email address and job title for testing or demonstration purposes. This endpoint leverages the Email API's comprehensive validation and generation capabilities, which typically handles email verification, temporary email detection, and service provider identification. The fake business email feature allows developers to create realistic professional email addresses paired with appropriate job titles, useful for prototyping applications, testing email functionality, or creating sample data without using real personal information.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-api8.p.rapidapi.com/fake_email\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"email-api8.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Fake Email Address",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool output provides a single, randomly generated fake business email address and a corresponding job title. This information is intended for development purposes, such as populating user profiles in a test environment or creating sample data without using real personal information.",
      "output_format": "The output is a single JSON object containing two key-value pairs. The keys are 'email' and 'job_title', and their corresponding values are strings. There is no nesting, and fields are expected to be non-null. The provided examples are a list of serialized JSON objects, but the tool is assumed to return a single object per call."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the fake email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the fake email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the fake email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the fake email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Validation_v3: Validate_Email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the fake email address from the source tool"
          }
        ]
      },
      {
        "tool name": "GetTempMail: Create Email",
        "connect params": [
          {
            "name": "mail",
            "description": "Can use the fake email address from the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email Existence Validator",
    "parent tool description": "API which checks if email really exist on server or not.\nIt check for different parameters for giving end results .\nCheck for MX records, SMTP deliverability, Disposable check and many more.",
    "tool name": "Email Existence Validator: Help Page",
    "tool description": "Provides simple help to the user on how to use the email verification service. This endpoint offers guidance on utilizing the API that checks if email addresses truly exist on servers by examining multiple parameters such as MX records, SMTP deliverability, and disposable email detection. The service delivers comprehensive verification results to determine email validity, helping users understand how to leverage these email validation capabilities effectively.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-existence-validator.p.rapidapi.com/help\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"email-existence-validator.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Help Page",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The output provides metadata and guidance for the email validation service. It returns a status message, a definitive list of supported email domains, and a direct URL to the full API documentation. This information helps users understand the service's capabilities and where to find detailed instructions for use.",
      "output_format": "The output is a single, flat JSON object. It contains a key named \"domain\" which holds an array of strings listing the supported domains. The structure is not nested and does not use pagination."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain parameter can use the list of supported domains from the help page output"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain parameter can use the list of supported domains from the help page output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email Existence Validator",
    "parent tool description": "API which checks if email really exist on server or not.\nIt check for different parameters for giving end results .\nCheck for MX records, SMTP deliverability, Disposable check and many more.",
    "tool name": "Email Existence Validator: Check for Disposable emails",
    "tool description": "Checks if a given email address is disposable or temporary, determining whether it's a throwaway account. This uses an email verification API that examines multiple parameters to validate email authenticity, including MX records and SMTP deliverability tests. The service helps identify potentially fraudulent or short-lived email addresses by analyzing server-side existence and classification patterns, enabling you to maintain cleaner contact lists and reduce communication with non-permanent addresses.",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "",
        "default": "example@besttempmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-existence-validator.p.rapidapi.com/disposable\"\nquerystring = {\"email\": email}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"email-existence-validator.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Check for Disposable emails",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool's output is an object containing the results of an email validation check. It provides a status of the check, a boolean flag indicating if the email is disposable, and the specific date and time the check was performed. This information is used to identify and filter temporary or throwaway email addresses.",
      "output_format": "The output is a single, non-nested JSON object, provided as a string. It does not contain arrays or pagination features."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The tool can use the domain extracted from the email that was checked by the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email Existence Validator",
    "parent tool description": "API which checks if email really exist on server or not.\nIt check for different parameters for giving end results .\nCheck for MX records, SMTP deliverability, Disposable check and many more.",
    "tool name": "Email Existence Validator: Get the MX Records",
    "tool description": "Retrieves MX (Mail Exchange) records associated with a given email address. This endpoint is part of an email verification API that checks if an email truly exists on a server by examining multiple parameters including MX records, SMTP deliverability, and disposable email detection. The service analyzes the domain's mail server configuration to help determine email validity as part of a comprehensive verification process.",
    "required_parameters": [
      {
        "name": "email",
        "type": "STRING",
        "description": "",
        "default": "example@gmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-existence-validator.p.rapidapi.com/getmx\"\nquerystring = {\"email\": email}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"email-existence-validator.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get the MX Records",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The output provides the results of a Mail Exchange (MX) record lookup for a given email's domain. It includes the status of the request, a timestamp, and the MX records themselves. When records are found, they are presented as a list of servers and their corresponding priority numbers. If no records are found, a descriptive string message is provided instead.",
      "output_format": "The output is a single JSON object. The `mx` key is polymorphic: its value is an array of arrays when records are found (e.g., [[priority, server_name], ...]), but it becomes a single string when no records are found or a DNS error occurs. There is no pagination."
    },
    "connected tools": [
      {
        "tool name": "Easy Email Validation: Validate Email",
        "connect params": [
          {
            "name": "email",
            "description": "The email address whose domain's MX records were retrieved by the source tool"
          }
        ]
      },
      {
        "tool name": "Email Address Validator: Validate Email Address",
        "connect params": [
          {
            "name": "email",
            "description": "The email address whose domain's MX records were retrieved by the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain from the email whose MX records were retrieved by the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Email Validation_v3",
    "parent tool description": "Check disposable email addresses",
    "tool name": "Email Validation_v3: Validate_Email",
    "tool description": "Validates an email address format and determines whether it is disposable or not. This tool checks against a database of known disposable email providers to identify temporary or throwaway email addresses, helping to maintain data quality and prevent abuse from fake or temporary accounts in your systems.",
    "required_parameters": [
      {
        "name": "email",
        "type": "string",
        "description": "",
        "default": "support@rapidapi.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://email-validation12.p.rapidapi.com/support@rapidapi.com\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"email-validation12.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Validate_Email",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a detailed analysis for a single email address in a JSON object. The output includes boolean flags indicating if the email is from a disposable provider, a role-based account, or associated with spam. It also provides technical data about the domain, such as its age, whether it has valid MX records, and the specific MX record details, which is useful for validating email quality and deliverability.",
      "output_format": "The output is a single, non-paginated JSON object. It contains a nested array of objects for the `mx_records` field, where each object has a 'hostname' and 'priority'. Several fields, such as `did_you_mean` and `domain_age_in_days`, can be null."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email address from the source tool"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Can use the validated email address from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "Can extract and use the domain portion from the validated email"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can extract and use the domain portion from the validated email"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can extract and use the domain portion from the validated email"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "username",
            "description": "Can extract the username portion from the validated email"
          },
          {
            "name": "domain",
            "description": "Can extract the domain portion from the validated email"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: Role Account",
    "tool description": "Checks the rols account associated with your domain, allowing you to verify domain-specific email configurations. This endpoint leverages APISOLUTION's comprehensive email validation and verification API, designed for developers working on start-ups and staff projects who need fast, reliable email infrastructure assessment.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/IsRoleAccount\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Role Account",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "This tool checks if a given email domain is classified as a \"RoleAccount domain\". Based on the examples, this appears to identify common free email providers (like gmail.com, yahoo.com) and distinguish them from what are presumably corporate or organizational domains. The output is a simple statement confirming the result of the check, or a \"Not Found\" message if the domain cannot be processed or is invalid.",
      "output_format": "The output format is inconsistent. A successful lookup returns a string that represents a single key-value pair, similar to a Python dictionary (`{'RoleAccount': '...'}`). An error or a case where the domain is not found returns a simple plain text string ('Not Found\\n'). The output is not serialized as a standard JSON object and is not nested or paginated."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain classification can be used to check if it's disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: FreeDomain",
    "tool description": "Checks whether a domain is available for registration or already taken. This endpoint leverages APISOLUTION's comprehensive API infrastructure, which specializes in email validation and verification services designed for developers working on start-ups and staff projects, allowing you to quickly determine domain availability as part of your email system setup or digital presence planning.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/FreeDomain\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "FreeDomain",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "This tool checks if a given domain is associated with a free email provider, such as gmail.com or yahoo.com. The output is a status message indicating whether the domain is classified as a free domain. If the tool cannot find or classify the domain, it returns a \"Not Found\" message.",
      "output_format": "The output format is inconsistent. It can be a string that represents a JSON object with a single key, \"FreeDomain\", whose value is a human-readable status string. Alternatively, it can be a simple plain text string, like \"Not Found\", which may include a trailing newline character. The output is a single entity, not an array, and does not support pagination."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain identified as free can be checked if it's also disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
    "tool description": "Determines if a domain is disposable and provides a suggested alternative domain. This API leverages APISOLUTION's comprehensive email validation and verification system, designed to help developers quickly assess email domain quality and reliability for start-ups and staff projects, ensuring more legitimate user registrations and communications.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/disposableDomain\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "disposable Domain and Suggest Domain",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool's output indicates whether a given email domain is considered disposable and provides a suggested alternative if a misspelling is detected. A successful response contains the verdict on disposability and the suggestion as natural language strings. The tool can also return error messages, such as a service suspension notice in HTML format or a 'Not Found' message in plain text, indicating different failure states.",
      "output_format": "The output format is highly inconsistent and can be one of three types: a string containing a non-standard JSON object (using single quotes), a full HTML document for service-level errors, or a plain text string for other errors. The successful, JSON-like response is a flat object with string values that must be parsed from the parent string."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: FreeDomain",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the suggested domain from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: Role Account",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the suggested domain from the source tool"
          }
        ]
      },
      {
        "tool name": "fast Email verifier: email Check SMTP",
        "connect params": [
          {
            "name": "domain",
            "description": "Can use the suggested domain from the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: email Check SMTP",
    "tool description": "Checks your domain's SMTP configuration to verify email server setup and functionality. This uses APISOLUTION's comprehensive email validation and verification API, designed for developers working on start-ups and staff projects who need to ensure reliable email delivery and communication infrastructure.",
    "required_parameters": [
      {
        "name": "username",
        "type": "STRING",
        "description": "",
        "default": "username"
      },
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/emailCheckSMTP\"\nquerystring = {\"username\": username, \"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "email Check SMTP",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool outputs a simple, plain text status message indicating the result of an SMTP configuration check. The provided examples all show a \"Not Found\" status, which signifies that the tool was unable to find or verify the SMTP server setup for the queried domain. This information is intended to help developers diagnose and troubleshoot email delivery and communication infrastructure problems.",
      "output_format": "The output is a single plain text string, terminated by a newline character. The examples do not show any complex structure like JSON or nested data."
    },
    "connected tools": [
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "The SMTP check result could inform whether to proceed with MX record checking for a domain"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Get emails from url",
    "parent tool description": "Get all unique email address by url.",
    "tool name": "Get emails from url: Get emails",
    "tool description": "Retrieves all unique email addresses found on a specified URL. This tool scans the target webpage to extract email addresses, helping users collect contact information without manual searching. It's useful for lead generation, contact discovery, or building outreach lists from websites.",
    "required_parameters": [
      {
        "name": "url",
        "type": "STRING",
        "description": "",
        "default": "https://google.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://get-emails-from-url.p.rapidapi.com/\"\nquerystring = {\"url\": url}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"get-emails-from-url.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get emails",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The output is a list of unique email addresses extracted from a specified URL. This information is intended to be used for collecting contact information, such as for lead generation, sales outreach, or building contact databases from public web pages.",
      "output_format": "The output is a single string that contains a string representation of a list of emails, for example: \"['support@rapidapi.com', 'info@rapidapi.com']\". This is not a standard JSON array and would require parsing to access the list elements. The list itself contains strings, where each string is an email address. There is no nesting or pagination."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "description": "Email address to verify"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "description": "Email address to verify"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "description": "Email address to check MX records for"
          }
        ]
      },
      {
        "tool name": "Email Address Validator: Validate Email Address",
        "connect params": [
          {
            "name": "email",
            "description": "Email address to validate"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "description": "Email address to check if disposable"
          }
        ]
      },
      {
        "tool name": "Email Validation_v3: Validate_Email",
        "connect params": [
          {
            "name": "email",
            "description": "Email address to validate"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "GetTempMail",
    "parent tool description": "Temporary Email",
    "tool name": "GetTempMail: Create Email",
    "tool description": "Creates a new temporary email address that you can use immediately for receiving messages. This service provides disposable email addresses that help protect your privacy online by allowing you to avoid sharing your personal email when signing up for websites, services, or newsletters. The temporary email addresses are fully functional for receiving messages but automatically expire after a set period, helping you avoid spam and keeping your primary inbox clean.",
    "required_parameters": [
      {
        "name": "mail",
        "type": "string",
        "description": "",
        "default": "test@gettempmail.com"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://gettempmail1.p.rapidapi.com/api/email/{mail}/key\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"gettempmail1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Create Email",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "The tool returns a single string as its output. Upon successful execution, this string contains a newly generated temporary email address. If the tool encounters a server-side problem, it returns an HTML document detailing the error instead of an email address.",
      "output_format": "The output is a single, unformatted string. Depending on the success of the operation, this string can either be a plain email address (e.g., 'user@example.com') or a full HTML document for an error page."
    },
    "connected tools": [
      {
        "tool name": "Alpha Email Verification: Email Checker",
        "connect params": [
          {
            "name": "email",
            "type": "string"
          }
        ]
      },
      {
        "tool name": "Blaze Verify: Verify an email",
        "connect params": [
          {
            "name": "email",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Get the MX Records",
        "connect params": [
          {
            "name": "email",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Easy Email Validation: Validate Email",
        "connect params": [
          {
            "name": "email",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Email Address Validator: Validate Email Address",
        "connect params": [
          {
            "name": "email",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Email Existence Validator: Check for Disposable emails",
        "connect params": [
          {
            "name": "email",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Email Validation_v3: Validate_Email",
        "connect params": [
          {
            "name": "email",
            "type": "string"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 14
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/natr\"\nquerystring = {\"outputsize\": 30, \"time_period\": 14, \"symbol\": \"AAPL\", \"interval\": \"1min\", \"format\": \"json\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: NATR",
    "tool description": "Calculates the Normalized Average True Range (NATR) to analyze price volatility across different assets, providing a normalized metric for comparative analysis. This endpoint leverages the parent tool's financial data API, which offers real-time and historical data on stocks, forex, crypto, ETFs, and indices, enabling developers to build tools that assess market trends with consistent, standardized metrics.",
    "API name": "NATR",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns the Normalized Average True Range (NATR) for a given financial asset. The output consists of metadata describing the asset (e.g., symbol, interval, type) and the indicator parameters, alongside a time-series list of NATR values. Each entry in the list includes a specific datetime and the calculated NATR value, which helps in analyzing and comparing price volatility across different assets.",
      "output_format": "The response is a single JSON object containing two top-level keys: `meta` (an object with metadata) and `values` (an array of objects). Each object in the `values` array represents a data point in time, containing a `datetime` string and the corresponding `natr` value, also as a string. The fields within the `meta` object may vary depending on the type of asset (e.g., stocks have a `currency` field, while forex/crypto pairs have `currency_base` and `currency_quote`). The output examples are truncated, suggesting the `values` array can be long."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "param_name": "symbol",
            "description": "The symbol from NATR output's metadata can be used to query the same asset"
          },
          {
            "param_name": "interval",
            "description": "The interval from NATR output's metadata can be used to maintain consistent timeframes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "param_name": "symbol",
            "description": "The symbol from NATR output's metadata can be used for further technical analysis"
          },
          {
            "param_name": "interval",
            "description": "The interval from NATR output's metadata can be mapped to Alpha Vantage intervals"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "param_name": "symbol",
            "description": "The symbol from NATR output's metadata can be used for volatility analysis with Bollinger Bands"
          },
          {
            "param_name": "interval",
            "description": "The interval from NATR output's metadata ensures consistent timeframe analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ATR",
        "connect params": [
          {
            "param_name": "symbol",
            "description": "The symbol from NATR output's metadata can be used to get the non-normalized ATR for the same asset"
          },
          {
            "param_name": "interval",
            "description": "The interval from NATR output's metadata ensures consistent timeframe analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: KELTNER",
        "connect params": [
          {
            "param_name": "symbol",
            "description": "The symbol from NATR output's metadata can be used for another volatility-based indicator"
          },
          {
            "param_name": "interval",
            "description": "The interval from NATR output's metadata ensures consistent timeframe analysis"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/topartist_feat/{year}",
    "tool description": "Retrieves a list of top artists on YouTube for a specified year, including those who appeared as featured artists in music videos. This endpoint leverages a comprehensive database of YouTube and Spotify content, providing access to detailed information about music videos, tracks, albums, and artist collaborations across the platform. The data covers both primary artists and featured appearances, allowing users to track popularity trends and collaborative patterns in the music industry through YouTube's vast music video ecosystem.",
    "required_parameters": [
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2022"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/topartist_feat/2022\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/topartist_feat/{year}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a ranked list of the most-viewed artists on YouTube for a given year. For each artist, it provides their rank, name, and total view count. The view count aggregates views from all videos where the artist is credited, including both primary and featured roles, making it useful for tracking overall artist popularity and collaborative impact.",
      "output_format": "The output is a JSON array of objects, where each object represents an artist. The objects contain three key-value pairs: 'ranking', 'artist', and 'views'. All values are formatted as strings, including the numerical rank and view count. The 'views' string includes commas as thousands separators."
    },
    "connected tools": [
      {
        "tool name": "K-POP: Idols",
        "connect params": [
          {
            "name": "q",
            "description": "Query to search\n(Required)"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Full name of songs or artists"
          }
        ]
      },
      {
        "tool name": "Shazam: auto-complete",
        "connect params": [
          {
            "name": "term",
            "description": "Any word or phrase of song, artist, etc... that you are familiar with"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Search query"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": ""
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": ""
          },
          {
            "name": "type",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Supports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1day"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30`",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/earliest_timestamp\"\nquerystring = {\"outputsize\": 30, \"symbol\": \"AAPL\", \"interval\": \"1day\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: Earliest Timestamp",
    "tool description": "Retrieves the first available DateTime for a given financial instrument at a specified interval, enabling precise timing calculations for market data. This endpoint leverages the parent tool's financial data API, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, allowing developers to access structured market information efficiently. By tapping into the API's extensive dataset, it empowers users to synchronize operations with accurate market timestamps, enhancing decision-making for trading strategies or analytical workflows.",
    "API name": "Earliest Timestamp",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The output provides the earliest available timestamp for a specific financial instrument at a given interval. It returns a single object containing this timestamp in two formats: a human-readable datetime string and a corresponding integer Unix timestamp. This information is intended to help users determine the starting point of available historical data for an asset, which is essential for accurate backtesting or time-series analysis.",
      "output_format": "The output is a single JSON object, not an array. It consists of two key-value pairs: 'datetime' (string) and 'unix_time' (integer). The format of the 'datetime' string appears to vary (e.g., 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS'), likely depending on the granularity of the interval requested in the input. The structure is flat and not paginated."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "interval",
            "description": "The timestamp can help determine appropriate interval based on data availability"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Funding Rate History",
        "connect params": [
          {
            "name": "start",
            "description": "The Unix timestamp can be used as the starting point for funding rate history"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Index Price Kline",
        "connect params": [
          {
            "name": "start",
            "description": "The Unix timestamp can be used as the starting point for index price data"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Mark Price Kline",
        "connect params": [
          {
            "name": "start",
            "description": "The Unix timestamp can be used as the starting point for mark price data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "interval",
            "description": "The timestamp can help determine appropriate interval based on data availability"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "German Police and Crime News Live",
    "parent tool description": "An API showing all the latest Police, Crime, Accident etc. News in Germany",
    "tool name": "German Police and Crime News Live: Get all Police News",
    "tool description": "Retrieves the latest news about police activities, crimes, accidents, and similar incidents specifically from Germany. This API aggregates and delivers current public safety and emergency-related news content from across German sources, providing up-to-date information on law enforcement operations, criminal incidents, traffic accidents, and other public safety events occurring throughout the country.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://german-police-and-crime-news-live.p.rapidapi.com/news\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"german-police-and-crime-news-live.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get all Police News",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of news articles related to police activities, crime, and public safety in Germany. Each article in the list includes a title, a URL to the full story, and the name of the news source. This allows users to get a summary of and links to current public safety news from various German media outlets.",
      "output_format": "The output is a JSON-formatted string that represents a top-level array of objects. Each object corresponds to a single news article and contains three string fields: 'title', 'url', and 'source'. Some 'title' fields may contain extra whitespace or newline characters."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could use titles from German police news articles as search terms to find related business/finance news"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could search for movie news related to crime stories from German police news"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Could use titles or key terms from German police news as search keywords"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "National Weather Service",
    "parent tool description": "National Weather Service API (api.weather.gov) NOAA (National Oceanic and Atmospheric Administration) provides national weather data as well as past data.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "start",
        "type": "STRING",
        "description": "start, Start time (ISO8601DateTime)",
        "default": ""
      },
      {
        "name": "end",
        "type": "STRING",
        "description": "end, End time (ISO8601DateTime)",
        "default": ""
      },
      {
        "name": "status",
        "type": "STRING",
        "description": "status, Event status (alert, update, cancel)",
        "default": ""
      },
      {
        "name": "zone_type",
        "type": "STRING",
        "description": "zone_type, Zone type (land or marine)",
        "default": ""
      },
      {
        "name": "active",
        "type": "STRING",
        "description": "active, Active alerts (1 or 0)",
        "default": ""
      },
      {
        "name": "type",
        "type": "STRING",
        "description": "type, Event type (list forthcoming)",
        "default": ""
      },
      {
        "name": "point",
        "type": "STRING",
        "description": "point, Point (latitude,longitude)",
        "default": ""
      },
      {
        "name": "state",
        "type": "STRING",
        "description": "State/marine code (list forthcoming)",
        "default": ""
      },
      {
        "name": "zone",
        "type": "STRING",
        "description": "zone, Zone Id (forecast or county, list forthcoming)",
        "default": ""
      },
      {
        "name": "urgency",
        "type": "STRING",
        "description": "urgency, Urgency (expected, immediate)",
        "default": ""
      },
      {
        "name": "region",
        "type": "STRING",
        "description": "region, Region code (list forthcoming)",
        "default": ""
      },
      {
        "name": "certainty",
        "type": "STRING",
        "description": "certainty, Certainty (likely, observed)",
        "default": ""
      },
      {
        "name": "severity",
        "type": "STRING",
        "description": "severity, Severity (minor, moderate, severe)",
        "default": ""
      },
      {
        "name": "limit",
        "type": "STRING",
        "description": " limit, Limit (an integer)",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://national-weather-service.p.rapidapi.com/alerts\"\nquerystring = {\"start\": \"\", \"end\": \"\", \"status\": \"\", \"zone_type\": \"\", \"active\": \"\", \"type\": \"\", \"point\": \"\", \"state\": \"\", \"zone\": \"\", \"urgency\": \"\", \"region\": \"\", \"certainty\": \"\", \"severity\": \"\", \"limit\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"national-weather-service.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "National Weather Service: /alerts?{parameters}",
    "tool description": "Retrieves weather alerts filtered by parameters, returning all alerts if none are specified, with data formatted in CAP-ATOM via ATOM. This endpoint is part of the National Weather Service API (api.weather.gov) operated by NOAA, which provides national weather data and historical records, leveraging real-time meteorological sources to deliver actionable alert information.",
    "API name": "/alerts?{parameters}",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output provides weather alert information. For a successful request, it returns a GeoJSON FeatureCollection object where the 'features' array contains current weather alerts (watches, warnings, advisories) for the specified location. If no alerts are active, this array will be empty. For invalid requests, it returns a structured JSON error object detailing the problem, including the specific parameters that were incorrect.",
      "output_format": "The output is a JSON object. The structure varies based on success or failure. A successful response is a GeoJSON FeatureCollection object with a 'features' array. An error response is a JSON object with keys like 'status', 'title', and 'parameterErrors'. The 'features' array in a successful response can be null or empty if there are no alerts."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "The latitude can be extracted from the geographic coordinates in the weather alerts"
          },
          {
            "name": "lon",
            "description": "The longitude can be extracted from the geographic coordinates in the weather alerts"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "News API_v2",
    "parent tool description": "Google News and Bing News Alternative. The Best API to Search News from the 2500+ Publishers Around The World. ",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "en, zh-Hans, zh-Hant, id, cs, uk, he, ar, de, es-419, ja, ko, fr, it, lv, lt, ml, th, hu, nl, no, pl, pt-419, pt-150, ro, sk, sl, sv, vi, tr, el, bg, ru, sr, mr, hi, bn, ta, te",
        "default": "en"
      },
      {
        "name": "category",
        "type": "STRING",
        "description": "Possible options: business, science, sports, entertainment, health, technology\n\nDefault value: all categories",
        "default": "sports"
      },
      {
        "name": "country",
        "type": "STRING",
        "description": "MY, GB, CN, TW, AU, BW, ET, KR, GH, IE, KE, LV, NA, IN, BD, TH, NZ, NG, PK, PH, SG, ZA, TZ, UG, ZW, ID, CZ, DE, AT, CH, AR, EG, CL, CO, CU, US, MX, PE, VE, LB, CA, FR, MA, SN, IT, LT, HK, JP, HU, BE, NL, NO, PL, BR, PT, RO, SK, SI, SE, VN, TR, GR, BG, RU, RS, UA, IL, AE, SA",
        "default": "us"
      }
    ],
    "code": "import requests\n\nurl = \"https://news-api14.p.rapidapi.com/top-headlines\"\nquerystring = {\"language\": \"en\", \"category\": \"sports\", \"country\": \"us\", \"sortBy\": \"\", \"pageSize\": \"10\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"news-api14.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "News API_v2: Top Headlines",
    "tool description": "Retrieves top headlines news from 2500+ global publishers worldwide. This endpoint serves as part of a comprehensive news aggregation API, offering a reliable alternative to Google News and Bing News by leveraging a vast network of 2500+ publishers to deliver real-time, curated headlines tailored to user preferences and regional relevance.",
    "API name": "Top Headlines",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of recent news headlines from various global publishers. Each headline in the list includes the article's title, a URL to the full story, its publication date, and details about the publisher, such as their name and homepage URL. The output is intended to be used as a real-time feed of top news stories.",
      "output_format": "The output is a JSON object. It contains a top-level key 'articles' which holds an array of nested JSON objects, where each object represents a single news article. Each article object includes string values for 'title', 'url', 'published_date', and a nested 'publisher' object. The 'totalResults' field suggests that the full result set might be larger than the number of articles returned in a single response, implying potential for pagination."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use article titles from the source tool as search terms for business/finance news"
          }
        ]
      },
      {
        "tool name": "Coronavirus Smartable: GetNews",
        "connect params": [
          {
            "param_name": "location",
            "description": "Can extract location information from news articles about specific countries/regions"
          }
        ]
      },
      {
        "tool name": "India Today Unofficial: Tag Search",
        "connect params": [
          {
            "param_name": "tag",
            "description": "Can extract relevant tags/topics from article titles or content summaries"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use movie-related titles or topics from news articles as search terms"
          }
        ]
      },
      {
        "tool name": "Moka News: By Source (New)",
        "connect params": [
          {
            "param_name": "source",
            "description": "Can use publisher information from source tool output"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "param_name": "keyword",
            "description": "Can use article titles or key topics from headlines as search terms"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "boundaries-io",
    "parent tool description": "US Zipcode, County, City, and State Boundaries API:\r\n\r\nA simple & very fast API that will allow you to integrate multiple GeoJson US boundaries results into your apps and systems.\r\n\r\nThis API is designed to be used programatically for optimal performance.  When using the MashApe UI for queries expect significant latency issues on large result sets!",
    "required_parameters": [
      {
        "name": "state",
        "type": "string",
        "description": "",
        "default": "va"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://vanitysoft-boundaries-io-v1.p.rapidapi.com/rest/v1/public/boundary/censustract/state/{state}/county/names\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"vanitysoft-boundaries-io-v1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "boundaries-io: Get County names by State.",
    "tool description": "Returns a list of county names based on a state's acronym. This endpoint is part of the US Zipcode, County, City, and State Boundaries API, which provides GeoJson data for integrating precise geographical boundaries into applications. It leverages a comprehensive database of US counties to deliver accurate and efficient location-based queries, enabling developers to enhance their systems with detailed regional data.",
    "API name": "Get County names by State.",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "Based on the provided examples, this tool's output appears to be either an HTML document or an empty string. The single non-empty example is an HTML page indicating a subscription error, suggesting it's an error message. The intended output, as per the description, is a list of county names, but this is not reflected in the examples.",
      "output_format": "The output format is inconsistent and ambiguous based on the examples. One example is a string containing a full HTML document. The other examples are empty strings. It is not possible to determine the format of a successful response (e.g., JSON array of strings, GeoJSON) from the data provided."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Get Census Tract by County",
        "connect params": [
          {
            "name": "county",
            "description": "County name that would be provided by the source tool"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "RapidWeather",
    "parent tool description": "The proprietary convolutional neural network collects and processes wide range of data sources to cover any location and consider the local nuances of climate.\n\nWe collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations.\n\nFor each point on the globe, RapidWeather provides historical, current and forecasted weather data via light-speed APIs.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "City name, state code and country code divided by comma, Please, refer to [ISO 3166](https://www.iso.org/obp/ui/#search) for the state codes or country codes.\nYou can specify the parameter not only in English. In this case, the API response should be returned in the same language as the language of requested location name if the location is in our predefined list of more than 200,000 locations.",
        "default": "London,UK"
      }
    ],
    "optional_parameters": [
      {
        "name": "units",
        "type": "STRING",
        "description": "Units of measurement. **standard**, **metric **and **imperial **units are available. If you do not use the **units **parameter, **standard **units will be applied by default.",
        "default": ""
      },
      {
        "name": "lang",
        "type": "STRING",
        "description": "You can use the **lang **parameter to get the output in your language",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://rapidweather.p.rapidapi.com/data/2.5/weather\"\nquerystring = {\"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"rapidweather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "RapidWeather: By city name",
    "tool description": "Retrieves weather data for a specific location using a city name, or city, state, and country code (with state support limited to USA locations). This endpoint leverages a proprietary convolutional neural network that integrates global and local weather models, satellite data, radar systems, and a network of weather stations to deliver historical, current, and forecasted weather information. By analyzing local climate nuances and processing data from diverse sources, it provides accurate and context-aware weather insights tailored to any geographic location worldwide.",
    "API name": "By city name",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool output provides a comprehensive snapshot of the current weather conditions for a specified city. It returns a single object containing geographical coordinates, a description of the weather (e.g., 'Clouds', 'Fog'), and detailed meteorological data including temperature (in Kelvin), pressure, humidity, visibility, wind speed, and cloud cover. It also includes supplementary information like sunrise/sunset times and the country code.",
      "output_format": "The tool returns a single, non-paginated JSON object. The data is organized into several nested objects, such as `coord`, `main`, `wind`, and `sys`. The `weather` key contains an array of objects, which consistently holds a single element in the provided examples. Null values are not present in the examples, but some fields may be nullable if data is unavailable."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "source_field": "coord.lat"
          },
          {
            "name": "longitude",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "source_field": "coord.lat"
          },
          {
            "name": "longitude",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "source_field": "coord.lat"
          },
          {
            "name": "longitude",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Current air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Forecast air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Historical air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Reverse geocoding",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Call 5 day / 3 hour forecast data - By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Cities in circle",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "source_field": "coord.lat"
          },
          {
            "name": "lon",
            "source_field": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "source_field": "coord.lat"
          },
          {
            "name": "longitude",
            "source_field": "coord.lon"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Epic Games Store - Free Games",
    "parent tool description": "Unofficial API for scraping Free Games Offers from the Epic Games Store",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "Country Code for local offers. E.g, ES, DE, US. Defaults to US",
        "default": "US"
      }
    ],
    "code": "import requests\n\nurl = \"https://epic-games-store-free-games.p.rapidapi.com/free\"\nquerystring = {\"country\": country}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"epic-games-store-free-games.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Epic Games Store - Free Games: Free Games",
    "tool description": "Retrieves all currently available and upcoming free games from the Epic Games Store, including details about each title and its availability period. This endpoint leverages an unofficial API designed for scraping game offer data, utilizing web scraping techniques to extract real-time information from the Epic Games Store's frontend, providing developers and users with a convenient way to track free game promotions without direct access to Epic's official systems.",
    "API name": "Free Games",
    "domain name": "Gaming",
    "output_info": {
      "output_info_summary": "The tool's output is a detailed list of free games from the Epic Games Store, categorized into currently available and upcoming promotions. For each game, it provides comprehensive information including the title, a detailed description, the offer's start and end dates, the publisher/developer, and links to promotional images. This information is intended to allow users to track and discover free game offers on the platform.",
      "output_format": "The output is a single JSON object. This object contains keys like `currentGames` and, presumably, a key for upcoming games (e.g., `upcomingGames`). The value for each of these keys is a JSON array where each element is a complex object representing a single game. These game objects are deeply nested, containing further objects and arrays for attributes like images, seller details, and categories. Some fields, such as `expiryDate` and `url`, can be null."
    },
    "connected tools": [
      {
        "tool name": "CheapShark - Game Deals: List of Games",
        "connect params": [
          {
            "name": "title",
            "description": "Game titles from Epic Games Store free games can be searched in CheapShark to compare prices across platforms"
          }
        ]
      },
      {
        "tool name": "OpenCritic API: Game Search",
        "connect params": [
          {
            "name": "criteria",
            "description": "Game titles from Epic Games Store free games can be searched for reviews and ratings"
          }
        ]
      },
      {
        "tool name": "OpenCritic API: General Search",
        "connect params": [
          {
            "name": "criteria",
            "description": "Game titles from Epic Games Store free games can be searched for reviews, outlets, and authors"
          }
        ]
      },
      {
        "tool name": "Free-to-Play Games Database: Filter games by multiple tags",
        "connect params": [
          {
            "name": "tag",
            "description": "Game categories from Epic Games Store free games can be used to find similar free games"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "AI Weather by Meteosource",
    "parent tool description": "Accurate hyper-local weather forecasts, powered by our cutting-edge machine learning (ML) models. Historical weather, current weather, weather statistics , and hour-by-hour forecast - all weather data updated in real-time!",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "The UTC day of the data in the past in `YYYY-MM-DD` format.",
        "default": "2021-08-24"
      }
    ],
    "optional_parameters": [
      {
        "name": "lat",
        "type": "STRING",
        "description": "Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4. **Alternatively, you can specify the location by parameter `place_id`.**",
        "default": "37.81021"
      },
      {
        "name": "place_id",
        "type": "STRING",
        "description": "Identifier of a place. To obtain the `place_id` for the location you want, please use `Location endpoints`. **Alternatively, you can specify the location by parameters `lat` and `lon`.**",
        "default": ""
      },
      {
        "name": "units",
        "type": "STRING",
        "description": "Unit system to be used. The available values are:\n\n- `auto`: Select the system automatically, based on the forecast location.\n- `metric`: Metric (SI) units (`\u00b0C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).\n- `us`: Imperial units (`\u00b0F`, `in/h`, `mph`, `in`, `mi`, `Hg`).\n- `uk`: Same as `metric`, except that visibility is in `miles` and wind speeds are in `mph`.\n- `ca`: Same as `metric`, except that wind speeds are in `km/h` and pressure is in `kPa`.\n",
        "default": "auto"
      },
      {
        "name": "lon",
        "type": "STRING",
        "description": "Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4. **Alternatively, you can specify the location by parameter `place_id`.**",
        "default": "-122.42282"
      }
    ],
    "code": "import requests\n\nurl = \"https://ai-weather-by-meteosource.p.rapidapi.com/time_machine\"\nquerystring = {\"lat\": lat, \"units\": units, \"lon\": lon, \"date\": date}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ai-weather-by-meteosource.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "AI Weather by Meteosource: historical_weather",
    "tool description": "Retrieves historical weather data for a specific day within the past 8 years, using GPS coordinates or a place_id from Location endpoints. This is part of a comprehensive weather service powered by advanced machine learning models, offering hyper-local forecasts and historical data, with all weather information updated in real-time to enable detailed analysis of past conditions for planning, research, or decision-making.",
    "API name": "historical_weather",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output provides a detailed historical weather report for a specific location on a given day. It includes top-level metadata about the location (coordinates, timezone, units) and a primary data array. This array contains an hourly breakdown of weather conditions for the entire day, with each entry detailing temperature, wind, cloud cover, pressure, precipitation, and humidity.",
      "output_format": "The tool returns a single JSON object. The key 'data' contains a JSON array of hourly weather records. Each record within the array is a JSON object that includes nested objects for 'wind' and 'precipitation' details. The examples suggest the API returns all 24 hourly records for a day in a single response, with no pagination."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "units",
            "description": "Can reuse the same units from historical_weather for consistency"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from historical_weather's metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "units",
            "description": "Can reuse the same units from historical_weather for consistency"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from historical_weather's metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "units",
            "description": "Can reuse the same units from historical_weather for consistency"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from historical_weather's metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "units",
            "description": "Can reuse the same units from historical_weather for consistency"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "units",
            "description": "Can reuse the same units from historical_weather for consistency"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from historical_weather's metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from historical_weather's metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from historical_weather's location data"
          },
          {
            "name": "lon",
            "description": "Can use longitude from historical_weather's location data"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from historical_weather's metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Stock Sentiment API",
    "parent tool description": "Real-time social sentiment API to track news activity related to a certain stock",
    "required_parameters": [
      {
        "name": "ticker",
        "type": "STRING",
        "description": "",
        "default": "TSLA"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://stock-sentiment-api.p.rapidapi.com/stock_news_sentiment/\"\nquerystring = {\"ticker\": ticker}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"stock-sentiment-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Stock Sentiment API: News Sentiment Data",
    "tool description": "Retrieves a list of articles related to a specific stock along with their compound sentiment scores, providing real-time insights into market sentiment. This endpoint is part of a real-time social sentiment API that analyzes news activity and social media data to gauge public perception of stocks, leveraging AI to process and quantify sentiment from diverse sources for informed decision-making.",
    "API name": "News Sentiment Data",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides a list of recent news articles related to a specific stock. For each article, it returns the publication date and time, the title, a URL link, and a numerical compound sentiment score. This information is intended to give users real-time insights into the market's perception of a stock based on news coverage.",
      "output_format": "The output is a JSON array of objects, where each object represents a single news article. Each object contains consistent keys: 'date' (string), 'time' (string), 'title' (string), 'link' (string), and 'compound' (float). There is no indication of pagination or null values in the provided examples."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Search Endpoint",
        "connect params": [
          {
            "name": "keywords",
            "description": "Can use stock symbols or company names extracted from news article titles"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbols extracted from news article titles"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbols extracted from news article titles"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Most Negative News",
        "connect params": [
          {
            "name": "ticker",
            "description": "Can use stock symbols extracted from news article titles"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Market Data",
        "connect params": [
          {
            "name": "ticker",
            "description": "Can use stock symbols extracted from news article titles"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbols extracted from news article titles"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "SoundCloud Scraper",
    "parent tool description": "An all-in-one SoundCloud scraper/downloader. Scrapes albums, playlists, profiles. Downloads uncut high-quality audios and lyrics.",
    "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
    "tool description": "Fetches complete track details from SoundCloud and provides download links for uncut tracks in both high and standard quality formats. This all-in-one SoundCloud scraper utilizes comprehensive data extraction capabilities to access audio content across albums, playlists, and profiles, allowing you to obtain not just track information but also high-quality audio files and associated lyrics. For implementation guidance, refer to the 'How to Use Audio URLs' tutorial.",
    "required_parameters": [
      {
        "name": "track",
        "type": "STRING",
        "description": "Track URL or ID.",
        "default": "https://soundcloud.com/edsheeran/photograph"
      }
    ],
    "optional_parameters": [
      {
        "name": "download",
        "type": "ENUM",
        "description": "Download quality. Defaults to `sq`.\n* **`hq`**: High and standard quality - 3 quotas\n* **`sq`**: Standard quality - 2 quotas\n* **`none`**: No download - 1 quota\n\nThe final price depends on the existence of the file of the corresponding quality. For example, if `hq` is requested but the high-quality file does not exist, then the price will be 2 quotas if the standard one exists or 1 quota if there is no file available.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://soundcloud-scraper.p.rapidapi.com/v1/track/metadata\"\nquerystring = {\"track\": track}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"soundcloud-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get Track Metadata (1-3 Quotas)",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive JSON object containing metadata for a single SoundCloud track. This includes the track's title, artist, genre, release date, engagement statistics (plays, likes, comments), and publisher details. A key feature is the included array of audio download links, providing URLs for the track in various formats and qualities.",
      "output_format": "The output is a single JSON object. It contains several nested objects, such as 'publisher' and 'user', and a nested array of objects named 'audio', where each object provides a download URL and details for a specific audio format. Several fields can be null, including 'description', 'caption', and 'purchaseUrl'."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use the audio download URLs from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use the audio download URLs from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use the track title and artist name from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use the track title and artist name from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use the track URL from SoundCloud Scraper output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Card Draw Simulator",
    "parent tool description": "Draw cards from a regular 52 playing cards deck with a variety of options.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "suit",
        "type": "STRING",
        "description": "",
        "default": "all"
      },
      {
        "name": "value",
        "type": "STRING",
        "description": "",
        "default": "A"
      }
    ],
    "code": "import requests\n\nurl = \"https://card-draw-simulator.p.rapidapi.com/card\"\nquerystring = {\"suit\": suit, \"value\": value}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"card-draw-simulator.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Card Draw Simulator: Card",
    "tool description": "Draws a single card from a standard 52-card deck. This endpoint is part of a broader toolset designed to facilitate card drawing with various options, leveraging the structured randomness of a standard deck to provide flexible and controlled card selection.",
    "API name": "Card",
    "domain name": "Gaming",
    "output_info": {
      "output_info_summary": "The output provides the identity of a single card drawn from a standard 52-card deck. The card is represented as a single string that concatenates its rank (e.g., 'A', '10', 'Q') and its suit (e.g., 'hearts', 'spades'). This allows for the simulation of a random card draw.",
      "output_format": "The output is a JSON object containing a single key, \"card\". The value associated with this key is a string representing the drawn card. There is no nesting, pagination, or use of arrays."
    },
    "connected tools": [
      {
        "tool name": "Card Draw Simulator: Cards",
        "connect params": [
          {
            "name": "value",
            "description": "The card value from the single card draw could be used to filter for specific card values in multiple draws"
          },
          {
            "name": "suit",
            "description": "The suit from the single card draw could be used to filter for specific suits in multiple draws"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "K-POP",
    "parent tool description": "Get K-POP detailed songs, idol, group info!",
    "tool name": "K-POP: girl-groups",
    "tool description": "Retrieves detailed information about K-pop girl groups, providing comprehensive profiles and data about female idol collectives in the Korean pop music industry. This endpoint taps into an extensive K-POP database that contains rich information about artists, songs, and groups, allowing users to explore specific details about girl groups' formation, members, discography, achievements, and company affiliations. Part of a broader K-POP information service that offers detailed data on various aspects of Korean pop music culture, including individual idols, boy groups, and song specifics.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "Query to search\n(Required)",
        "default": "Twice"
      }
    ],
    "optional_parameters": [
      {
        "name": "by",
        "type": "STRING",
        "description": "default: Stage Name\n'by' parameter help you choose which info you would like to query based on.\n\nOnly the below values can be accepted for 'by'. \n\n- Group Name (default)\n- Short Group Name\n- Korean Name\n- Date of Debut\n- Company\n- Members\n- Original Members\n- Fanclub Name\n- Active",
        "default": "Group Name"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "default: all there is\ncount limit for result",
        "default": ""
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "default: 0\noffset for the result data",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://k-pop.p.rapidapi.com/girl-groups\"\nquerystring = {\"by\": by, \"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"k-pop.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "girl-groups",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of K-pop girl groups with their profile information. Each group's data includes its English and Korean names, debut date, managing company, current and original member count, fan club name, and active status. A URL to a more detailed online profile may also be included.",
      "output_format": "The output is a JSON object containing a `data` key, which holds a JSON array of group objects. Some fields within these objects, such as `Group Profile`, `Short Group Name`, and `Fanclub Name`, are nullable. Numeric values, like the member count, are represented as strings. A `count` key at the top level indicates the number of group objects returned in the `data` array."
    },
    "connected tools": [
      {
        "tool name": "K-POP: songs",
        "connect params": [
          {
            "name": "q",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for songs by that group"
          },
          {
            "name": "by",
            "description": "Can be set to 'Artist' to search songs by the girl group name"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group on YouTube Music"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group"
          },
          {
            "name": "type",
            "description": "Can be set to 'artist' to search specifically for the girl group"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group on Shazam"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/wclprice\"\nquerystring = {\"outputsize\": 30, \"interval\": \"1min\", \"format\": \"json\", \"symbol\": \"AAPL\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: WCLPRICE",
    "tool description": "Calculates the Weighted Close Price (WCLPRICE) using the formula (high + low + close * 2) / 4, providing a smoothed price metric for technical analysis. This endpoint is part of a financial data API that offers real-time and historical data for stocks, forex, crypto, ETFs, and indices, enabling developers to build market analysis tools. The WCLPRICE serves as a foundational indicator for smoothing price data and generating insights into market trends, leveraging the platform's extensive financial dataset for accurate and actionable outputs.",
    "API name": "WCLPRICE",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides historical time-series data for the Weighted Close Price (WCLPRICE) of a specified financial instrument. The output consists of metadata about the requested symbol (e.g., interval, currency, exchange) and a list of data points. Each data point includes a datetime and the corresponding calculated WCLPRICE, which is used in technical analysis to smooth price data and identify market trends.",
      "output_format": "The output is a single JSON object containing two top-level keys: 'meta' and 'values'. The 'meta' key holds an object with metadata about the request. The 'values' key holds a JSON array of objects, where each object represents a single time-series data point with 'datetime' and 'wclprice' keys. All values, including the numerical WCLPRICE, are returned as strings. The metadata fields can vary slightly depending on the asset type (e.g., stocks vs. forex)."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          },
          {
            "name": "series_type",
            "description": "Can use WCLPRICE values as input series"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          },
          {
            "name": "series_type",
            "description": "Can use WCLPRICE values as input series"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          },
          {
            "name": "series_type",
            "description": "Can use WCLPRICE values as input series"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          },
          {
            "name": "series_type",
            "description": "Can use WCLPRICE values as input series"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ATR",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can map the interval from WCLPRICE metadata"
          },
          {
            "name": "series_type",
            "description": "Can use WCLPRICE values as input series"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from WCLPRICE metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from WCLPRICE metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Realtime Crypto Prices",
    "parent tool description": "Get the Fastest and Realtime Crypto Rates and more...",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "",
        "default": "BTC"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://realtime-crypto-prices.p.rapidapi.com/liquidity\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"realtime-crypto-prices.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Realtime Crypto Prices: Get Liquidity Value",
    "tool description": "Returns the liquidity value of a cryptocurrency coin in US Dollars. This endpoint leverages real-time market data to provide instant liquidity insights, enhancing the parent tool's capability to deliver fast and accurate crypto rate information, enabling users to make informed trading decisions.",
    "API name": "Get Liquidity Value",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output provides the liquidity value for a specific cryptocurrency. For a given coin symbol, it returns the raw liquidity value as a large integer and a corresponding human-readable string formatted in millions of US dollars (e.g., '$ 814.76M'). This information is designed to help users quickly assess market depth and make informed trading decisions.",
      "output_format": "The output is a single, non-nested JSON object. The examples are provided as strings but represent a standard key-value object structure. There is no evidence of arrays, pagination, or cursoring."
    },
    "connected tools": [
      {
        "tool name": "Realtime Crypto Prices: Get Realtime Volume",
        "connect params": [
          {
            "name": "symbol",
            "description": "The liquidity data can be used alongside volume data for the same cryptocurrency to provide a more complete market depth analysis"
          }
        ]
      },
      {
        "tool name": "Realtime Crypto Prices: Market Capitalization",
        "connect params": [
          {
            "name": "symbol",
            "description": "The liquidity data can be compared with market cap for the same cryptocurrency to assess liquidity ratio"
          }
        ]
      },
      {
        "tool name": "Realtime Crypto Prices: Get Realtime Rates",
        "connect params": [
          {
            "name": "symbol",
            "description": "The liquidity data can be used alongside price data to evaluate trading impact and market depth"
          }
        ]
      },
      {
        "tool name": "Binance Futures Leaderboard: search_leaderboard",
        "connect params": [
          {
            "name": "tradeType",
            "description": "Liquidity data can inform which cryptocurrency markets have sufficient depth for trading analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Cryptocurrencies List",
        "connect params": [
          {
            "name": "currency_base",
            "description": "Liquidity data can help filter cryptocurrency lists to focus on those with adequate market depth"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Arabic news API",
    "parent tool description": "this API gets you headlins and links to the latest news from the most famous arabic news websites such as Aljazeera, BBC Arabic, CNN Arabic, Alarabiya. and more.\n\u0647\u0630\u0627 \u0627\u0644\u0627\u064a \u0628\u064a \u0622\u064a \u064a\u0633\u062a\u0631\u062c\u0639 \u0622\u062e\u0631 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0645\u0646 \u0623\u0628\u0631\u0632 \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629\u060c \u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0636\u0627\u0641\u0629 \u0645\u0635\u0627\u062f\u0631 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631",
    "tool name": "Arabic news API: Hibapress",
    "tool description": "\u064a\u0633\u062a\u0631\u062c\u0639 \u0622\u062e\u0631 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0645\u0646 \u0645\u0648\u0642\u0639 \u0647\u0628\u0629 \u0628\u0631\u064a\u0633\u060c \u0648\u0647\u0648 \u062c\u0632\u0621 \u0645\u0646 \u062e\u062f\u0645\u0629 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 \u062a\u0642\u062f\u0645 \u0623\u062d\u062f\u062b \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0648\u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0645\u0646 \u0623\u0628\u0631\u0632 \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0645\u062b\u0644 \u0627\u0644\u062c\u0632\u064a\u0631\u0629\u060c \u0628\u064a \u0628\u064a \u0633\u064a \u0639\u0631\u0628\u064a\u060c \u0633\u064a \u0625\u0646 \u0625\u0646 \u0639\u0631\u0628\u064a\u060c \u0648\u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0648\u063a\u064a\u0631\u0647\u0627. \u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0625\u0636\u0627\u0641\u0629 \u0645\u0635\u0627\u062f\u0631 \u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u062c\u062f\u064a\u062f\u0629 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0644\u0636\u0645\u0627\u0646 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0623\u062d\u062f\u062b \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0646 \u0645\u062e\u062a\u0644\u0641 \u0627\u0644\u0645\u0646\u0635\u0627\u062a \u0627\u0644\u0625\u0639\u0644\u0627\u0645\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://arabic-news-api.p.rapidapi.com/morocco/hibapress\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"arabic-news-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Hibapress",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool provides a list of the latest news articles from the Hibapress Arabic news website. For each article, the output includes the headline, a content snippet, a URL to a relevant image, and a direct URL to the full article on the Hibapress site.",
      "output_format": "The output is a JSON object containing a single key, \"results\". The value of this key is an array of objects, where each object represents a news article. Each article object consistently contains four string fields: 'headline', 'content', 'image' (URL), and 'url' (URL). There is no information about pagination or cursoring in the examples."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use headlines from Hibapress articles as search terms"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use headlines or content from Hibapress articles as search terms"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use headlines or content from Hibapress articles as search keywords"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flightera Flight Data",
    "parent tool description": "Flight status, on-time performance and statistics by Flightera",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "model",
        "type": "STRING",
        "description": "Model ICAO code",
        "default": ""
      },
      {
        "name": "airline_ident",
        "type": "STRING",
        "description": "The ident of the airline, as returned by /airline/search",
        "default": ""
      },
      {
        "name": "country",
        "type": "STRING",
        "description": "Two letter country code",
        "default": "US"
      }
    ],
    "code": "import requests\n\nurl = \"https://flightera-flight-data.p.rapidapi.com/aircraft/search\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"flightera-flight-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Flightera Flight Data: aircraftSearch",
    "tool description": "Retrieves a list of currently active aircraft registrations based on search criteria such as airline identifier, country, or aircraft model, with multiple filters chained as AND conditions. This endpoint leverages Flightera's flight data and aircraft databases to provide precise, real-time information, enabling efficient aviation tracking and analysis by combining operational insights with comprehensive registration details.",
    "API name": "aircraftSearch",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a list of aircraft registration numbers for currently active aircraft that match the specified search criteria. This information can be used to identify specific aircraft for tracking or analysis. In case of an invalid search query, such as a non-existent airline, it provides a descriptive error message instead.",
      "output_format": "The output format is conditional. A successful query returns a JSON array of strings, where each string is an aircraft registration number. An unsuccessful query returns a JSON object containing a single 'Error' key with a descriptive string message. The successful list is a flat array with no nesting."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: aircraftInfo",
        "connect params": [
          {
            "name": "reg",
            "description": "The registration of the aircraft, as returned by /airline/aircraft or /aircraft/search"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Yahoo Finance_v2",
    "parent tool description": "Yahoo Finance API for stocks, options, ETFs, mutual funds and news. Moved to: https://rapidapi.com/sparior/api/mboum-finance",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "string",
        "description": "A single symbol",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://yahoo-finance15.p.rapidapi.com/api/yahoo/qu/quote/AAPL/institution-ownership\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"yahoo-finance15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "tool name": "Yahoo Finance_v2: stock/institution-ownership",
    "tool description": "Retrieves institutional ownership details for a specified stock, requiring a stock symbol as input. This functionality is part of the Yahoo Finance API, which provides comprehensive financial data including stocks, options, ETFs, mutual funds, and news, leveraging its extensive financial databases to offer insights into major shareholders and their holdings.",
    "API name": "stock/institution-ownership",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of the top institutional shareholders for a given stock symbol. For each institution, it details the organization's name, the percentage of shares they hold, the total number of shares, the market value of their position, and the recent percentage change in their holdings. This information is intended to give users insight into the major financial institutions investing in a particular company.",
      "output_format": "The output is a single JSON object with two main keys: `meta` and `body`. The primary data is a list of objects located at `body.ownershipList`. Many of the numerical values within these objects (e.g., `pctHeld`, `position`, `value`) are themselves nested objects containing a `raw` numerical value and a `fmt` human-readable string format."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The name of the equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_WEEKLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The name of the equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_INTRADAY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_MONTHLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The equity of your choice."
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The name of the security of your choice. For example: symbol=MSFT"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/calendar-events/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/cashflow-statement/{stock}_",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/income-statement/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/index-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-transactions/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/institution-ownership/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/net-share-purchase-activity/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/upgrade-downgrade-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/recommendation-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/sec-filings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-holders/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/balance-sheet/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: options/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: News Sentiment Data",
        "connect params": [
          {
            "name": "ticker",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Most Negative News",
        "connect params": [
          {
            "name": "ticker",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Market Data",
        "connect params": [
          {
            "name": "ticker",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single stock symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-holders",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/upgrade-downgrade-history",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-transactions",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/index-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/calendar-events",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/recommendation-trend",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/net-share-purchase-activity",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/sec-filings",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/earnings",
        "connect params": [
          {
            "name": "symbol",
            "description": "A single symbol"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "kjoller",
    "parent tool description": "Lyrics for childrens' songs",
    "tool name": "kjoller: Get songs by author",
    "tool description": "Retrieves all songs created by a specific author from a collection of children's song lyrics. This tool searches through a comprehensive database of lyrics specifically designed for children, allowing you to find multiple songs by the same songwriter or composer. Whether you're looking for educational songs, lullabies, or fun sing-alongs for kids, this search function helps you discover a particular author's complete contribution to children's music.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "text",
        "type": "STRING",
        "description": "",
        "default": "thorbj\u00f8rn egner"
      }
    ],
    "code": "import requests\n\nurl = \"https://kjoller.p.rapidapi.com/songs?\"\nquerystring = {\"text\": text}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"kjoller.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get songs by author",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a JSON object that indicates the status of the request and provides a list of songs. The 'status' key confirms the successful execution of the query, while the 'data' key contains a list of songs attributed to the specified author. This allows a user to see all the works by a particular children's songwriter found in the database.",
      "output_format": "The output is a JSON object with two keys: 'status' (string) and 'data' (array). The 'data' array is intended to hold the list of song results. The provided examples show an empty array ('[]'), which likely represents a successful query where no songs were found for the given author. It is assumed that if songs were found, this array would be populated with song objects, but their specific structure is not detailed in the examples."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Song titles from the kjoller output data array could be used as search queries"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Song titles from the kjoller output data array could be used as search queries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Zappos Realtime Data",
    "parent tool description": "Zappos Realtime Data",
    "required_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "",
        "default": "crocs body"
      }
    ],
    "optional_parameters": [
      {
        "name": "sort",
        "type": "STRING",
        "description": "`best_seller , relevance, low_to_high, high_to_low, customer_rating, new_arrivals, brand_name`",
        "default": "new_arrivals"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://zappos-realtime-data.p.rapidapi.com/search.php\"\nquerystring = {\"keyword\": keyword, \"sort\": sort, \"page\": page}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"zappos-realtime-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Zappos Realtime Data: Zappos search product",
    "tool description": "Searches Zappos' real-time inventory and product data for accurate, up-to-the-minute information on availability, pricing, and product details. This leverages the Zappos Realtime Data API, which connects directly to Zappos' extensive database of products and stock levels, enabling users to access critical commerce insights instantly and make informed purchasing decisions.",
    "API name": "Zappos search product",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "The output is a summary of a product search on Zappos. It provides the total count of matching products and a detailed breakdown of these results across various filterable categories called \"facets,\" such as gender, product type, and brand. This information is intended to help users understand the search results and refine their query with available filters.",
      "output_format": "The tool returns a single JSON object. This object contains metadata like 'totalResultCount' and 'currentResultCount', suggesting pagination. The primary data is within the 'facets' key, which is an array of objects, where each object represents a filter category and contains a list of possible values along with the number of products associated with each value. The actual list of product results is not present in the provided examples."
    },
    "connected tools": [
      {
        "tool name": "Zappos Realtime Data: Zappos product detail by Product ID",
        "connect params": [
          {
            "name": "product_id",
            "description": "The product_id could be extracted from the facets data in the source tool's output, which likely contains product identifiers within the search results."
          }
        ]
      },
      {
        "tool name": "BestBuy Product Data: BestBuyProductData",
        "connect params": [
          {
            "name": "keyword",
            "description": "The facets from the Zappos search results could provide category names, brands, or product types that could be used as keywords for searching similar products on BestBuy."
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/minindex\"\nquerystring = {\"interval\": \"1min\", \"format\": \"json\", \"outputsize\": 30, \"series_type\": \"close\", \"symbol\": \"AAPL\", \"time_period\": 9}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: MININDEX",
    "tool description": "Retrieves the minimum value of a financial index over a specified period. This endpoint leverages Twelvedata's API, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, enabling developers to analyze market trends and make informed decisions about financial instruments.",
    "API name": "MININDEX",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output provides the calculated MININDEX (Index of Lowest Value) for a specific financial instrument over a series of time points. The response is structured into two main parts: a `meta` object containing details about the instrument (e.g., symbol, interval, type) and the indicator parameters, and a `values` array containing the time-series data. Each entry in the `values` array consists of a datetime and the corresponding `minidx` value, which is useful for technical analysis of market trends.",
      "output_format": "The output is a single JSON object. This object contains a `meta` object and a `values` array. The `values` array holds a list of objects, each with a `datetime` and a `minidx` key. Note that the numerical `minidx` value is returned as a string. The fields within the `meta` object can vary depending on the type of financial instrument (e.g., stocks use `currency`, while forex uses `currency_base` and `currency_quote`). The examples appear truncated, suggesting a limit on the number of returned data points."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_WEEKLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_INTRADAY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          },
          {
            "name": "interval",
            "description": "The interval from the MININDEX output's meta object can be used to maintain consistent time granularity"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          },
          {
            "name": "interval",
            "description": "The interval from the MININDEX output's meta object can be used to maintain consistent time granularity"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          },
          {
            "name": "interval",
            "description": "The interval from the MININDEX output's meta object can be used to maintain consistent time granularity"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MININDEX output's meta object can be used to query the same financial instrument"
          },
          {
            "name": "interval",
            "description": "The interval from the MININDEX output's meta object can be used to maintain consistent time granularity"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Plant Hardiness Zone",
    "parent tool description": "Retrieve the USDA Plant Hardiness Zone for a ZIP code",
    "required_parameters": [
      {
        "name": "zipcode",
        "type": "string",
        "description": "",
        "default": "90210"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://plant-hardiness-zone.p.rapidapi.com/zipcodes/{zipcode}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"plant-hardiness-zone.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Plant Hardiness Zone: Retrieve the Hardiness Zone",
    "tool description": "Retrieves the USDA Plant Hardiness Zone for a given ZIP code by accepting the ZIP in the endpoint path and returning an object containing the ZIP code and its corresponding hardiness zone. This endpoint leverages a specialized agricultural database mapping ZIP codes to USDA zones, enabling users to quickly determine climate suitability for plants in their specific region, which is critical for gardening and landscaping planning.",
    "API name": "Retrieve the Hardiness Zone",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output is an object that provides the specific USDA Plant Hardiness Zone for a given US ZIP code. This output also includes the original ZIP code for confirmation. This information is primarily used by gardeners, landscapers, and agricultural professionals to determine which plants are most likely to thrive in a specific geographic location based on its climate.",
      "output_format": "The output is a single, flat JSON object containing two string key-value pairs: 'hardiness_zone' and 'zipcode'. There is no nesting, and since the tool maps a single ZIP code to a single zone, the output is not an array and does not involve pagination."
    },
    "connected tools": [
      {
        "tool name": "Cloud Cast: Get hourly forecast",
        "connect params": [
          {
            "name": "city",
            "description": "The zipcode from the hardiness zone tool can be used to identify a city for weather forecast"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get wind speed",
        "connect params": [
          {
            "name": "city",
            "description": "The zipcode from the hardiness zone tool can be used to identify a city for wind speed data"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get humidty",
        "connect params": [
          {
            "name": "city",
            "description": "The zipcode from the hardiness zone tool can be used to identify a city for humidity data"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get the forecast",
        "connect params": [
          {
            "name": "city",
            "description": "The zipcode from the hardiness zone tool can be used to identify a city for weather forecast"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get current weather",
        "connect params": [
          {
            "name": "city",
            "description": "The zipcode from the hardiness zone tool can be used to identify a city for current weather"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "description": "The zipcode from the hardiness zone tool can be used to identify a city for weather updates"
          }
        ]
      },
      {
        "tool name": "weather forecast 14 days: Search location by Name or zip code",
        "connect params": [
          {
            "name": "ZIPCODE",
            "description": "The zipcode from the hardiness zone tool can be used directly to search for location"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By ZIP code",
        "connect params": [
          {
            "name": "zip",
            "description": "The zipcode from the hardiness zone tool can be used directly to get weather data"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Call 5 day / 3 hour forecast data - By ZIP code",
        "connect params": [
          {
            "name": "zip",
            "description": "The zipcode from the hardiness zone tool can be used directly to get forecast data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
    "tool description": "Returns vector tiles following the OpenMapTiles schema, allowing access to standardized map data in vector format. This endpoint is part of Mapilion's comprehensive mapping service that delivers both vector and raster map tiles at scale, built on OpenStreetMap and OpenMapTiles technologies. The vector tiles provide efficient, detailed geographic data that can be styled and rendered dynamically for interactive mapping applications.",
    "required_parameters": [
      {
        "name": "x",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "y",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "z",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/vector/{z}/{x}/{y}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Vector Tile",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single map tile in a binary format. This tile contains geographic data features, such as boundaries, water bodies, and labels, organized into distinct layers (e.g., 'boundary', 'water', 'aerodrome_label'). The data follows the OpenMapTiles schema and is intended to be consumed by a mapping client to dynamically render a segment of an interactive map.",
      "output_format": "The output is a raw binary data stream, not a structured text format like JSON or XML. It represents a single vector tile encoded using the Mapbox Vector Tile (MVT) specification, which is based on Protocol Buffers. The data is not human-readable and requires a specialized parser to interpret its contents."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "geojson",
            "description": "Can use vector tile data converted to GeoJSON for rendering geographic features on static maps"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Planet Vector Tiles",
        "connect params": [
          {
            "name": "x",
            "description": "Can use vector tile coordinates to request complementary vector tile data"
          },
          {
            "name": "y",
            "description": "Can use vector tile coordinates to request complementary vector tile data"
          },
          {
            "name": "z",
            "description": "Can use vector tile coordinates to request complementary vector tile data"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "x",
            "description": "Can overlay hillshading on the same tile coordinates as the vector tile"
          },
          {
            "name": "y",
            "description": "Can overlay hillshading on the same tile coordinates as the vector tile"
          },
          {
            "name": "z",
            "description": "Can overlay hillshading on the same tile coordinates as the vector tile"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Foreca Weather",
    "parent tool description": "Everything you need to build a weather app",
    "tool name": "Foreca Weather: Current",
    "tool description": "Provides current weather estimates for a specified location, delivering up-to-date meteorological data such as temperature, conditions, and forecasts. This endpoint is part of a comprehensive weather service that offers all the essential components needed to build a complete weather application, including real-time data, forecasts, and meteorological information that can be integrated into various platforms and services.",
    "required_parameters": [
      {
        "name": "location",
        "type": "string",
        "description": "",
        "default": "102643743"
      }
    ],
    "optional_parameters": [
      {
        "name": "windunit",
        "type": "STRING",
        "description": "Wind speed unit in response.",
        "default": "MS"
      },
      {
        "name": "alt",
        "type": "NUMBER",
        "description": "Altitude (meters)",
        "default": "0"
      },
      {
        "name": "lang",
        "type": "STRING",
        "description": "Language (ISO 639-1 codes). Options: de, en, es, fr, it, pl, ru, fi, sv, nl, ko, pt, th, tr, zh, zh_TW (Chinese in Taiwan), zh_CN (Chinese in China). (default en)",
        "default": "en"
      },
      {
        "name": "tz",
        "type": "STRING",
        "description": "Time zone in response (IANA time zone database names)",
        "default": "Europe/London"
      },
      {
        "name": "tempunit",
        "type": "STRING",
        "description": "Temperature unit in response",
        "default": "C"
      }
    ],
    "code": "import requests\n\nurl = \"https://foreca-weather.p.rapidapi.com/current/{location}\"\nquerystring = {\"windunit\": windunit, \"alt\": alt, \"lang\": lang, \"tz\": tz, \"tempunit\": tempunit}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"foreca-weather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Current",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool provides current weather conditions for a specific location. A successful output is a structured object containing detailed meteorological data points like temperature, humidity, wind speed, precipitation probability, and UV index. In case of an error, such as providing an invalid location ID, the tool returns a simple string message indicating the issue.",
      "output_format": "A successful response is a JSON object with a top-level key named \"current\". This key holds another nested object containing all the weather-related data. Error responses are not JSON but are plain strings. The output does not contain any arrays, so pagination is not applicable."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for historical weather lookup"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for historical weather lookup"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for weather statistics"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for weather statistics"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for hourly forecasts"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for hourly forecasts"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for current weather"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for current weather"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for daily forecasts"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for daily forecasts"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for minute-by-minute forecasts"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for minute-by-minute forecasts"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for weather alerts"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for weather alerts"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used to find nearest places"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used to find nearest places"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for astronomical data"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for astronomical data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for air quality history"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for air quality history"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for air quality forecasts"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for air quality forecasts"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "description": "The source tool provides location data that can be used for 5-day forecasts"
          },
          {
            "name": "longitude",
            "description": "The source tool provides location data that can be used for 5-day forecasts"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "description": "The source tool provides location data that can be used for 48-hour forecasts"
          },
          {
            "name": "longitude",
            "description": "The source tool provides location data that can be used for 48-hour forecasts"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "The source tool provides location data that can be used for current conditions"
          },
          {
            "name": "longitude",
            "description": "The source tool provides location data that can be used for current conditions"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for climate classification"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for climate classification"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "description": "The source tool provides location data that can be used for sun position"
          },
          {
            "name": "lon",
            "description": "The source tool provides location data that can be used for sun position"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "description": "The source tool provides location data that can be used for sunrise/sunset times"
          },
          {
            "name": "longitude",
            "description": "The source tool provides location data that can be used for sunrise/sunset times"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Booking.com_v2",
    "parent tool description": "Real-time data, unofficial API Booking.com\nThis API helps to query rooms, price, facilities, policities.. from many hotels around the world to create a travel",
    "tool name": "Booking.com_v2: languages",
    "tool description": "Retrieves available language options for hotel information and booking interfaces. This endpoint leverages Booking.com's unofficial API to access real-time data from hotels worldwide, allowing users to specify their preferred language when querying room availability, pricing, facilities, and policies as part of comprehensive travel planning.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://booking-com13.p.rapidapi.com/languages\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"booking-com13.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "languages",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool's output provides a comprehensive list of language codes supported by the Booking.com API. These language codes can be used in other API calls to retrieve hotel information, such as availability, pricing, and policies, in a specific language. The response includes a status message and a data array containing the supported language codes.",
      "output_format": "The output is a JSON object. The primary data is located in the 'data' key, which holds an array of objects. Each object in this array contains a single '__ref' key, whose string value contains an embedded JSON object with a 'code' key that specifies the language code (e.g., 'en-gb', 'fr'). The structure is not paginated and appears to be a complete list."
    },
    "connected tools": []
  },
  {
    "parent tool name": "AI Weather by Meteosource",
    "parent tool description": "Accurate hyper-local weather forecasts, powered by our cutting-edge machine learning (ML) models. Historical weather, current weather, weather statistics , and hour-by-hour forecast - all weather data updated in real-time!",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "place_id",
        "type": "STRING",
        "description": "Identifier of a place. To obtain the `place_id` for the location you want, please use `Location endpoints`. **Alternatively, you can specify the location by parameters `lat` and `lon`.**",
        "default": ""
      },
      {
        "name": "timezone",
        "type": "STRING",
        "description": "Timezone to be used for the date fields. If not specified, local timezone of the forecast location will be used. The format is according to the tzinfo database, so values like `Europe/Prague` or `UTC` can be used. Alternatively you may use the value `auto` in which case the local timezone of the location is used. The full list of valid timezone strings can be found [here](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).\n",
        "default": "auto"
      },
      {
        "name": "lat",
        "type": "STRING",
        "description": "Latitude in format 12N, 12.3N, 12.3, or 13S, 13.2S, -13.4. **Alternatively, you can specify the location by parameter `place_id`.**",
        "default": "37.81021"
      },
      {
        "name": "language",
        "type": "STRING",
        "description": "The language of text summaries (variable names are never translated). Available languages are:\n\n- `en`: English\n- `es`: Spanish\n- `fr`: French\n- `de`: German\n- `pl`: Polish\n- `cs`: Czech\n",
        "default": "en"
      },
      {
        "name": "units",
        "type": "STRING",
        "description": "Unit system to be used. The available values are:\n\n- `auto`: Select the system automatically, based on the forecast location.\n- `metric`: Metric (SI) units (`\u00b0C`, `mm/h`, `m/s`, `cm`, `km`, `hPa`).\n- `us`: Imperial units (`\u00b0F`, `in/h`, `mph`, `in`, `mi`, `Hg`).\n- `uk`: Same as `metric`, except that visibility is in `miles` and wind speeds are in `mph`.\n- `ca`: Same as `metric`, except that wind speeds are in `km/h` and pressure is in `kPa`.\n",
        "default": "auto"
      },
      {
        "name": "lon",
        "type": "STRING",
        "description": "Longitude in format 12E, 12.3E, 12.3, or 13W, 13.2W, -13.4. **Alternatively, you can specify the location by parameter `place_id`.**",
        "default": "-122.42282"
      }
    ],
    "code": "import requests\n\nurl = \"https://ai-weather-by-meteosource.p.rapidapi.com/minutely\"\nquerystring = {\"timezone\": timezone, \"lat\": lat, \"language\": language, \"units\": units, \"lon\": lon}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ai-weather-by-meteosource.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "AI Weather by Meteosource: minutely",
    "tool description": "Provides a minute-by-minute precipitation forecast for the next 60 minutes using AI-powered nowcasting models, requiring location input via GPS coordinates or place_id from Location endpoints. This endpoint leverages the parent tool's hyper-local weather forecasting capabilities, which combine real-time data updates with advanced machine learning models to deliver precise precipitation insights, enhancing situational awareness for time-sensitive activities.",
    "API name": "minutely",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns a detailed, minute-by-minute precipitation forecast for the next 60 minutes for a specified location. The output includes a high-level text summary of the forecast and a data array, where each entry represents the predicted precipitation amount for a specific minute. This hyper-local data is intended for planning time-sensitive activities where avoiding rain is critical.",
      "output_format": "The primary successful output is a JSON object. It contains location metadata and a nested 'minutely' object, which in turn holds a 'summary' string and a 'data' array. The 'data' array consists of objects, each with a 'date' string and a 'precipitation' number. A possible error response is a simple JSON object with a 'detail' key containing an error message string."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "ALL Crypto News Feed",
    "parent tool description": "All news about crypto. Tweets, listing news, .gov announcements, blogs etc.",
    "tool name": "ALL Crypto News Feed: Get Twitter Feed",
    "tool description": "Returns a Twitter feed focused on cryptocurrency topics. This endpoint delivers real-time tweets from the comprehensive crypto news aggregation service that collects information from various sources including social media, listing announcements, government regulatory updates, and influential crypto blogs. Access the latest conversations, market sentiment, and breaking news directly from Twitter's crypto community.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://all-crypto-news-feed.p.rapidapi.com/get_tweet_feed\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"all-crypto-news-feed.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get Twitter Feed",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool provides a list of recent tweets related to cryptocurrency. Each item in the list represents a single tweet and includes its full text content, a URL to the original tweet, the author's icon, and a timestamp. The output also contains structured metadata, such as whether the tweet is a reply or retweet, and most importantly, an array of suggestions that identify any mentioned cryptocurrencies and list the exchanges and trading symbols associated with them.",
      "output_format": "The tool returns a JSON array of objects, where each object corresponds to a tweet. Some fields can be nullable or empty, such as the 'image' field (an empty string if no image is attached) or the 'suggestions' array (empty if no cryptocurrencies are detected). The tweet's content is in the 'title' field, and the timestamp is a numerical value in the 'time' field."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use cryptocurrency names or topics mentioned in tweets"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can search for movies mentioned alongside cryptocurrencies in tweets"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can search for cryptocurrency names or topics mentioned in tweets"
          }
        ]
      },
      {
        "tool name": "Crypto News_v2: Get All Crypto News",
        "connect params": []
      },
      {
        "tool name": "ALL Crypto News Feed: Get Blogs Feed",
        "connect params": []
      },
      {
        "tool name": "ALL Crypto News Feed: Get ALL Feed",
        "connect params": []
      }
    ]
  },
  {
    "parent tool name": "Webull",
    "parent tool description": "Query public data for investment products including stocks, fractional shares, options, ETFs, and ADRs as on webull.com",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://webull.p.rapidapi.com/news/list-flash\"\nquerystring = {\"currentNewsId\": currentnewsid, \"pageSize\": pagesize}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"webull.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Webull: news/list-flash",
    "tool description": "Lists flash 27/4 news updates about investment products. This uses Webull's public data aggregation capabilities, drawing from real-time market reports and financial databases to deliver timely news insights, helping users stay informed about stock, ETF, options, and ADR market movements.",
    "API name": "news/list-flash",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides a list of recent financial news updates. Each news item includes a unique ID, title, summary, the name of the news source, and a precise publication timestamp. This data is intended to keep users informed about real-time market news and events that could impact stocks, ETFs, and other investment products.",
      "output_format": "The output is a JSON array of objects. Each object represents a single news flash and contains a consistent set of keys, including 'id' (integer), 'title' (string), 'sourceName' (string), 'newsTime' (ISO 8601 timestamp string), and 'summary' (string). The 'summary' often duplicates the 'title'. The purpose of the integer fields 'siteType' and 'timeFlag' is unclear from the examples."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Search Endpoint",
        "connect params": [
          {
            "name": "keywords",
            "description": "Can use company names or tickers mentioned in news titles/summaries"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbols mentioned in news titles/summaries"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbols mentioned in news titles/summaries"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: News Sentiment Data",
        "connect params": [
          {
            "name": "ticker",
            "description": "Can use stock symbols mentioned in news titles/summaries"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use stock symbols mentioned in news titles/summaries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Lost Ark",
    "parent tool description": "An API to get information for the game Lost Ark",
    "tool name": "Lost Ark: get raids",
    "tool description": "Retrieves a comprehensive list of all guardian raids available in Lost Ark. This endpoint taps into a specialized database containing detailed information about the popular MMORPG Lost Ark, providing players and developers with accurate game data about these challenging boss encounters that are a core part of the endgame progression system. The API serves as a valuable resource for players planning their character advancement, developers creating companion apps, or community sites needing up-to-date Lost Ark content.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://lost-ark1.p.rapidapi.com/api/raids\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"lost-ark1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "get raids",
    "domain name": "Gaming",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive dictionary of all guardian raids in the game Lost Ark. Each entry in the dictionary is keyed by the raid's name and contains a nested object with the raid's level and the minimum character item level required to participate. This information is intended for players to plan their in-game progression and for developers building related applications.",
      "output_format": "The output is a single, non-paginated JSON object. The top-level keys are strings representing the names of the guardian raids. The corresponding values are nested JSON objects, each containing two key-value pairs: `raidLevel` (integer) and `itemLevel` (integer). No null values are observed in the examples."
    },
    "connected tools": [
      {
        "tool name": "Lost Ark: get raids by level",
        "connect params": [
          {
            "name": "level",
            "description": "The raid level can be extracted from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "RapidWeather",
    "parent tool description": "The proprietary convolutional neural network collects and processes wide range of data sources to cover any location and consider the local nuances of climate.\n\nWe collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations.\n\nFor each point on the globe, RapidWeather provides historical, current and forecasted weather data via light-speed APIs.",
    "required_parameters": [
      {
        "name": "start",
        "type": "NUMBER",
        "description": "Start date (unix time, UTC time zone), e.g. start=1606488670",
        "default": "1606223802"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "Geographical coordinates (latitude, longitude)",
        "default": "50"
      },
      {
        "name": "end",
        "type": "NUMBER",
        "description": "End date (unix time, UTC time zone), e.g. end=1606747870",
        "default": "1606482999"
      },
      {
        "name": "lon",
        "type": "NUMBER",
        "description": "Geographical coordinates (latitude, longitude)",
        "default": "50"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://rapidweather.p.rapidapi.com/data/2.5/air_pollution/history\"\nquerystring = {\"start\": start, \"lat\": lat, \"end\": end, \"lon\": lon}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"rapidweather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "RapidWeather: Historical air pollution data",
    "tool description": "Retrieves historical air pollution data for a specific location and timeframe. This uses a proprietary convolutional neural network to process diverse data sources, including global and local weather models, satellites, radars, and a vast network of weather stations, ensuring accurate and contextually relevant pollution insights. The endpoint leverages RapidWeather's comprehensive weather data infrastructure to deliver detailed historical pollution metrics, enabling users to analyze environmental trends with high spatial and temporal precision.",
    "API name": "Historical air pollution data",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output provides a time-series of historical air pollution data for a specific geographical location, identified by latitude and longitude. For each timestamped entry, it returns a qualitative Air Quality Index (AQI) and quantitative measurements for various pollutant components like CO, NO, NO2, O3, SO2, PM2.5, PM10, and NH3. This allows users to analyze historical pollution levels and trends over a specified period.",
      "output_format": "The output is a single JSON object with two main keys: 'coord' and 'list'. The 'coord' key contains an object with the location's longitude and latitude. The 'list' key contains an array of JSON objects, where each object represents a single data point in time. Each data point object includes the 'aqi' (Air Quality Index), a nested 'components' object detailing the concentration of each pollutant, and a 'dt' field representing the Unix timestamp for the measurement."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "source_path": "coord.lat"
          },
          {
            "name": "longitude",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "source_path": "coord.lat"
          },
          {
            "name": "longitude",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Current air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Forecast air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Reverse geocoding",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Air Quality: Current Air Quality",
        "connect params": [
          {
            "name": "lat",
            "source_path": "coord.lat"
          },
          {
            "name": "lon",
            "source_path": "coord.lon"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "type",
        "type": "string",
        "description": "",
        "default": "v3"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/tilejson/{type}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Tile Json",
    "tool description": "Returns tile JSON for specified styles (v3, hillshading-v1, hillshading-v2). This is part of Mapilion's service, which provides scalable vector and raster map tiles leveraging OpenStreetMap and OpenMapTiles data, enabling developers to access customizable map representations for diverse applications.",
    "API name": "Get Tile Json",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single JSON object containing metadata for a map tileset, conforming to the TileJSON specification. This object provides essential configuration details, such as the URL template for fetching map tiles, the data format (e.g., 'pbf' for vector, 'png' for raster), zoom levels, and required attribution. This information is intended to be used by mapping client libraries (like MapLibre or Leaflet) to render a map based on the selected style.",
      "output_format": "The output is a single, non-array JSON object. The structure follows the TileJSON standard. A key named `tiles` contains an array with a single URL template string. For vector tile outputs, there is a `vector_layers` key which contains an array of objects detailing the data layers within the tileset. The output is not paginated."
    },
    "connected tools": [
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
        "connect params": [
          {
            "name": "z",
            "description": "The source tool provides zoom level information that can be used for fetching appropriate vector tiles"
          },
          {
            "name": "x",
            "description": "The source tool provides tile URL templates that include x coordinates for vector tiles"
          },
          {
            "name": "y",
            "description": "The source tool provides tile URL templates that include y coordinates for vector tiles"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Hillshading Tile",
        "connect params": [
          {
            "name": "z",
            "description": "The source tool provides zoom level information that can be used for fetching appropriate hillshading tiles"
          },
          {
            "name": "x",
            "description": "The source tool provides tile URL templates that include x coordinates for hillshading tiles"
          },
          {
            "name": "y",
            "description": "The source tool provides tile URL templates that include y coordinates for hillshading tiles"
          },
          {
            "name": "version",
            "description": "The source tool mentions hillshading versions (v1, v2) that can be specified when fetching tiles"
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Fonts",
        "connect params": [
          {
            "name": "fontstack",
            "description": "The source tool's TileJSON may include font information needed for rendering vector tiles"
          },
          {
            "name": "range",
            "description": "The source tool's TileJSON may include font range information needed for rendering vector tiles"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "The source tool provides center coordinates that can be used to position a static map"
          },
          {
            "name": "zoom",
            "description": "The source tool provides zoom level information that can be used for generating static maps"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mboum Finance",
    "parent tool description": "Mboum Finance Official API for stocks, options, ETFs, mutual funds, SEC Data, news, screeners and more! ",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "A single symbol",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mboum-finance.p.rapidapi.com/qu/quote/institution-ownership\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mboum-finance.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Mboum Finance: stock/institution-ownership/{stock}",
    "tool description": "Retrieves institutional ownership details for a specified stock, providing insights into major shareholders and their stakes. This endpoint utilizes the Mboum Finance Official API's access to comprehensive financial data, including SEC filings, to deliver accurate and up-to-date information on institutional holdings. By tapping into the API's extensive database of stocks, ETFs, and mutual funds, it enables users to analyze market trends and investor behavior effectively.",
    "API name": "stock/institution-ownership/{stock}",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "This tool retrieves a list of the top institutional shareholders for a specified stock. For each institution, the output details the organization's name, the percentage of shares they hold, the total number of shares and their market value, and the date the ownership was reported. This information allows users to identify a company's major stakeholders and analyze institutional investment trends.",
      "output_format": "The output is a JSON object. The core data is an array of objects located under the `ownershipList` key. This array is typically nested within a `body` object, which is accompanied by a sibling `meta` object containing request metadata. Many numeric values (e.g., `pctHeld`, `position`, `value`) are presented in a nested object containing a raw numeric field (`raw`) and one or more pre-formatted string representations (`fmt`, `longFmt`). There is no indication of pagination."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get current price quotes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get daily price history"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-transactions/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get insider transactions, providing additional ownership context"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/insider-holders/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get insider holders information, complementing institutional ownership data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/institution-ownership",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get additional institutional ownership details from another source"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-holders",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get insider holder information, complementing institutional ownership data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/insider-transactions",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the institution ownership data can be used to get insider transaction history, providing additional ownership context"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "currency_base",
        "type": "STRING",
        "description": "Filter by currency base",
        "default": "EUR"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Filter by symbol",
        "default": ""
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "currency_quote",
        "type": "STRING",
        "description": "Filter by currency quote",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/forex_pairs\"\nquerystring = {\"currency_base\": \"EUR\", \"symbol\": \"\", \"format\": \"json\", \"currency_quote\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: Forex Pairs List",
    "tool description": "Returns an array of forex pairs available on Twelve Data API, daily updated. This endpoint is part of the Financial Data API, which provides developers with instant access to real-time and historical data for stocks, forex, crypto, ETFs, and indices. It leverages Twelve Data's infrastructure to deliver a curated, daily updated list of forex pairs, enabling efficient integration into applications requiring up-to-date currency exchange information. For more details, refer to the [documentation](https://twelvedata.com/docs) and [get started here](https://twelvedata.com/apikey).",
    "API name": "Forex Pairs List",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output provides a comprehensive list of all forex pairs available through the Twelve Data API. For each pair, it returns the trading symbol, its classification (e.g., Minor, Exotic-Cross), and the full names of the base and quote currencies. This information allows users to discover which currency pairs they can request further real-time or historical data for.",
      "output_format": "The output is a JSON object containing a single key, \"data\". The value of \"data\" is an array of JSON objects, where each object represents a single forex pair and contains the keys 'symbol', 'currency_group', 'currency_base', and 'currency_quote'. All examples provided were truncated, suggesting the full list is extensive."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: CURRENCY_EXCHANGE_RATE (Crypto)",
        "connect params": [
          {
            "name": "from_currency",
            "description": "The cryptocurrency you want to convert from"
          },
          {
            "name": "to_currency",
            "description": "The currency you want to convert to"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_INTRADAY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_WEEKLY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_DAILY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_MONTHLY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list"
          }
        ]
      },
      {
        "tool name": "Exchange Rate API: Convert currency",
        "connect params": [
          {
            "name": "base",
            "description": "The three-letter currency code of the currency you would like to convert from"
          },
          {
            "name": "target",
            "description": "The three-letter currency code of the currency you would like to convert to"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flightera Flight Data",
    "parent tool description": "Flight status, on-time performance and statistics by Flightera",
    "required_parameters": [
      {
        "name": "reg",
        "type": "STRING",
        "description": "The registration of the aircraft, as returned by /airline/aircraft or /aircraft/search",
        "default": "N37267"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://flightera-flight-data.p.rapidapi.com/aircraft/info\"\nquerystring = {\"reg\": reg}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"flightera-flight-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Flightera Flight Data: aircraftInfo",
    "tool description": "Returns detailed aircraft information for an aircraft identified by registration, limited to currently active aircraft. This endpoint is part of Flightera's comprehensive service for flight status, on-time performance, and statistics, leveraging real-time aviation data and a curated database of active aircraft to provide accurate, actionable insights for flight tracking and analysis.",
    "API name": "aircraftInfo",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a detailed profile for a single, currently active aircraft based on its registration number. The output includes technical specifications like the model, manufacturer, and engine type, as well as operational data like the operating airline, seating configuration, and details of its last known flight. If the aircraft cannot be found, an error message is returned.",
      "output_format": "The output is a single JSON object. A successful response contains a flat structure of key-value pairs, with one nested object for 'seat_config' which details the seat count per travel class. An unsuccessful query returns a JSON object with a single 'Error' key. There is no pagination, as the tool returns information for a single entity."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: flightSearch",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: flightStatistics",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: flightInfo",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airlineInfo",
        "connect params": [
          {
            "name": "iata",
            "description": "The IATA code of the airline, must have a length of 3"
          },
          {
            "name": "icao",
            "description": "The ICAO code of the airline, must have a length of 4"
          },
          {
            "name": "name",
            "description": "The name of the airline. Not case sensitive"
          },
          {
            "name": "ident",
            "description": "The ident of the airline, as returned by /airline/search"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airlineStatistics",
        "connect params": [
          {
            "name": "iata",
            "description": "The IATA code of the airline, must have a length of 3"
          },
          {
            "name": "icao",
            "description": "The ICAO code of the airline, must have a length of 4"
          },
          {
            "name": "ident",
            "description": "The ident of the airline, as returned by /airline/search"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "RapidWeather",
    "parent tool description": "The proprietary convolutional neural network collects and processes wide range of data sources to cover any location and consider the local nuances of climate.\n\nWe collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations.\n\nFor each point on the globe, RapidWeather provides historical, current and forecasted weather data via light-speed APIs.",
    "required_parameters": [
      {
        "name": "zip",
        "type": "STRING",
        "description": "Zip/post code and country code divided by comma. Please use ISO 3166 country codes",
        "default": "E14,GB"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://rapidweather.p.rapidapi.com/geo/1.0/zip\"\nquerystring = {\"zip\": zip}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"rapidweather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "RapidWeather: Coordinates by zip/post code",
    "tool description": "Retrieves geographic coordinates using a zip/postal code. This leverages a proprietary convolutional neural network that processes diverse data sources\u2014including global and local weather models, satellites, radars, and a network of weather stations\u2014to accurately determine location coordinates. By integrating these inputs, it provides precise geographic data to support weather-related analyses, ensuring reliability even in complex or remote regions. The service is optimized for speed, delivering results via light-speed APIs to enable real-time applications.",
    "API name": "Coordinates by zip/post code",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output provides the geographical details for a specific zip or postal code. This includes the city or area name, the precise latitude and longitude coordinates, and a two-letter country code. The information is primarily used to convert a postal code into geographic coordinates for use in downstream tasks, such as weather forecasting or mapping applications.",
      "output_format": "The output is a single, flat JSON object. The examples are provided as strings but represent a standard key-value object structure. No pagination or cursoring is indicated. It is unknown if fields can be null."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Air Quality: Current Air Quality",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Forecast: RapidApiGetForecastSummaryByCoordinates",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Forecast: RapidApiGetForecastHourlyByCoordinates",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Monthly Point Data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Point Climate Data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Daily Point Data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Hourly Point Data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Nearby Stations",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Plant Hardiness Zone: Retrieve the Hardiness Zone",
        "connect params": [
          {
            "name": "zipcode",
            "description": "Can use zip/postal code from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Current air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Forecast air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Historical air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Reverse geocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Call 5 day / 3 hour forecast data - By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Cities in circle",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By ZIP code",
        "connect params": [
          {
            "name": "zip",
            "description": "Can use zip/postal code from source tool's output"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Call 5 day / 3 hour forecast data - By ZIP code",
        "connect params": [
          {
            "name": "zip",
            "description": "Can use zip/postal code from source tool's output"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "lon",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "Tomorrow.io: retrieveWeatherRecentHisotry",
        "connect params": [
          {
            "name": "location",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Realtime Weather API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Sports API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Astronomy API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Time Zone API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Local Weather API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Ski Weather API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Marine Weather API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Time Zone API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Astronomy API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use latitude,longitude from source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify: Get tracks",
    "tool description": "Retrieves one or more specific tracks from Spotify's extensive music catalog. This endpoint taps into Spotify's Data API, which provides access to millions of songs, podcasts, artists, albums, and playlists, allowing you to fetch detailed information about individual tracks or multiple tracks simultaneously. The data returned includes comprehensive track metadata such as title, artist, album, duration, popularity metrics, and audio features, enabling applications to display rich music information or perform music-related analysis.",
    "required_parameters": [
      {
        "name": "ids",
        "type": "STRING",
        "description": "Track IDs (you can use commas)",
        "default": "4WNcduiCmDNfmTEz7JvmLv"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify23.p.rapidapi.com/tracks/\"\nquerystring = {\"ids\": \"4WNcduiCmDNfmTEz7JvmLv\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify23.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get tracks",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns detailed metadata for one or more Spotify tracks. A successful response contains a list of track objects, each with information like the track's name, artist, album details, duration, popularity, and a URL to the track on Spotify. In case of an error, the output provides a status flag and a descriptive error message.",
      "output_format": "The output is a stringified JSON object. A successful response has a top-level 'tracks' key which contains an array of track objects. Each track object is deeply nested, containing further objects for the album and arrays for the artists. An error response is a simple object with 'status' and 'message' keys."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use track URIs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use track URIs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use Spotify URL from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "If the track has YouTube video ID in the metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Yahoo Finance_v2",
    "parent tool description": "Yahoo Finance API for stocks, options, ETFs, mutual funds and news. Moved to: https://rapidapi.com/sparior/api/mboum-finance",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "start",
        "type": "NUMBER",
        "description": "Enter a start index",
        "default": "0"
      }
    ],
    "code": "import requests\n\nurl = \"https://yahoo-finance15.p.rapidapi.com/api/yahoo/co/collections/undervalued_growth_stocks\"\nquerystring = {\"start\": \"0\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"yahoo-finance15.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Yahoo Finance_v2: market/undervalued_growth_stocks",
    "tool description": "Identifies stocks with earnings growth rates above 25% and relatively low PE/PEG ratios. This endpoint leverages the Yahoo Finance API's extensive financial data repository, including stock metrics, options, ETFs, and market news, to filter and surface undervalued equities with strong growth potential. By analyzing real-time market data and historical financials, it helps investors pinpoint opportunities where high earnings growth aligns with favorable valuation metrics.",
    "API name": "market/undervalued_growth_stocks",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a list of stocks identified as having high growth potential (earnings growth > 25%) and being undervalued (low PE/PEG ratios). For each stock, the output provides a comprehensive set of financial data, including company identifiers, current market price, historical price ranges (52-week high/low), key financial ratios (P/E, EPS), and analyst ratings. This information is intended to help investors discover and evaluate potential investment opportunities.",
      "output_format": "The output is a JSON object containing a `meta` object and a `body` array. The `meta` object provides information about the request, including pagination details (`offset`, `count`, `total`). The `body` array contains a list of JSON objects, where each object represents a single stock and its detailed financial metrics. The examples provided appear to be truncated."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get real-time quotes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get daily time series data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get detailed company profiles"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get detailed financial data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/key-statistics",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get key statistics"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The output contains stock symbols that can be used to get time series data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Gas Price",
    "parent tool description": "Reach gasoline and diesel prices in different fuel stations in different cities.",
    "tool name": "Gas Price: allUsaPrice",
    "tool description": "Provides the average current gasoline prices across states in America, delivering a broad market overview rather than individual station data. This service is part of a comprehensive fuel price tracking system that monitors gasoline and diesel prices at various fuel stations throughout different cities, allowing users to compare fuel costs across regions and make informed decisions about where and when to purchase fuel.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://gas-price.p.rapidapi.com/allUsaPrice\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"gas-price.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "allUsaPrice",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool provides a comprehensive list of average fuel prices for each state in the United States. For every state, it details the current average price per gallon for regular gasoline, mid-grade, premium, and diesel fuel, denominated in US dollars. This data is intended to give a broad market overview for comparing fuel costs across different regions.",
      "output_format": "The output is a JSON object with a top-level boolean 'success' field and a 'result' field. The 'result' field contains a JSON array of objects, where each object corresponds to a U.S. state and its fuel prices. All price values are formatted as strings, not numeric types. The entire list of states appears to be returned in a single, non-paginated response."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "The gas price data could inform trip planning to states with lower fuel costs"
          }
        ]
      },
      {
        "tool name": "Gas Price: stateUsaPrice",
        "connect params": [
          {
            "name": "state",
            "description": "The state code from the allUsaPrice output can be used to get detailed pricing for a specific state"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Download states",
        "connect params": [
          {
            "description": "The state information from gas prices can be used to look up additional state details"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/tema\"\nquerystring = {\"format\": \"json\", \"outputsize\": 30, \"interval\": \"1min\", \"time_period\": 9, \"symbol\": \"AAPL\", \"series_type\": \"close\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: TEMA",
    "tool description": "Calculates the Triple Exponential Moving Average (TEMA) to identify trend directions in financial data, using historical price inputs. This endpoint leverages the parent tool's comprehensive financial data API, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, enabling developers to analyze market trends with reduced lag compared to traditional moving averages while enhancing trend detection accuracy through advanced statistical processing.",
    "API name": "TEMA",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a time series of Triple Exponential Moving Average (TEMA) values for a specified financial symbol. This data is used in technical analysis to identify market trends. The output also includes comprehensive metadata about the symbol (e.g., type, exchange, currency) and the specific parameters used for the TEMA calculation (e.g., time period, interval).",
      "output_format": "The output is a single JSON object with two main keys: `meta` and `values`. The `meta` key contains an object with descriptive information about the query and the financial instrument. The `values` key contains a JSON array of objects, each representing a data point in the time series with a `datetime` and the calculated `tema` value. The TEMA value is represented as a string."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The TEMA output contains symbol information that can be used to query the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to retrieve time series data for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate MACD for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate RSI for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate Bollinger Bands for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate SMA for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate EMA for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate Stochastic Oscillator for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ADX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to calculate ADX for the same financial instrument"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from TEMA output can be used to retrieve financial data for the same asset"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Learn to read and write Japanese kanji",
    "parent tool description": "Free API to the Kanji alive web application with CC-BY licensed language data on Japanese kanji, radicals and associated media files.",
    "tool name": "Learn to read and write Japanese kanji: Radical position",
    "tool description": "Provides individual endpoints for testing Advanced Search URL parameters, which can be combined as needed for more complex queries. This API connects to the Kanji alive web application, offering free access to CC-BY licensed Japanese language data including kanji characters, radicals, and their associated media files, allowing developers to build applications with comprehensive Japanese character information.",
    "required_parameters": [
      {
        "name": "rpos",
        "type": "STRING",
        "description": "Hiragana or romaji",
        "default": "hen"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://kanjialive-api.p.rapidapi.com/api/public/search/advanced/\"\nquerystring = {\"rpos\": rpos}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"kanjialive-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Radical position",
    "domain name": "Education",
    "output_info": {
      "output_info_summary": "The tool returns a list of Japanese kanji characters. For each kanji, the output provides the character itself, its total stroke count, its primary radical character, the radical's stroke count, and a numerical identifier for the radical. This data is intended for applications that need to display or process detailed information about kanji and their components.",
      "output_format": "The output is a JSON array of objects. Each object in the array represents a single kanji and contains two nested objects: 'kanji' and 'radical'. The 'kanji' object holds the character and its stroke count. The 'radical' object contains the radical's character, stroke count, and an 'order' number. Some radical characters are represented using Unicode escape sequences (e.g., '\\ue759')."
    },
    "connected tools": [
      {
        "tool name": "Learn to read and write Japanese kanji: Kanji stroke number",
        "connect params": [
          {
            "name": "ks",
            "description": "The source tool provides kanji stroke counts that can be used to search for kanji with specific stroke counts"
          }
        ]
      },
      {
        "tool name": "Learn to read and write Japanese kanji: Radical stroke number",
        "connect params": [
          {
            "name": "rs",
            "description": "The source tool provides radical stroke counts that can be used to search for kanji with radicals of specific stroke counts"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Helioviewer v1",
    "parent tool description": "Helioviewer is an open-source project for the visualization of solar and heliospheric data, funded by ESA and NASA.",
    "tool name": "Helioviewer v1: getUserVideos",
    "tool description": "Retrieves a chronological listing of the most recent user-generated movies that have been publicly shared to YouTube, with results limited by the requested or default value of the `num` parameter (and potentially truncated when reaching the specified `since` date). This endpoint is part of Helioviewer, an open-source project funded by ESA and NASA that specializes in the visualization of solar and heliospheric data, allowing users to access community-created content related to solar observations and space weather phenomena.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "num",
        "type": "NUMBER",
        "description": "Number of shared user-generated movies to include in the response.  Default is 10.",
        "default": "10"
      },
      {
        "name": "since",
        "type": "STRING",
        "description": "Optionally truncate result set if this date/time is reached.  ISO 8601 combined UTC date and time UTC format.",
        "default": ""
      },
      {
        "name": "force",
        "type": "BOOLEAN",
        "description": "Optionally bypass cache to retrieve most up-to-date data.",
        "default": ""
      },
      {
        "name": "callback",
        "type": "STRING",
        "description": "Wrap the response object in a function call of your choosing.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://helioviewer-v1.p.rapidapi.com/api/v1/getUserVideos/\"\nquerystring = {\"num\": \"10\", \"since\": \"\", \"force\": \"\", \"callback\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"helioviewer-v1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "getUserVideos",
    "domain name": "Education",
    "output_info": {
      "output_info_summary": "The tool provides a list of recently created, user-generated videos about solar phenomena, which have been shared on YouTube. For each video, the output includes metadata such as the YouTube URL, title, publication date, and links to various thumbnail sizes. It also contains technical details specific to the solar data visualized, including the observation start and end times, data sources, image scale, and video dimensions.",
      "output_format": "The tool returns a JSON array, where each element is a JSON object that corresponds to a single video. Within each object, the `thumbnails` key contains a nested object with URLs for different image sizes. Several fields that represent numerical data, such as `movieLength`, `width`, and `height`, are formatted as strings. The list is chronological and its length can be limited by request parameters, but the output itself does not contain pagination cursors."
    },
    "connected tools": [
      {
        "tool name": "Helioviewer v1: getJP2Image",
        "connect params": [
          {
            "param_name": "date",
            "description": "Could use the observation start/end times from video metadata"
          },
          {
            "param_name": "sourceId",
            "description": "Could use the data source IDs from video metadata"
          },
          {
            "param_name": "observatory",
            "description": "Could use the observatory information from video metadata"
          },
          {
            "param_name": "instrument",
            "description": "Could use the instrument information from video metadata"
          },
          {
            "param_name": "detector",
            "description": "Could use the detector information from video metadata"
          },
          {
            "param_name": "measurement",
            "description": "Could use the measurement information from video metadata"
          }
        ]
      },
      {
        "tool name": "TED Talks API: getTalks",
        "connect params": [
          {
            "param_name": "id",
            "description": "Could extract YouTube video IDs from the video URLs"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Reverse Geocoding and Geolocation Service",
    "parent tool description": "Find nearest or largest city information or timezone for any given point location (latitude/longitude). The reverse geocode API back \"reverse\" codes any GPS location point into nearest or largest readable places with county, city, distance and population.",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "NUMBER",
        "description": "",
        "default": "-74.40753570369408"
      },
      {
        "name": "latitude",
        "type": "NUMBER",
        "description": "",
        "default": "40.63380384389354"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocodeapi.p.rapidapi.com/GetTimezone\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocodeapi.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
    "tool description": "Determines the local timezone for a given latitude and longitude, returning the timezone name, ID, and current local time. This is part of a reverse geocode API that converts GPS coordinates into detailed location data, including nearby cities, counties, population, and distance, providing accurate timezone information through a comprehensive geospatial database.",
    "API name": "GetTimezone",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single object containing detailed timezone and geographical information for a given set of coordinates. It provides the formal timezone identifier (e.g., 'Europe/London'), the timezone abbreviation (e.g., 'BST'), the current GMT offset, and the current local time as a string. Additionally, it includes the full country name and its two-letter country code, allowing for precise location-based time calculations and display.",
      "output_format": "The output is a single, flat JSON object. The provided examples are string-serialized objects using single quotes, but they represent a standard key-value structure. No nesting, arrays, or pagination are indicated."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "lng",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Can use the latitude,longitude from the source tool's coordinates"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/log10\"\nquerystring = {\"symbol\": \"AAPL\", \"format\": \"json\", \"interval\": \"1min\", \"series_type\": \"close\", \"outputsize\": 30}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: LOG10",
    "tool description": "Calculates the base 10 logarithm of numerical values. This mathematical transformation is part of a financial data API that provides real-time and historical data for stocks, forex, crypto, ETFs, and indices, enabling developers to analyze and simplify complex financial datasets through standardized mathematical operations.",
    "API name": "LOG10",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides a time series of the base-10 logarithm of a financial instrument's closing price. The output is a JSON object containing metadata about the requested symbol (e.g., stock, forex, crypto), and a list of historical data points. Each data point includes a timestamp and the corresponding calculated logarithmic value, which is useful for analyzing and comparing percentage changes or normalizing exponential growth trends in financial data.",
      "output_format": "The output is a single JSON object containing two keys: `meta` and `values`. `meta` is an object with metadata about the request. `values` is an array of objects, where each object represents a data point with a `datetime` (string) and a `log10` value (string). The `values` array appears to be sorted in reverse chronological order. The examples provided are truncated, but no explicit pagination or cursoring mechanism is shown."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: WMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: DEMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: TEMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: TRIMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: KAMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MAMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: T3MA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MOM",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ADX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: CCI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: AROON",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MFI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ICHIMOKU",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUPERTREND",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: VWAP",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: LINEARREG",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STDDEV",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: VAR",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      },
      {
        "tool name": "Twelve Data: TSF",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the LOG10 output's meta data can be used"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "ALL Crypto News Feed",
    "parent tool description": "All news about crypto. Tweets, listing news, .gov announcements, blogs etc.",
    "tool name": "ALL Crypto News Feed: Get ALL Feed",
    "tool description": "Returns all available news feeds including Tweets, Blogs, Binance announcements, and US Government statements related to cryptocurrency. This comprehensive crypto news aggregator collects and organizes the latest information from multiple sources, providing a centralized access point for staying updated on market trends, regulatory developments, social media discussions, and industry announcements in the cryptocurrency space.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://all-crypto-news-feed.p.rapidapi.com/get_all_feed\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"all-crypto-news-feed.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get ALL Feed",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of recent news items related to cryptocurrency from multiple sources, including Twitter and blogs. Each news item includes a title, a URL to the source, a timestamp, and a list of suggested cryptocurrencies mentioned in the article, along with their corresponding trading symbols on various exchanges. This allows users to stay updated on market-moving news and identify the relevant tradable assets.",
      "output_format": "The output is a JSON array of objects, where each object represents a single news item. The fields within each object can vary depending on the 'source' of the news (e.g., a 'Twitter' source has an 'info' object with Twitter-specific metadata, which is absent in a 'Blogs' source). Some fields, like 'image', can be empty strings. The 'suggestions' field contains a nested array of objects."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use cryptocurrency names or topics from the news feed"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can search for movies related to cryptocurrencies mentioned in the news"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use cryptocurrency names or topics from the news feed"
          }
        ]
      },
      {
        "tool name": "Crypto News_v2: Get All Crypto News",
        "connect params": [
          {
            "description": "Can be used to get additional crypto news to supplement the original feed"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/ln\"\nquerystring = {\"symbol\": \"AAPL\", \"interval\": \"1min\", \"outputsize\": 30, \"format\": \"json\", \"series_type\": \"close\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: LN",
    "tool description": "The Natural Logarithm (LN) endpoint transforms data points using the natural logarithm, applying this mathematical function to financial data provided by the Twelve Data API. This allows developers to normalize and analyze real-time and historical financial data\u2014such as stock prices, forex rates, and crypto metrics\u2014enabling more accurate trend identification and modeling. By leveraging the API's extensive dataset, including real-time and historical data across multiple asset classes, the endpoint empowers developers to perform advanced analytics and insights, streamlining complex financial data processing workflows.",
    "API name": "LN",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output is a time-series of natural logarithm values for a specific financial instrument, such as a stock, forex pair, or cryptocurrency. Each data point includes a timestamp and its corresponding natural logarithm value. The output also contains a metadata object that provides context, including the instrument's symbol, the time interval between data points, and the type of asset.",
      "output_format": "The output is a single JSON object containing two main keys: 'meta' and 'values'. The 'meta' key holds an object with descriptive metadata. The 'values' key holds a JSON array of data point objects. Each data point object consists of a 'datetime' string and an 'ln' string, which represents the numerical logarithm value. The examples do not indicate any pagination or cursoring mechanisms."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: ADD",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: DIV",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EXP",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MULT",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUB",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: WMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: DEMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: TEMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: TRIMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: KAMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MAMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: T3MA",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SQRT",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the symbol from the LN metadata"
          },
          {
            "name": "interval",
            "description": "Can use the interval from the LN metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: \u200b/youtube/weekly/{year}/{nthweek}",
    "tool description": "Retrieves the most viewed YouTube music videos for a specific week of a given year (e.g., 21st week of 2019 via /youtube/weekly/2019/21). This endpoint taps into a comprehensive database of YouTube music content, providing trending video rankings alongside Spotify tracks, albums, and artist information. The service offers valuable insights into music popularity trends across specific time periods, allowing users to track which music videos captured the most attention during particular weeks throughout different years.",
    "required_parameters": [
      {
        "name": "nthweek",
        "type": "string",
        "description": "",
        "default": "21"
      },
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2019"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/weekly/2019/21\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "\u200b/youtube/weekly/{year}/{nthweek}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a ranked list of the most viewed YouTube music videos for a specific week and year. For each video, the output includes its ranking, change in rank status, video title, a direct link, total weeks on the chart, peak position, total views for the week, and the change in views from the prior week. This data is intended for analyzing music video popularity and tracking weekly trends on YouTube.",
      "output_format": "The primary output is a JSON array of objects, where each object represents a ranked music video. All fields within the objects, including numerical data like 'ranking' and 'views', are returned as strings. If no data is available for the requested period, the API returns a single string '404 Data not found' instead of a JSON array. The 'views_delta' field can be an empty string for new entries."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The video titles from the YouTube weekly chart can be used to search for corresponding tracks on Spotify"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The video titles from the YouTube weekly chart can be used to search for songs on Shazam"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The video titles from the YouTube weekly chart can be used to search for more details on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Wayfair",
    "parent tool description": "This API helps to query for all information about categories, products, etc\u2026 as on wayfair.com",
    "tool name": "Wayfair: products/get-common-info",
    "tool description": "Retrieves common information services for a specific product, providing detailed data about the requested item. This API functions as part of Wayfair's comprehensive information system, allowing users to access the same product details available on wayfair.com, including specifications, features, and related information. The service connects to Wayfair's extensive product database, enabling queries that return structured information similar to what shoppers would find while browsing the retail website.",
    "required_parameters": [
      {
        "name": "sku",
        "type": "STRING",
        "description": "The value of sku fields returned in \u2026/products/list or \u2026/products/search endpoint.",
        "default": "W003078383"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://wayfair.p.rapidapi.com/products/get-common-info\"\nquerystring = {\"sku\": sku}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"wayfair.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "products/get-common-info",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "The tool returns detailed information for a specific Wayfair product, identified by its SKU. The output includes product identifiers (name, SKU, URL), manufacturer details, customer-generated content like reviews and ratings, and inventory status. This information mirrors what a customer would see on the product's page on the Wayfair website and can be used to answer specific questions about a product's features, popularity, or availability.",
      "output_format": "The output is a JSON object. A successful response contains a top-level 'data' key, which nests a 'product' object with all the detailed information. An unsuccessful query returns a top-level 'errors' key containing an array of error objects. Many fields within the 'product' object can be null, empty arrays, or contain default zero values if the corresponding data is unavailable for the given product."
    },
    "connected tools": [
      {
        "tool name": "Wayfair: products/get-home-services",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to get home services for the same product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-similar-items",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to find similar items to the product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-warranty-services",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to get warranty information for the same product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-images",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to retrieve images of the same product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-financing-offers",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to get financing options for the same product"
          }
        ]
      },
      {
        "tool name": "Wayfair: reviews/list",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to retrieve reviews for the same product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/v2/detail (Deprecating)",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to get detailed information about the same product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-pricing",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The SKU from the source tool's output can be used to get pricing information for the same product"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mboum Finance",
    "parent tool description": "Mboum Finance Official API for stocks, options, ETFs, mutual funds, SEC Data, news, screeners and more! ",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "start",
        "type": "NUMBER",
        "description": "Enter a start index",
        "default": "0"
      }
    ],
    "code": "import requests\n\nurl = \"https://mboum-finance.p.rapidapi.com/co/collections/growth_technology_stocks\"\nquerystring = {\"start\": start}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mboum-finance.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Mboum Finance: market/growth_technology_stocks",
    "tool description": "Identifies technology stocks with revenue and earnings growth exceeding 25% by analyzing financial data from the Mboum Finance API. This endpoint leverages the API's comprehensive database of stocks, options, ETFs, and SEC filings, combined with real-time market insights, to deliver targeted screening of high-growth tech equities. It enables investors to quickly pinpoint opportunities in the technology sector where companies are outperforming with significant revenue and earnings expansion.",
    "API name": "market/growth_technology_stocks",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output is a list of technology stocks identified as having revenue and earnings growth of more than 25%. For each stock, it provides a comprehensive set of financial data, including real-time market price, daily and 52-week price ranges, trading volume, earnings per share (EPS), analyst ratings, and other key metrics. This information is designed to help investors screen for and evaluate high-growth investment opportunities in the tech sector.",
      "output_format": "The output is a single JSON object. The primary data is located in the 'quotes' key, which contains a JSON array of objects, each representing a single stock. The root object includes pagination details ('start', 'count', 'total'), indicating that the results can be navigated page by page. The provided examples appear to be truncated."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to get real-time quotes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve daily time series data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used for technical analysis"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to get historical data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve related news"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to get time series data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve financial data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve options data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [
      {
        "name": "string",
        "type": "STRING",
        "description": "Search keyword. Airport or City being searched.",
        "default": "winn"
      }
    ],
    "optional_parameters": [
      {
        "name": "get_airports_in_cities",
        "type": "BOOLEAN",
        "description": "If City is used as string include airports in that city. ",
        "default": true
      },
      {
        "name": "get_cities",
        "type": "BOOLEAN",
        "description": "Include cities in search results. Valid Options: True or False.",
        "default": true
      },
      {
        "name": "max_results",
        "type": "NUMBER",
        "description": "Number passed is the maximum number of results returned.",
        "default": ""
      },
      {
        "name": "get_airports",
        "type": "BOOLEAN",
        "description": "Include airports in search results. Valid Options: True or False.",
        "default": true
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/cars/autoComplete\"\nquerystring = {\"get_airports_in_cities\": true, \"string\": \"winn\", \"get_cities\": true, \"max_results\": \"\", \"get_airports\": true}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Auto complete",
    "tool description": "Retrieves airport and city IDs based on a string input, enabling precise location identification for travel-related queries. This endpoint is part of the Priceline.com API, which facilitates searching hotels, cars, and flights, and leverages a comprehensive travel database to support accurate booking services across multiple travel categories.",
    "API name": "Auto complete",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns location data based on a string query, providing a list of matching cities and their associated airports. For each city, it provides details such as name, state, country, geographic coordinates, and various location-specific IDs. For airports, it returns the airport name and IATA code. This output is designed to be used to obtain precise location identifiers for subsequent travel-related API calls.",
      "output_format": "The output is a JSON object where the main data is nested under `getCarAutoComplete.results`. This `results` object contains a status and the primary data, which can be a `city_data` object, an `airport_data` object, or potentially both. These data objects act as lists, using numbered keys (e.g., `city_0`, `airport_0`) to enumerate entries. The `airport_data` field, when nested within a city and having no entries, is an empty array (`[]`), but an object when it contains data. Several fields can be null or empty strings."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: airportInfo",
        "connect params": [
          {
            "name": "iata",
            "description": "Can use airport IATA codes from the source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use city names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "Can use city names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "Can use city names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations",
        "connect params": [
          {
            "name": "name",
            "description": "Can use city names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search flights locations",
        "connect params": [
          {
            "name": "name",
            "description": "Can use city or airport names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search cars locations",
        "connect params": [
          {
            "name": "name",
            "description": "Can use city names from the source tool's output"
          }
        ]
      }
    ]
  }
]