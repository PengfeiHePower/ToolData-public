[
  {
    "parent tool name": "Billboard",
    "parent tool description": "Billboard charts: Hot 100, Billboard 200, Billboard 200 Global, Artist 100 and more",
    "tool name": "Billboard: Billboard Global Excl. US",
    "tool description": "Retrieves the Billboard Global Excl. US chart data, available from SEPTEMBER 19, 2020 onward. This endpoint accesses Billboard's comprehensive music ranking system that tracks song popularity outside the United States, providing insights into international music trends. It's part of Billboard's extensive charting ecosystem that includes other major rankings such as the Hot 100, Billboard 200, Billboard Global 200, and Artist 100, allowing users to monitor music performance metrics and artist rankings across different markets and formats.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "Set the date for which you want to get a chart.",
        "default": "2020-09-19"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard2.p.rapidapi.com/billboard_global_200_excl_us\"\nquerystring = {\"date\": \"2020-09-19\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Billboard Global Excl. US",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of songs from the Billboard Global Excl. US chart. Each song in the list is represented as an object containing its title, artist(s), current rank, rank from the previous week, peak position on the chart, and a URL for the song's cover art. This data is useful for tracking the performance and popularity of songs in international markets, excluding the United States.",
      "output_format": "The output is a JSON array of objects. Each object corresponds to a song on the chart. The 'artist' and 'title' fields contain strings with embedded HTML tags (e.g., '<a>') and HTML entities (e.g., '&amp;', '&#039;'). Numerical values like 'rank', 'last_week', and 'peak_position' are provided as strings. The 'weeks_on_chart' field was an empty string in all provided examples, suggesting it may be nullable or inconsistently populated."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song title and artist name to search for song details"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title and artist name to search for tracks"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song title and artist name to search for music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard",
    "parent tool description": "Billboard charts: Hot 100, Billboard 200, Billboard 200 Global, Artist 100 and more",
    "tool name": "Billboard: Hot 100",
    "tool description": "Provides detailed information about Billboard's Hot 100 chart, displaying the current rankings of the most popular songs in the United States. This endpoint delivers access to Billboard's comprehensive music chart system, which includes not only the Hot 100 but also other major charts like Billboard 200, Billboard Global 200, and Artist 100. Billboard charts are the music industry's standard for measuring the popularity of artists, albums, and songs based on sales, radio airplay, streaming data, and other metrics, offering authoritative insights into current music trends and performance.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "Set the date for which you want to get a chart.",
        "default": "2020-03-18"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard2.p.rapidapi.com/hot_100\"\nquerystring = {\"date\": \"2020-03-18\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Hot 100",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a ranked list of songs from the Billboard Hot 100 chart. For each song, it provides details such as the artist, title, current rank, last week's rank, peak position, and the number of weeks it has been on the chart. This data allows users to track the current popularity and historical performance of top songs in the United States.",
      "output_format": "The output is a string-serialized JSON array of objects. Each object corresponds to a song and its chart data. The 'artist' field contains HTML `<a>` tags linking to Billboard's website. The 'weeks_on_chart' field can be an empty string, likely for new entries. Some string values may contain HTML character entities (e.g., `&#039;`)."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The song title and artist from Hot 100 can be used as search query"
          },
          {
            "name": "type",
            "description": "Can be set to 'tracks' to search for songs from the Hot 100 chart"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The song title and artist from Hot 100 can be used as search term"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The song title and artist from Hot 100 can be used as search query"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard",
    "parent tool description": "Billboard charts: Hot 100, Billboard 200, Billboard 200 Global, Artist 100 and more",
    "tool name": "Billboard: Artist 100",
    "tool description": "Provides detailed information about the Artist 100 chart, showing the most popular music artists across all genres based on album and track sales, radio airplay, streaming, and social media engagement. This endpoint delivers current rankings from Billboard's comprehensive music charts system, which includes other popular rankings like Hot 100, Billboard 200, and Billboard Global 200, offering authoritative data on artist popularity and performance in the music industry.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "Set the date for which you want to get a chart.",
        "default": "2020-03-18"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard2.p.rapidapi.com/artist_100\"\nquerystring = {\"date\": \"2020-03-18\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Artist 100",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a ranked list of artists from the current Billboard Artist 100 chart. For each artist, the output includes their name, current rank, rank from the previous week, their peak position achieved on the chart, and a URL to an artist image. This data is used to determine the weekly popularity and performance of music artists.",
      "output_format": "The tool returns a JSON array of objects, where each object corresponds to an artist on the chart. The data is presented as a single, flat list with no nesting or pagination. Numerical values for chart positions, such as 'rank', 'last_week', and 'peak_position', are formatted as strings. The 'weeks_on_chart' field was an empty string in all examples, suggesting it may be nullable or not always populated."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "type": "STRING"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "type": "STRING"
          },
          {
            "name": "type",
            "type": "STRING"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard",
    "parent tool description": "Billboard charts: Hot 100, Billboard 200, Billboard 200 Global, Artist 100 and more",
    "tool name": "Billboard: Billboard 200",
    "tool description": "Provides detailed Billboard 100 chart information, showing the current rankings of the most popular songs in the United States. This endpoint delivers access to Billboard's comprehensive music chart ecosystem, which includes not only the iconic Hot 100 singles chart, but also the Billboard 200 albums chart, Billboard Global 200, Artist 100 rankings, and various other genre-specific and specialized music charts that track popularity and performance across the music industry.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "Set the date for which you want to get a chart.",
        "default": "2020-03-18"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard2.p.rapidapi.com/billboard_200\"\nquerystring = {\"date\": \"2020-03-18\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Billboard 200",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool provides a list of albums currently ranked on the Billboard 200 chart. For each album, it returns detailed information including the artist, title, current rank, rank from the previous week, peak position, and the total number of weeks on the chart. The output also includes a URL for the album's cover art and a boolean flag for special awards or recognition.",
      "output_format": "The output is a JSON array of objects, where each object represents a single album on the chart. The value for the 'artist' key is inconsistent; it can be either a plain string or an HTML `<a>` tag that requires parsing. Numeric values such as 'rank', 'last_week', 'peak_position', and 'weeks_on_chart' are returned as strings. The 'weeks_on_chart' key can have an empty string as its value."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use album title and artist name from Billboard 200 chart as search query"
          },
          {
            "name": "type",
            "description": "Can be set to 'albums' to search for albums from Billboard 200 chart"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard",
    "parent tool description": "Billboard charts: Hot 100, Billboard 200, Billboard 200 Global, Artist 100 and more",
    "tool name": "Billboard: Billboard Global 200",
    "tool description": "Provides detailed information about the Billboard Global 200 chart rankings, available from September 19, 2020 onward. This endpoint accesses Billboard's comprehensive music chart data system, which tracks and ranks songs based on streaming and sales performance worldwide. As part of Billboard's extensive charting ecosystem that includes other prominent rankings like Hot 100, Billboard 200, Artist 100 and more, this specific endpoint focuses exclusively on the Global 200 chart that measures international music popularity across markets.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "Set the date for which you want to get a chart.",
        "default": "2020-09-19"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard2.p.rapidapi.com/billboard_global_200\"\nquerystring = {\"date\": \"2020-09-19\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Billboard Global 200",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a list of songs currently on the Billboard Global 200 chart. For each song, it provides the current rank, title, artist(s), rank in the previous week, peak position, and total weeks on the chart. The output also includes a URL for the song's cover art and a boolean flag indicating a special award or status.",
      "output_format": "The output is a JSON array of objects, where each object represents a single song on the chart. All fields, including numerical ones like 'rank' and 'peak_position', are provided as strings. The 'artist' and 'title' fields contain raw HTML markup, including anchor tags and character entities. The 'weeks_on_chart' field can be an empty string for some entries."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song title and artist from Billboard chart to search"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title and artist from Billboard chart to search"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song title and artist from Billboard chart to search"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard-API",
    "parent tool description": "Providing the Billboard chart rankings and information on titles, artists, lyrics, images, and more. ",
    "tool name": "Billboard-API: BILLBOARD JAPAN HOT 100",
    "tool description": "Provides the BILLBOARD JAPAN HOT 100 chart information, displaying the current rankings of songs in the Japanese music market. This service draws from Billboard's comprehensive music chart database, offering access to detailed information about the most popular titles, artists, lyrics, and images in Japan's music scene. The JAPAN HOT 100 specifically tracks song popularity across the Japanese market, giving users insight into current music trends and hit songs in Japan.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "format(YYYY-MM-DD)",
        "default": "2019-05-11"
      },
      {
        "name": "range",
        "type": "STRING",
        "description": "max range(1-100)",
        "default": "1-10"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard-api2.p.rapidapi.com/billboard-japan-hot-100\"\nquerystring = {\"date\": \"2019-05-11\", \"range\": \"1-10\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "BILLBOARD JAPAN HOT 100",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool returns the Billboard Japan Hot 100 music chart for a specific date. The output is a ranked list of songs, where each entry includes the song's title, artist, current rank, and its performance history on the chart. This includes its rank last week, peak position, total weeks on the chart, and its movement direction (up, down, new, or same).",
      "output_format": "The output is a JSON object containing two top-level keys: `info` and `content`. The `info` key holds metadata about the chart, such as its name and date. The `content` key contains a nested JSON object where keys are the string representation of the song's rank (e.g., \"1\", \"2\") and the values are objects with detailed information for each song. The `last week` field can have a string value of \"None\" for new entries."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song titles or artist names from Japan Hot 100 to search on Shazam"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song titles or artist names from Japan Hot 100 to search on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song titles or artist names from Japan Hot 100 to search on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard-API",
    "parent tool description": "Providing the Billboard chart rankings and information on titles, artists, lyrics, images, and more. ",
    "tool name": "Billboard-API: HOT TRENDING SONGS POWERED BY TWITTER",
    "tool description": "Provides the HOT TRENDING SONGS POWERED BY TWITTER chart information, displaying the current rankings of songs that are gaining popularity through social media engagement. This endpoint taps into Billboard's comprehensive music chart database, which tracks and analyzes music popularity across various platforms, offering access to trending titles, artists, and their relative positions based on Twitter activity and engagement metrics. Part of Billboard's extensive chart ranking system that covers various music categories, artists, lyrics, images, and performance statistics across the industry.",
    "required_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "format(YYYY-MM-DD)",
        "default": "2021-11-06"
      },
      {
        "name": "range",
        "type": "STRING",
        "description": "max range(1-20)",
        "default": "1-10"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://billboard-api2.p.rapidapi.com/hot-trending-songs-powered-by-twitter\"\nquerystring = {\"date\": \"2021-11-06\", \"range\": \"1-10\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api2.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "HOT TRENDING SONGS POWERED BY TWITTER",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides the \"HOT TRENDING SONGS POWERED BY TWITTER\" music chart. For each of the top songs, the output details its current rank, title, artist, peak position, last week's rank, and total weeks on the chart. The output also includes metadata about the chart itself, like the date it was generated. An error message may be returned for subscription-related issues.",
      "output_format": "The output is a JSON object. A successful response has a main 'content' key, which contains an object mapping string-based ranks ('1', '2', etc.) to song-specific data objects, rather than a list. The response also contains an 'info' object with chart metadata. An optional 'notice' key with a string value may be present. A failed request returns a simple JSON object with a single 'message' key explaining the error."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song title or artist name from trending songs"
          }
        ]
      },
      {
        "tool name": "Shazam: auto-complete",
        "connect params": [
          {
            "name": "term",
            "description": "Can use partial song title from trending songs"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title or artist name from trending songs"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song title or artist name from trending songs"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard API_v2",
    "parent tool description": "Billboard charts API: Weekly Billboard Hot 100, Weekly Billboard 200, Weekly Artist 100, Weekly Billboard Weekly Global 200, Weekly Catalog Albums, Weekly Independent Albums, Weekly Billboard U.S. Afrobeats Songs. Year End Hot 100 Songs, Year End Billboard 200 Albums, Year End Billboard  Global 200, Year End Top Artists, Year End Top Artists \u2013 Duo/Group, Year End Top Labels, Year End Top New Artists, Year End Top Artists \u2013 Male, Year End Top Artists \u2013 Female. \nAll Greatest of All Time Charts....",
    "tool name": "Billboard API_v2: Billboard U.S. Afrobeats Songs",
    "tool description": "Retrieves the weekly Billboard U.S. Afrobeats Songs chart data, defaulting to last week's rankings if no specific week is provided. If a date is supplied but isn't a Saturday, the system automatically adjusts to the Saturday of that week. This endpoint is part of the comprehensive Billboard charts API, which offers access to a wide range of music industry rankings including the Hot 100, Billboard 200, Artist 100, Global 200, and specialized charts like Catalog Albums and Independent Albums, along with various year-end rankings and Greatest of All Time charts that track artist, label, and song performance across different categories.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "week",
        "type": "DATE (YYYY-MM-DD)",
        "description": "",
        "default": "2022-10-08"
      }
    ],
    "code": "import requests\n\nurl = \"https://billboard-api5.p.rapidapi.com/api/charts/billboard-u-s-afrobeats-songs\"\nquerystring = {\"week\": \"2022-10-08\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api5.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Billboard U.S. Afrobeats Songs",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides the weekly Billboard U.S. Afrobeats Songs chart data. It returns a list of ranked songs, including details for each entry such as title, artist, cover art URL, and position metrics like last week's rank, peak position, and total weeks on the chart. The output also includes metadata for the specific chart week, along with links to the previous and next weeks' charts.",
      "output_format": "The output is a JSON object containing a primary 'chart' object. The core data is found in the 'chart.entries' key, which holds a JSON array of objects, each representing a song on the chart. Each song object includes a nested 'position' object that details its chart performance history."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song titles or artist names from the Afrobeats chart as search queries"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song titles or artist names from the Afrobeats chart as search queries"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song titles or artist names from the Afrobeats chart as search terms"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard API_v2",
    "parent tool description": "Billboard charts API: Weekly Billboard Hot 100, Weekly Billboard 200, Weekly Artist 100, Weekly Billboard Weekly Global 200, Weekly Catalog Albums, Weekly Independent Albums, Weekly Billboard U.S. Afrobeats Songs. Year End Hot 100 Songs, Year End Billboard 200 Albums, Year End Billboard  Global 200, Year End Top Artists, Year End Top Artists \u2013 Duo/Group, Year End Top Labels, Year End Top New Artists, Year End Top Artists \u2013 Male, Year End Top Artists \u2013 Female. \nAll Greatest of All Time Charts....",
    "tool name": "Billboard API_v2: Independent Albums",
    "tool description": "Retrieves the weekly Independent Albums chart from Billboard, defaulting to last week's data if no specific week is provided. If a date that isn't a Saturday is supplied, the API automatically adjusts to the Saturday of that week. This endpoint is part of the comprehensive Billboard charts API, which offers access to numerous weekly rankings including Hot 100, Billboard 200, Artist 100, Global 200, and specialized charts like Catalog Albums and U.S. Afrobeats Songs, as well as year-end rankings and Greatest of All Time charts across various categories.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "week",
        "type": "DATE (YYYY-MM-DD)",
        "description": "",
        "default": "2022-10-08"
      }
    ],
    "code": "import requests\n\nurl = \"https://billboard-api5.p.rapidapi.com/api/charts/independent-albums\"\nquerystring = {\"week\": \"2022-10-08\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api5.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Independent Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides the weekly Billboard Independent Albums chart. The data is structured as a ranked list of albums, where each entry includes the album's title, artist, current rank, and historical performance data such as its rank from the previous week, its peak position, and the total number of weeks it has been on the chart. Additionally, the output contains metadata about the chart itself, including the week's date and links to the previous and next week's charts.",
      "output_format": "The output is a single JSON object. The core data is nested under a 'chart' key, which contains an 'entries' key holding an array of objects. Each object in the array represents an album. The 'positionLastWeek' field within an album's position details can be null, indicating it's a new entry on the chart."
    },
    "connected tools": [
      {
        "tool name": "Billboard API_v2: Independent Albums",
        "connect params": [
          {
            "name": "week",
            "description": "Can use the date from the chart metadata to navigate to previous/next week's chart"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use album title and artist from Independent Albums chart to search on Spotify"
          },
          {
            "name": "type",
            "description": "Can be set to 'albums' to search for albums from the chart"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Billboard API_v2",
    "parent tool description": "Billboard charts API: Weekly Billboard Hot 100, Weekly Billboard 200, Weekly Artist 100, Weekly Billboard Weekly Global 200, Weekly Catalog Albums, Weekly Independent Albums, Weekly Billboard U.S. Afrobeats Songs. Year End Hot 100 Songs, Year End Billboard 200 Albums, Year End Billboard  Global 200, Year End Top Artists, Year End Top Artists \u2013 Duo/Group, Year End Top Labels, Year End Top New Artists, Year End Top Artists \u2013 Male, Year End Top Artists \u2013 Female. \nAll Greatest of All Time Charts....",
    "tool name": "Billboard API_v2: Catalog Albums",
    "tool description": "Retrieves the weekly Billboard U.S. Afrobeats Songs chart data, defaulting to the most recent week if no date is specified. If a date is provided but isn't a Saturday, the system automatically adjusts to the Saturday of that week. This endpoint is part of the comprehensive Billboard charts API, which provides access to a wide range of music industry rankings including the Hot 100, Billboard 200, Artist 100, Global 200, and various specialized charts like Catalog Albums and Independent Albums, along with year-end rankings across multiple categories and Greatest of All Time charts.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "week",
        "type": "DATE (YYYY-MM-DD)",
        "description": "",
        "default": "2022-10-08"
      }
    ],
    "code": "import requests\n\nurl = \"https://billboard-api5.p.rapidapi.com/api/charts/catalog-albums\"\nquerystring = {\"week\": \"2022-10-08\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"billboard-api5.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Catalog Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides weekly chart data for Billboard's Catalog Albums. For a given week, it returns a ranked list of albums, including the album's title, artist, current rank, peak position, last week's position, and total weeks on the chart. The output also contains the specific chart week's date and navigation links to the previous and next week's charts.",
      "output_format": "The output is a single, nested JSON object. The primary data is a JSON array located at `chart.entries`. Each object within this array represents a single album on the chart. The `position.positionLastWeek` field can be null, likely indicating the album was not on the chart the previous week."
    },
    "connected tools": [
      {
        "tool name": "Billboard: Billboard 200",
        "connect params": [
          {
            "param_name": "date",
            "description": "Can use the chart week date from Catalog Albums to view Billboard 200 from the same time period"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use album titles or artist names from Catalog Albums to search on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "param_name": "query",
            "description": "Can use album titles or artist names from Catalog Albums to search on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Emisora Radio Dosis",
    "parent tool description": "Emisora Radio Dosis",
    "tool name": "Emisora Radio Dosis: Radio Dosis Mix",
    "tool description": "Streams a continuous 24/7 mix of music from Emisora Radio Dosis. This radio station provides round-the-clock mixed music programming, offering listeners uninterrupted access to Radio Dosis's broadcast content whenever they want to tune in.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://emisora-radio-dosis.p.rapidapi.com/yzums7zw4k8uv\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"emisora-radio-dosis.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Radio Dosis Mix",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool output is a raw binary data stream representing a continuous 24/7 music mix from the radio station Emisora Radio Dosis. This data is not human-readable and is intended to be processed by an audio client or player to listen to the live broadcast. The content is an uninterrupted flow of audio data without any accompanying metadata.",
      "output_format": "The output is a continuous raw binary stream of audio data. It is not a structured text format like JSON or XML. The provided examples are string representations of chunks of this binary data, which is why they appear as garbled text with various escape sequences."
    },
    "connected tools": []
  },
  {
    "parent tool name": "Genius - Song Lyrics",
    "parent tool description": "Genius - Song Lyrics, Artists, Albums, Knowledge & More API",
    "tool name": "Genius - Song Lyrics: Leaderboard",
    "tool description": "Retrieves leaderboard information showing top artists, songs, or albums based on popularity metrics. This endpoint leverages Genius's comprehensive music database that provides access to song lyrics, artist information, album details, and extensive music knowledge. The Genius API serves as a rich resource for music enthusiasts and developers seeking to integrate detailed music metadata, cultural context, and lyrical content into their applications.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "per_page",
        "type": "NUMBER",
        "description": "Number of results to return per request",
        "default": "10"
      },
      {
        "name": "period",
        "type": "ENUM",
        "description": "Default: `day`. One of these:\n\n- day\n- week\n- month\n- all_time",
        "default": ""
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Paginated offset, (e.g., per_page=5&page=3 returns albums 11\u201315)",
        "default": "1"
      },
      {
        "name": "text_format",
        "type": "STRING",
        "description": "Format for text bodies related to the document. One or more of `dom`, `plain`, `markdown`, and `html`, separated by commas (defaults to html).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://genius-song-lyrics1.p.rapidapi.com/leaderboard/\"\nquerystring = {\"per_page\": per_page, \"page\": page}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"genius-song-lyrics1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Leaderboard",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool output provides a ranked list of top Genius users based on their contribution scores, or \"attribution value\". Each entry in the leaderboard contains detailed information about a user, including their username, display name, role (e.g., Moderator, Transcriber), \"Genius IQ\" score, and links to their profile and avatar images. This information is useful for identifying the most active and influential contributors on the Genius platform.",
      "output_format": "The root of the output is a JSON object with a single key, \"leaderboard\". The value of this key is an array of objects, where each object represents a user on the leaderboard. User information is further nested within a 'user' object. The provided examples are truncated."
    },
    "connected tools": []
  },
  {
    "parent tool name": "Genius - Song Lyrics",
    "parent tool description": "Genius - Song Lyrics, Artists, Albums, Knowledge & More API",
    "tool name": "Genius - Song Lyrics: Chart: Albums",
    "tool description": "Retrieves detailed information about music albums, including track listings, release dates, and artist information. This endpoint leverages Genius's comprehensive database of music knowledge, which contains millions of song lyrics, artist biographies, album metadata, and cultural context across genres and eras. The service provides authoritative music information used by fans, researchers, and industry professionals to explore discographies, discover album facts, and access the rich contextual data that Genius has become known for in the music community.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Paginated offset, (e.g., per_page=5&page=3 returns results 11\u201315)",
        "default": "1"
      },
      {
        "name": "time_period",
        "type": "ENUM",
        "description": "Default: `day`. One of these:\n\n- day\n- week\n- month\n- all_time",
        "default": ""
      },
      {
        "name": "per_page",
        "type": "NUMBER",
        "description": "Number of results to return per request",
        "default": "10"
      },
      {
        "name": "text_format",
        "type": "STRING",
        "description": "Format for text bodies related to the document. One or more of `dom`, `plain`, `markdown`, and `html`, separated by commas (defaults to html).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://genius-song-lyrics1.p.rapidapi.com/chart/albums/\"\nquerystring = {\"page\": page, \"per_page\": per_page}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"genius-song-lyrics1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Chart: Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool returns a chart of music albums. The output is a list where each item provides detailed information about an album, including its title, full title with artist, release date, and URLs for cover art. It also includes comprehensive, nested information about the album's primary artist(s).",
      "output_format": "The root of the response is a JSON object containing a single key, 'chart_items'. This key holds an array of objects, each representing an album on the chart. Within each of these objects, the album's specific data is nested under an 'item' key, which in turn contains further nested objects and arrays for artist details. While the tool description mentions track listings, this information is absent from the provided examples."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use album titles and artist names from the source for searching albums on Spotify"
          },
          {
            "name": "type",
            "description": "Can be set to 'albums' to search specifically for albums"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "Can use album titles and artist names from the source"
          },
          {
            "name": "type",
            "description": "Can be set to 'album' to search for albums"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use album titles and artist names from the source to search for music on Shazam"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use album titles and artist names from the source to search for content on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Genius - Song Lyrics",
    "parent tool description": "Genius - Song Lyrics, Artists, Albums, Knowledge & More API",
    "tool name": "Genius - Song Lyrics: Chart: Songs",
    "tool description": "Retrieves chart information about popular songs, providing rankings and trending music data. This endpoint leverages Genius's comprehensive music database, which contains extensive information on song lyrics, artists, albums, and music knowledge. The Genius API gives you access to a rich repository of music content, allowing you to explore trending songs while connecting to the platform's broader ecosystem of artist information, album details, and cultural context surrounding music.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "chart_genre",
        "type": "ENUM",
        "description": "Default: `all`. One of these:\n\n- all\n- rap\n- pop\n- rb\n- rock\n- country",
        "default": ""
      },
      {
        "name": "time_period",
        "type": "ENUM",
        "description": "Default: `day`. One of these:\n\n- day\n- week\n- month\n- all_time",
        "default": ""
      },
      {
        "name": "per_page",
        "type": "STRING",
        "description": "Number of results to return per request",
        "default": "10"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Paginated offset, (e.g., per_page=5&page=3 returns results 11\u201315)",
        "default": "1"
      },
      {
        "name": "text_format",
        "type": "STRING",
        "description": "Format for text bodies related to the document. One or more of `dom`, `plain`, `markdown`, and `html`, separated by commas (defaults to html).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://genius-song-lyrics1.p.rapidapi.com/chart/songs/\"\nquerystring = {\"per_page\": per_page, \"page\": page}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"genius-song-lyrics1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Chart: Songs",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of songs from a music chart. For each song, it provides detailed information including the title, performing artists, release date, and various URLs for lyrics and artwork on the Genius platform. The output also includes platform-specific statistics like pageviews and annotation counts, as well as a nested object with information about the primary artist.",
      "output_format": "The output is a JSON object with a single key, `chart_items`. This key holds an array of objects, where each object represents a song on the chart. Song information is nested within an `item` key. This item object contains further nested objects for statistics (`stats`), release date components (`release_date_components`), and primary artist details (`primary_artist`). The order of items in the `chart_items` array likely corresponds to their rank."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song titles or artist names from the chart_items"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song titles or artist names from the chart_items"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song titles or artist names from the chart_items"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Albums",
        "connect params": [
          {
            "name": "term",
            "description": "Can use artist names from the chart_items"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Users",
        "connect params": [
          {
            "name": "term",
            "description": "Can use artist names from the chart_items"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Playlists",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song titles or artist names from the chart_items"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Genius - Song Lyrics",
    "parent tool description": "Genius - Song Lyrics, Artists, Albums, Knowledge & More API",
    "tool name": "Genius - Song Lyrics: Chart: Artists",
    "tool description": "Retrieves chart information about artists, displaying rankings and popularity metrics for musicians. This endpoint leverages Genius's comprehensive database of music industry data, which includes song lyrics, artist information, albums, and related knowledge. The API provides access to Genius's extensive collection of music content and metadata, allowing users to explore trending artists and their relative popularity within the music ecosystem.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "time_period",
        "type": "ENUM",
        "description": "Default: `day`. One of these:\n\n- day\n- week\n- month\n- all_time",
        "default": ""
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Paginated offset, (e.g., per_page=5&page=3 returns results 11\u201315)",
        "default": "1"
      },
      {
        "name": "per_page",
        "type": "NUMBER",
        "description": "Number of results to return per request",
        "default": "10"
      },
      {
        "name": "text_format",
        "type": "STRING",
        "description": "Format for text bodies related to the document. One or more of `dom`, `plain`, `markdown`, and `html`, separated by commas (defaults to html).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://genius-song-lyrics1.p.rapidapi.com/chart/artists/\"\nquerystring = {\"page\": page, \"per_page\": per_page}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"genius-song-lyrics1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Chart: Artists",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a ranked list of popular artists from the Genius charts. For each artist, the output includes their name, unique ID, URLs for their Genius page and images, and verification status. The list represents a ranking of artists based on popularity or activity within the Genius music ecosystem.",
      "output_format": "The output is a JSON object containing a single key, \"chart_items\". This key holds an array of objects, each representing an artist on the chart. The actual artist data is nested within an \"item\" object. Some fields, like the 'iq' score (a likely popularity metric), can be null or absent for certain artists."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The artist name from the chart_items can be used as a search query"
          },
          {
            "name": "type",
            "description": "Can be set to 'artists' to search for the charted artists"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The artist name from the chart_items can be used as a search query"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "50K Radio Stations",
    "parent tool description": "More than 60,000 radio stations from different countries and various genres",
    "tool name": "50K Radio Stations: Get Cities",
    "tool description": "Retrieves a list of cities that have radio stations available for streaming. This endpoint connects you to a vast database of more than 60,000 radio stations spanning numerous countries and covering diverse music genres, allowing you to discover broadcasting options by geographic location before selecting specific stations to listen to.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "country_id",
        "type": "NUMBER",
        "description": "Use this parameter to filter cities by country id or set empty if you don't want to use it ",
        "default": "63"
      },
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Use this parameter to filter cities by keyword or set empty if you don't want to use it ",
        "default": "Jakarta"
      }
    ],
    "code": "import requests\n\nurl = \"https://50k-radio-stations.p.rapidapi.com/get/cities\"\nquerystring = {\"country_id\": \"63\", \"keyword\": \"Jakarta\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"50k-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Cities",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output provides a list of cities that have radio stations. The response includes metadata such as a success flag, a 'total' count of available cities, and a 'has_next' boolean for pagination. The primary data is expected in the 'data' field, which would contain the list of cities, although all provided examples show this list as empty.",
      "output_format": "The output is a JSON object. It contains a 'data' key which holds an array of results. The structure supports pagination with the 'has_next' boolean key and provides a 'total' count of all cities. The 'data' array can be empty if no results are found."
    },
    "connected tools": [
      {
        "tool name": "50K Radio Stations: Get Channels",
        "connect params": [
          {
            "name": "city_id",
            "description": "Use this parameter to filter cities by city id or set empty if you don't want to use it"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "50K Radio Stations",
    "parent tool description": "More than 60,000 radio stations from different countries and various genres",
    "tool name": "50K Radio Stations: Get Countries",
    "tool description": "Retrieves a comprehensive list of countries that have radio stations available in the system. This endpoint connects you to a vast database of more than 60,000 radio stations spanning across numerous countries worldwide and covering various music genres and broadcast formats. The country list serves as an entry point for exploring the extensive international radio collection, allowing users to subsequently browse stations by their geographic origin.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Use this parameter to filter cities by keyword or set empty if you don't want to use it ",
        "default": "Indonesia"
      }
    ],
    "code": "import requests\n\nurl = \"https://50k-radio-stations.p.rapidapi.com/get/countries\"\nquerystring = {\"keyword\": \"Indonesia\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"50k-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Countries",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output is a list of countries that have available radio stations. Each country in the list is represented as an object containing a unique integer 'id' and its string 'name'. This list can be used to identify countries for subsequent queries, such as searching for stations within a specific geographic region.",
      "output_format": "The tool returns a JSON object with a top-level key 'data' which contains an array of country objects. The root object also includes metadata: a boolean 'success' flag, a boolean 'has_next' for pagination, and an integer 'total' which likely indicates the number of items in the current response."
    },
    "connected tools": [
      {
        "tool name": "50K Radio Stations: Get Cities",
        "connect params": [
          {
            "name": "country_id",
            "description": "Use this parameter to filter cities by country id or set empty if you don't want to use it"
          }
        ]
      },
      {
        "tool name": "50K Radio Stations: Get Channels",
        "connect params": [
          {
            "name": "country_id",
            "description": "Use this parameter to filter cities by country id or set empty if you don't want to use it"
          }
        ]
      },
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getStationByCountry",
        "connect params": [
          {
            "name": "country_id",
            "description": "Country ID* to fetch stations (default: 26 (USA))"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: New releases",
        "connect params": [
          {
            "name": "country",
            "description": "Enter country code like: US, CA, SE, IN, UK..."
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Trends",
        "connect params": [
          {
            "name": "country",
            "description": "ISO 3166-1 Alpha-2 country code. Default: ZZ = Global https://www.iban.com/country-codes"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "50K Radio Stations",
    "parent tool description": "More than 60,000 radio stations from different countries and various genres",
    "tool name": "50K Radio Stations: Get Channels",
    "tool description": "Retrieves a comprehensive list of available radio channels. This endpoint taps into a vast database of more than 60,000 radio stations from around the world, spanning numerous countries and diverse music genres, allowing users to explore and discover broadcasting options before selecting what to listen to.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Use this parameter to filter cities by keyword or set empty if you don't want to use it ",
        "default": "a"
      },
      {
        "name": "genre_id",
        "type": "NUMBER",
        "description": "Use this parameter to filter cities by genre id or set empty if you don't want to use it ",
        "default": ""
      },
      {
        "name": "city_id",
        "type": "NUMBER",
        "description": "Use this parameter to filter cities by city id or set empty if you don't want to use it ",
        "default": ""
      },
      {
        "name": "country_id",
        "type": "NUMBER",
        "description": "Use this parameter to filter cities by country id or set empty if you don't want to use it ",
        "default": "50"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Use this parameter to get next page",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://50k-radio-stations.p.rapidapi.com/get/channels\"\nquerystring = {\"keyword\": \"a\", \"genre_id\": \"\", \"city_id\": \"\", \"country_id\": \"50\", \"page\": \"1\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"50k-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Channels",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of radio channels, each with comprehensive details. For every channel, the output includes its name, unique ID, location identifiers (city and country IDs), a list of associated genres, and various streaming URLs. The output also contains URLs for channel logos in multiple sizes.",
      "output_format": "The output is a JSON object. The primary data is located in the `data` key, which is an array of objects, where each object represents a radio channel. The root object includes metadata for pagination, specifically a `total` count of channels and a `has_next` boolean flag. The channel objects themselves contain nested data, such as the `logo` object and the `genre` array of objects."
    },
    "connected tools": [
      {
        "tool name": "50K Radio Stations: Get Cities",
        "connect params": [
          {
            "name": "country_id",
            "description": "The source tool provides country IDs in its output that can be used to filter cities by country"
          }
        ]
      },
      {
        "tool name": "50K Radio Stations: Get Genres",
        "connect params": [
          {
            "name": "keyword",
            "description": "The source tool provides genre information that can be used as keywords to filter genres"
          }
        ]
      },
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getStationByCountry",
        "connect params": [
          {
            "name": "country_id",
            "description": "The source tool provides country IDs that can be used to fetch stations by country"
          }
        ]
      },
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: searchStation",
        "connect params": [
          {
            "name": "keyword",
            "description": "The source tool provides station names that can be used as search keywords"
          }
        ]
      },
      {
        "tool name": "Miza: Song search",
        "connect params": [
          {
            "name": "search",
            "description": "The source tool provides station names that can be used as search terms for songs"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "50K Radio Stations",
    "parent tool description": "More than 60,000 radio stations from different countries and various genres",
    "tool name": "50K Radio Stations: Get Genres",
    "tool description": "Retrieves a comprehensive list of available music genres for radio stations. This endpoint taps into a vast database of more than 60,000 radio stations from countries around the world, allowing users to explore the diverse range of broadcasting categories available for streaming. The genre list serves as a navigation tool to help users filter and discover stations based on their musical preferences across this extensive global radio collection.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Use this parameter to filter cities by keyword or set empty if you don't want to use it ",
        "default": "music"
      }
    ],
    "code": "import requests\n\nurl = \"https://50k-radio-stations.p.rapidapi.com/get/genres\"\nquerystring = {\"keyword\": \"music\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"50k-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Genres",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output returns a list of music genres, each with a unique numeric ID and a descriptive name. This information serves as a navigational tool, allowing users to see available categories and use the genre ID to filter or search for specific radio stations in subsequent requests.",
      "output_format": "The response is a JSON object. Key information is nested under a 'data' key, which contains an array of genre objects. Each genre object has a numeric 'id' and a string 'name'. The root object also includes a 'success' flag and a 'total' count, which likely corresponds to the number of items in the 'data' array."
    },
    "connected tools": [
      {
        "tool name": "50K Radio Stations: Get Channels",
        "connect params": [
          {
            "name": "genre_id",
            "description": "Use this parameter to filter cities by genre id or set empty if you don't want to use it"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Halsey Lyric Snippets",
    "parent tool description": "An API that allows users to view short excerpts of Halsey's songs.",
    "tool name": "Halsey Lyric Snippets: random song & song's album information out of {artist}",
    "tool description": "Returns album information and a random song excerpt from Halsey's discography. This API provides access to Halsey's music catalog, allowing users to explore her albums and sample short excerpts of her songs without needing to stream or purchase the full tracks.",
    "required_parameters": [
      {
        "name": "artist",
        "type": "string",
        "description": "",
        "default": "Halsey"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://halsey-lyric-snippets.p.rapidapi.com/{artist}/song/random/info\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"halsey-lyric-snippets.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "random song & song's album information out of {artist}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool returns information about a single, randomly chosen song from Halsey's discography. The output includes the song's title and an array of lyric snippets, along with details of the album it belongs to, such as the album's name, artist, and release date. It's designed to allow users to sample random songs and discover music.",
      "output_format": "The output is a single JSON object. It contains a nested object under the `song` key, which in turn holds a `lyrics` field that is an array of strings. All fields appear to be consistently present and non-nullable. The response is not paginated."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title or album name to search on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song title or album name to search on YouTube Music"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song title to search for the song on Shazam"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title or album name to search"
          },
          {
            "name": "type",
            "description": "Can specify 'track' or 'album' based on what information to search for"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Halsey Lyric Snippets",
    "parent tool description": "An API that allows users to view short excerpts of Halsey's songs.",
    "tool name": "Halsey Lyric Snippets: random song out of {artist}",
    "tool description": "Retrieves a random song by the specified artist, delivering a short excerpt in the response. This API provides access to Halsey's song catalog, allowing users to explore random selections from her musical works without needing to search for specific titles.",
    "required_parameters": [
      {
        "name": "artist",
        "type": "string",
        "description": "",
        "default": "Halsey"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://halsey-lyric-snippets.p.rapidapi.com/{artist}/song/random\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"halsey-lyric-snippets.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "random song out of {artist}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns information about a single, randomly selected song by Halsey. The output is a JSON object containing the song's title, a unique identifier, and an array of various lyric excerpts from that song. This allows users to discover and sample random songs from the artist's discography.",
      "output_format": "The output is a single JSON object. It contains three keys: '_id' (string), 'name' (string), and 'lyrics' (an array of strings). The 'lyrics' array holds multiple short snippets from the song, which may contain newline characters (\\n) for line breaks within a snippet."
    },
    "connected tools": [
      {
        "tool name": "Halsey Lyric Snippets: specified {song}",
        "connect params": [
          {
            "param_name": "song",
            "source_field": "name"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "param_name": "q",
            "source_field": "name"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "param_name": "query",
            "source_field": "name"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Halsey Lyric Snippets",
    "parent tool description": "An API that allows users to view short excerpts of Halsey's songs.",
    "tool name": "Halsey Lyric Snippets: specified {song}",
    "tool description": "Retrieves a specific song by name and returns its content in the response. This endpoint is part of an API that provides access to short excerpts of Halsey's songs, allowing users to view selected portions of her musical works when searching for a particular title.",
    "required_parameters": [
      {
        "name": "song",
        "type": "string",
        "description": "",
        "default": "Ashley"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://halsey-lyric-snippets.p.rapidapi.com/song/{song}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"halsey-lyric-snippets.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "specified {song}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides details for a specific Halsey song, including a unique identifier, the song's title, and a list of lyric snippets. The lyrics are presented as short excerpts or lines, not the full song text. If the specified song is not found in the database, the tool returns an empty list.",
      "output_format": "The output is a JSON array. If a song is found, this array contains a single object with a unique string `_id`, the song `name`, and a `lyrics` key which holds an array of strings. Each string in the `lyrics` array is a short excerpt from the song. If the song is not found, the tool returns an empty array `[]`."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The song name from Halsey lyrics output can be used to search for the full track"
          },
          {
            "name": "type",
            "description": "Can be set to 'tracks' to specifically search for songs"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The song name from Halsey lyrics output can be used to search for the song on YouTube Music"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The song name from Halsey lyrics output can be used to search for the song"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Halsey Lyric Snippets",
    "parent tool description": "An API that allows users to view short excerpts of Halsey's songs.",
    "tool name": "Halsey Lyric Snippets: all songs from {artist}",
    "tool description": "Retrieves all songs by the specified artist, returning them in the response. This API provides access to short excerpts of Halsey's songs, allowing users to browse through her musical catalog and view lyrical snippets or brief audio samples of her work.",
    "required_parameters": [
      {
        "name": "artist",
        "type": "string",
        "description": "",
        "default": "Halsey"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://halsey-lyric-snippets.p.rapidapi.com/{artist}/song\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"halsey-lyric-snippets.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "all songs from {artist}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of songs by a specified artist. Each song in the list is an object containing a unique identifier, the song's title, and an array of lyrical excerpts. This information allows users to browse an artist's catalog and preview their song lyrics.",
      "output_format": "The output is a list of strings. The primary data is located in the first string element, which must be parsed as a JSON array of objects. Each object represents a song and contains an `_id` (string), `name` (string), and `lyrics` (array of strings). The subsequent strings in the top-level list appear to be empty placeholders."
    },
    "connected tools": [
      {
        "tool name": "Halsey Lyric Snippets: specified {song}",
        "connect params": [
          {
            "name": "song",
            "description": "The song name can be extracted from the output's song list"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Song names from the output can be used as search queries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Halsey Lyric Snippets",
    "parent tool description": "An API that allows users to view short excerpts of Halsey's songs.",
    "tool name": "Halsey Lyric Snippets: specified {album} information from {artist}",
    "tool description": "Retrieves a specific album by Halsey, returning the album details in the response. This endpoint is part of an API that provides access to short excerpts of Halsey's songs, allowing users to explore her discography by album and access preview content from her musical catalog.",
    "required_parameters": [
      {
        "name": "artist",
        "type": "string",
        "description": "",
        "default": "Halsey"
      },
      {
        "name": "album",
        "type": "string",
        "description": "",
        "default": "Badlands (Deluxe Edition)"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://halsey-lyric-snippets.p.rapidapi.com/{artist}/album/{album}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"halsey-lyric-snippets.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "specified {album} information from {artist}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list containing details for a specific Halsey album. Each album object includes a unique ID, name, release date, the artist's name, and a list of unique identifiers for each song on the album. This information is intended to provide a comprehensive overview of the album's contents, and the song IDs can likely be used to query for specific song details in subsequent calls.",
      "output_format": "The output is a JSON array of objects. Each object represents an album. The response is always an array, even if only one album is returned. If no matching album is found, the tool returns an empty array (`[]`). The album object contains a nested array of strings (`songs`) which are song identifiers."
    },
    "connected tools": [
      {
        "tool name": "Halsey Lyric Snippets: specified {song}",
        "connect params": [
          {
            "name": "song",
            "description": "The song IDs from the source tool output could be used to request specific songs"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The album name and artist from the source tool can be used to search for the album on Spotify"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Halsey Lyric Snippets",
    "parent tool description": "An API that allows users to view short excerpts of Halsey's songs.",
    "tool name": "Halsey Lyric Snippets: all albums from {artist}",
    "tool description": "Retrieves all albums by a specified artist (use \"Halsey\" to access Halsey's music) and returns them in the response. This endpoint is part of an API that provides access to short excerpts of Halsey's songs, allowing users to explore her discography and preview her musical works.",
    "required_parameters": [
      {
        "name": "artist",
        "type": "string",
        "description": "",
        "default": "Halsey"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://halsey-lyric-snippets.p.rapidapi.com/{artist}/album\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"halsey-lyric-snippets.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "all albums from {artist}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of albums by the artist Halsey. Each album entry contains a unique ID, the album's name, its release date, the artist's name, and a list of unique identifiers for the songs on that album. This output is intended to provide a comprehensive overview of the artist's discography, with the song IDs likely being usable in other tools to fetch more specific song data.",
      "output_format": "The output is a JSON array of objects. Each object represents an album and contains string values for keys like '_id', 'name', and 'releaseDate', along with a nested array of strings for the 'songs' key. If no albums are found for the artist, the tool returns an empty JSON array (`[]`)."
    },
    "connected tools": [
      {
        "tool name": "Halsey Lyric Snippets: specified {album} information from {artist}",
        "connect params": [
          {
            "name": "album"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "K-POP",
    "parent tool description": "Get K-POP detailed songs, idol, group info!",
    "tool name": "K-POP: girl-groups",
    "tool description": "Retrieves detailed information about K-pop girl groups, providing comprehensive profiles and data about female idol collectives in the Korean pop music industry. This endpoint taps into an extensive K-POP database that contains rich information about artists, songs, and groups, allowing users to explore specific details about girl groups' formation, members, discography, achievements, and company affiliations. Part of a broader K-POP information service that offers detailed data on various aspects of Korean pop music culture, including individual idols, boy groups, and song specifics.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "Query to search\n(Required)",
        "default": "Twice"
      }
    ],
    "optional_parameters": [
      {
        "name": "by",
        "type": "STRING",
        "description": "default: Stage Name\n'by' parameter help you choose which info you would like to query based on.\n\nOnly the below values can be accepted for 'by'. \n\n- Group Name (default)\n- Short Group Name\n- Korean Name\n- Date of Debut\n- Company\n- Members\n- Original Members\n- Fanclub Name\n- Active",
        "default": "Group Name"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "default: all there is\ncount limit for result",
        "default": ""
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "default: 0\noffset for the result data",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://k-pop.p.rapidapi.com/girl-groups\"\nquerystring = {\"by\": by, \"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"k-pop.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "girl-groups",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of K-pop girl groups with their profile information. Each group's data includes its English and Korean names, debut date, managing company, current and original member count, fan club name, and active status. A URL to a more detailed online profile may also be included.",
      "output_format": "The output is a JSON object containing a `data` key, which holds a JSON array of group objects. Some fields within these objects, such as `Group Profile`, `Short Group Name`, and `Fanclub Name`, are nullable. Numeric values, like the member count, are represented as strings. A `count` key at the top level indicates the number of group objects returned in the `data` array."
    },
    "connected tools": [
      {
        "tool name": "K-POP: songs",
        "connect params": [
          {
            "name": "q",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for songs by that group"
          },
          {
            "name": "by",
            "description": "Can be set to 'Artist' to search songs by the girl group name"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group on YouTube Music"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group"
          },
          {
            "name": "type",
            "description": "Can be set to 'artist' to search specifically for the girl group"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The girl group name from K-POP: girl-groups output can be used to search for the group on Shazam"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "K-POP",
    "parent tool description": "Get K-POP detailed songs, idol, group info!",
    "tool name": "K-POP: songs",
    "tool description": "Retrieves detailed information about K-POP songs, providing specific song data such as titles, artists, and release details. This endpoint is part of a comprehensive K-POP information service that offers extensive details about songs, idols, and groups within the Korean pop music industry, allowing users to access a rich database of K-POP content for research, fan activities, or music discovery purposes.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "Query to search\n(Required)",
        "default": "Spring Day"
      }
    ],
    "optional_parameters": [
      {
        "name": "by",
        "type": "STRING",
        "description": "default: Song Name\n'by' parameter help you choose which info you would like to query based on.\n\nOnly the below values can be accepted for \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"by\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\". \n\n- Song Name (default)\n- Date\n- Artist\n- Korean Name\n- Director\n- Type\n- Release\n",
        "default": "Song Name"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "default: all there is\ncount limit for result",
        "default": ""
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "default: 0\noffset for the result data",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://k-pop.p.rapidapi.com/songs\"\nquerystring = {\"by\": by, \"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"k-pop.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "songs",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of K-POP songs matching a query. Each song in the list includes detailed information such as the artist, English and Korean song titles, release date, music video director, and links to the official music video and a details page. This data is intended for music discovery, research, or fan activities.",
      "output_format": "The output is a JSON object containing a 'data' key, which holds a JSON array of song objects. A 'count' key at the root level indicates the number of songs returned. Fields within the song objects, such as 'Korean Name' and 'Director', can be empty strings, indicating that the data may not be available."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The K-POP song titles or artist names can be used as search queries"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The K-POP song titles or artist names can be used as search queries"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The K-POP song titles or artist names can be used to search for songs"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "K-POP",
    "parent tool description": "Get K-POP detailed songs, idol, group info!",
    "tool name": "K-POP: boy-groups",
    "tool description": "Retrieves detailed information about K-POP boy groups, providing comprehensive data about male idol groups in the K-POP industry. This uses a specialized database of K-POP information to deliver accurate and up-to-date details about boy bands, including their members, discography, debut dates, and other relevant facts. Part of a broader K-POP information service that offers extensive data about songs, individual idols, and various K-POP groups across the industry.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "Query to search\n(Required)",
        "default": "BTS"
      }
    ],
    "optional_parameters": [
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "default: 0\noffset for the result data",
        "default": ""
      },
      {
        "name": "by",
        "type": "STRING",
        "description": "default: Stage Name\n'by' parameter help you choose which info you would like to query based on.\n\nOnly the below values can be accepted for 'by'. \n\n- Group Name (default)\n- Short Group Name\n- Korean Name\n- Date of Debut\n- Company\n- Members\n- Original Members\n- Fanclub Name\n- Active",
        "default": "Group Name"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "default: all there is\ncount limit for result",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://k-pop.p.rapidapi.com/boy-groups\"\nquerystring = {\"by\": by, \"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"k-pop.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "boy-groups",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output provides a detailed profile for a K-POP boy group. It includes the group's various names (official, short, Korean), debut date, management company, and fan club name. The response also details the current and original number of members, their active status, and a URL to a more comprehensive external profile.",
      "output_format": "The tool returns a JSON object where the main content is under the 'data' key, which is a JSON array of group objects. Each object in the array represents one K-POP group. Some fields, like 'Short Group Name', can be null. Numeric values, such as member counts, are formatted as strings."
    },
    "connected tools": [
      {
        "tool name": "K-POP: songs",
        "connect params": [
          {
            "name": "q",
            "description": "The K-POP boy group's name can be used to search for songs by this group"
          }
        ]
      },
      {
        "tool name": "K-POP: Idols",
        "connect params": [
          {
            "name": "q",
            "description": "The K-POP boy group's member names can be used to search for individual idol information"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The K-POP boy group's name can be used to search for their music on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The K-POP boy group's name can be used to search for their music on YouTube Music"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The K-POP boy group's name can be used to search for their songs on Shazam"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "K-POP",
    "parent tool description": "Get K-POP detailed songs, idol, group info!",
    "tool name": "K-POP: Idols",
    "tool description": "Retrieves detailed information about an individual K-POP idol, providing specific personal and professional data about the performer. This endpoint is part of a comprehensive K-POP information service that offers extensive details about the Korean pop music industry, including artists, groups, and songs. The tool gives users access to a rich database of K-POP knowledge, allowing fans and researchers to explore in-depth profiles of their favorite idols while understanding their connections to groups, discographies, and other relevant industry information.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "Query to search\n(Required)",
        "default": "Jungkook"
      }
    ],
    "optional_parameters": [
      {
        "name": "by",
        "type": "STRING",
        "description": "default: Stage Name\n'by' parameter help you choose which info you would like to query based on.\n\nOnly the below values can be accepted for 'by'\n\n-  Stage Name (default)\n- Full Name\n- Korean Name\n- K. Stage Name\n- Date of Birth\n- Group\n- Country\n- Second Country\n- Height\n- Weight\n- Birthplace\n- Other Group\n- Former Group\n- Gender\n- Position\n- Instagram\n- Twitter\n",
        "default": "Stage Name"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "default: all there is\ncount limit for result",
        "default": ""
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "default: 0\noffset for the result data",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://k-pop.p.rapidapi.com/idols\"\nquerystring = {\"by\": by, \"q\": q}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"k-pop.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Idols",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides a detailed profile for a specific K-POP idol. This includes personal information like full name, date of birth, and nationality, as well as professional details such as stage name, current and former groups, and a link to a more extensive online profile. The information is designed to give fans and researchers a comprehensive overview of an individual performer.",
      "output_format": "The response is a JSON object containing a top-level key, \"data\", which holds a JSON array of idol profiles. Each profile is a JSON object with a consistent set of keys. Several fields within a profile can be null (e.g., \"Second Country\", \"Position\", \"Instagram\") if the information is unavailable or not applicable. Numeric values like \"Height\" and \"Weight\" are returned as strings."
    },
    "connected tools": [
      {
        "tool name": "K-POP: songs",
        "connect params": [
          {
            "name": "q",
            "description": "The idol's name can be used to search for songs they performed"
          }
        ]
      },
      {
        "tool name": "K-POP: boy-groups",
        "connect params": [
          {
            "name": "q",
            "description": "If the idol is part of a boy group, the group name from the idol profile can be used"
          }
        ]
      },
      {
        "tool name": "K-POP: girl-groups",
        "connect params": [
          {
            "name": "q",
            "description": "If the idol is part of a girl group, the group name from the idol profile can be used"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The idol's name can be used to search for their music on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The idol's name can be used to search for their music on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "kjoller",
    "parent tool description": "Lyrics for childrens' songs",
    "tool name": "kjoller: Get song by title",
    "tool description": "Retrieves a children's song by searching for its title. This tool accesses a database of lyrics specifically curated for children's songs, providing complete words and verses for popular nursery rhymes, lullabies, and educational songs that are age-appropriate for young audiences. Perfect for parents, teachers, or caregivers looking to introduce children to music or find the exact lyrics to a favorite children's tune.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "title",
        "type": "STRING",
        "description": "",
        "default": "abc"
      }
    ],
    "code": "import requests\n\nurl = \"https://kjoller.p.rapidapi.com/songs?\"\nquerystring = {\"title\": title}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"kjoller.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get song by title",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a JSON object containing a request status and a data payload. The 'status' key indicates if the query was successful, while the 'data' key holds an array of results. Based on the tool's description, this array is expected to contain song objects with lyrics, words, and verses, though the provided examples are all empty.",
      "output_format": "The output is a JSON object with two keys: 'status' (string) and 'data' (array). The provided examples only show the 'data' array as empty, which likely represents the case where no song is found for the given title. The structure of the objects within the 'data' array for a successful search is not shown."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term"
          }
        ]
      },
      {
        "tool name": "Shazam: auto-complete",
        "connect params": [
          {
            "name": "term"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "kjoller",
    "parent tool description": "Lyrics for childrens' songs",
    "tool name": "kjoller: Get songs by author",
    "tool description": "Retrieves all songs created by a specific author from a collection of children's song lyrics. This tool searches through a comprehensive database of lyrics specifically designed for children, allowing you to find multiple songs by the same songwriter or composer. Whether you're looking for educational songs, lullabies, or fun sing-alongs for kids, this search function helps you discover a particular author's complete contribution to children's music.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "text",
        "type": "STRING",
        "description": "",
        "default": "thorbj\u00f8rn egner"
      }
    ],
    "code": "import requests\n\nurl = \"https://kjoller.p.rapidapi.com/songs?\"\nquerystring = {\"text\": text}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"kjoller.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get songs by author",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a JSON object that indicates the status of the request and provides a list of songs. The 'status' key confirms the successful execution of the query, while the 'data' key contains a list of songs attributed to the specified author. This allows a user to see all the works by a particular children's songwriter found in the database.",
      "output_format": "The output is a JSON object with two keys: 'status' (string) and 'data' (array). The 'data' array is intended to hold the list of song results. The provided examples show an empty array ('[]'), which likely represents a successful query where no songs were found for the given author. It is assumed that if songs were found, this array would be populated with song objects, but their specific structure is not detailed in the examples."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Song titles from the kjoller output data array could be used as search queries"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Song titles from the kjoller output data array could be used as search queries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "kjoller",
    "parent tool description": "Lyrics for childrens' songs",
    "tool name": "kjoller: Get album",
    "tool description": "Retrieves a children's song album by its title, providing access to the specific collection of songs. This endpoint connects to a database of lyrics for children's songs, allowing users to find complete albums of age-appropriate musical content for kids. The service helps parents, teachers, and caregivers access wholesome musical material designed specifically for children's entertainment and educational purposes.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "album",
        "type": "STRING",
        "description": "",
        "default": "\u00e5h abe"
      }
    ],
    "code": "import requests\n\nurl = \"https://kjoller.p.rapidapi.com/songs?\"\nquerystring = {\"album\": album}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"kjoller.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get album",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output returns a list of songs belonging to a specific children's album. For each song, it provides the title, author and composer credits, and the full lyrics in both HTML and plain text formats. It also includes metadata for the album, such as its title, release year, and a URL for the cover art.",
      "output_format": "The tool returns a single JSON object. A key named 'data' contains a JSON array, where each element is an object representing a single song from the album. This song object contains nested objects for album details ('appears_on') and lyrics ('lyrics'). No pagination is indicated in the examples."
    },
    "connected tools": [
      {
        "tool name": "kjoller: Get song by title",
        "connect params": [
          {
            "name": "title",
            "description": "Could use song titles from the album to look up individual songs"
          }
        ]
      },
      {
        "tool name": "kjoller: Get songs by author",
        "connect params": [
          {
            "name": "text",
            "description": "Could use author information from songs to find other songs by the same author"
          }
        ]
      },
      {
        "tool name": "kjoller: Get songs by composer",
        "connect params": [
          {
            "name": "composer",
            "description": "Could use composer information from songs to find other songs by the same composer"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could use album title or song titles to search on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Could use album title or song titles to search on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "kjoller",
    "parent tool description": "Lyrics for childrens' songs",
    "tool name": "kjoller: Get songs by composer",
    "tool description": "Retrieves all songs composed by the creator of a specific melody, allowing you to find related musical works by the same composer. This endpoint taps into a database of children's song lyrics, providing access to a collection of age-appropriate musical content designed for young audiences. The service helps parents, teachers, and caregivers discover multiple works by favorite composers, making it easier to build themed musical activities or expand a child's familiarity with particular musical styles.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "composer",
        "type": "STRING",
        "description": "",
        "default": "bellman"
      }
    ],
    "code": "import requests\n\nurl = \"https://kjoller.p.rapidapi.com/songs?\"\nquerystring = {\"composer\": composer}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"kjoller.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get songs by composer",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of songs composed by a given creator. Each song in the list is represented as an object containing detailed information, including its ID, title, composer, lyrics (in both HTML and plain text), associated album details, duration, and descriptive tags. This allows users to explore the full range of a composer's work available in the children's song database.",
      "output_format": "The output is a JSON object containing a `status` string and a `data` key. The `data` key holds a JSON array of song objects. If no songs are found, the `data` array will be empty. Some fields within the song objects, such as `release_year`, `durationMs`, and `image_url`, can be empty strings, suggesting they are optional or may not always be available."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song titles or composer names from the source output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song titles or composer names from the source output"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song titles or composer names from the source output"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "Can use composer names from the source output"
          },
          {
            "name": "type",
            "description": "Can be set to 'artist' when using composer names"
          }
        ]
      },
      {
        "tool name": "Halsey Lyric Snippets: specified {song}",
        "connect params": [
          {
            "name": "song",
            "description": "Can use song titles from the source output if by Halsey"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Retrieve file",
    "tool description": "Retrieves a file hosted by the server, typically accessed by replacing the /p/ path in /merge and /edit endpoint responses with /f/ or /d/. This endpoint is part of a multipurpose API that powers various image, video, and audio operations, allowing you to access and download previously processed media files. The request will fail if the requested file doesn't exist or has been deleted. For premium features on the associated Discord bot, users can visit https://ko-fi.com/mizabot.",
    "required_parameters": [
      {
        "name": "path",
        "type": "string",
        "description": "",
        "default": "ABCDEF"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/d/{path}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Retrieve file",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is the raw binary data of a file, specifically a media file like an image, video, or audio. The examples provided contain the byte stream for a JPEG image, identifiable by the \"JFIF\" file marker. This data is intended to be saved directly to a file or used by other processes that can handle raw file content.",
      "output_format": "The output is a raw binary stream, not a structured format like JSON or XML. It represents the complete contents of a single file. As such, concepts like pagination, nesting, or nullability are not applicable; the entire file is returned in one response."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url"
          }
        ]
      },
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1"
          },
          {
            "name": "u2"
          },
          {
            "name": "u3"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Song trimming/extending",
    "tool description": "Trims a song or video to specified start and end times, returning a URL that requires a GET request to retrieve the actual output. Specify trim points in seconds or time formats like '2h30m', with the option to omit either by using an empty string or dash (-). The function can automatically extend content by looping when trim end exceeds the original duration, making it significantly faster than concatenating multiple copies for creating extended versions of media. This endpoint is part of a multipurpose API offering various image, video, and audio operations, allowing for efficient media manipulation without the need for re-encoding each segment.",
    "required_parameters": [
      {
        "name": "url",
        "type": "STRING",
        "description": "",
        "default": "https://www.youtube.com/watch?v=IgOci6JXPIc"
      }
    ],
    "optional_parameters": [
      {
        "name": "start",
        "type": "STRING",
        "description": "",
        "default": "-"
      },
      {
        "name": "fmt",
        "type": "STRING",
        "description": "",
        "default": "mp3"
      },
      {
        "name": "end",
        "type": "STRING",
        "description": "",
        "default": "45m"
      }
    ],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdlp\"\nquerystring = {\"start\": start, \"fmt\": fmt, \"end\": end, \"url\": url}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Song trimming/extending",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's direct output is a URL which must be accessed via a GET request to retrieve the final processed media file. The content at the URL is the raw binary data of the trimmed or extended song/video. In case of an error, the tool may return a string-encoded JSON object containing an error message instead of a URL.",
      "output_format": "The successful output is a string containing a URL. The content retrieved from this URL is raw binary data (e.g., a media file). Error outputs appear to be string-encoded JSON objects with a 'message' key. One example shows what appears to be the binary content of a JPEG file, while others show error messages."
    },
    "connected tools": [
      {
        "tool name": "Miza: Retrieve file",
        "connect params": [
          {
            "name": "path",
            "description": "The URL path from the song trimming output can be used to retrieve the processed file"
          }
        ]
      },
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "The URL from song trimming can be used as the first input for concatenation"
          },
          {
            "name": "u2",
            "description": "The URL from song trimming can be used as the second input for concatenation"
          },
          {
            "name": "u3",
            "description": "The URL from song trimming can be used as the third input for concatenation"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Song search",
    "tool description": "Searches for songs across popular music platforms including YouTube (default), SoundCloud (prefix with *scsearch:*), Spotify (prefix with *spsearch:*), or BandCamp (prefix with *bcsearch:*). This endpoint is part of a multipurpose API that handles various image, video, and audio operations, and uniquely offers unlimited free usage when accessed directly through http://i.mizabot.xyz/ytdl?search= instead of the RapidAPI forwarded URL. While other endpoints in this service have rate limits for direct access, this search functionality remains unrestricted, making it particularly valuable for audio discovery needs.",
    "required_parameters": [
      {
        "name": "search",
        "type": "STRING",
        "description": "",
        "default": "Despacito"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": search}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Song search",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of songs based on a search query. For each song found, it provides the title, a direct URL to the content on its host platform (e.g., YouTube, SoundCloud), the duration in seconds, and a URL for a thumbnail icon. The output is intended for audio discovery, enabling users to find and access songs across multiple services.",
      "output_format": "The primary output is a string-serialized JSON array. Each element in the array is an object representing a single song with string keys: 'name', 'url', 'icon', and a float key 'duration'. The tool can return multiple results in the array. One output example contains raw binary data for a JPEG image, which is inconsistent with the others and may be an erroneous response or an undocumented alternative output type (e.g., fetching the icon directly)."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use the URL from song search results to trim or extend the song"
          }
        ]
      },
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use the URL from song search results as the first song to concatenate"
          },
          {
            "name": "u2",
            "description": "Can use the URL from song search results as the second song to concatenate"
          },
          {
            "name": "u3",
            "description": "Can use the URL from song search results as the third song to concatenate"
          }
        ]
      },
      {
        "tool name": "Miza: Retrieve file",
        "connect params": [
          {
            "name": "path",
            "description": "Can use path information extracted from the song URL"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use the song name from search results to search for more details"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use the song name from search results to search on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can extract YouTube video ID from YouTube URLs in search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Song concatenation",
    "tool description": "Joins one or more audio or video files into a single file, accepting input URLs via query parameters ('u1', 'u2', etc.) which can include playlists for batch processing. This multipurpose API supports most video and audio formats for output (see https://mizabot.xyz/downloader for format list and testing), though processing time is longer than simple downloads as it must complete all conversions before streaming. The service redirects to a temporary but reusable download link for the final file. This endpoint is part of a comprehensive media manipulation API that offers numerous image, video, and audio operations, with premium features available for the associated Discord bot.",
    "required_parameters": [
      {
        "name": "u1",
        "type": "STRING",
        "description": "",
        "default": "https://www.youtube.com/watch?v=0zXcC-haBFc"
      }
    ],
    "optional_parameters": [
      {
        "name": "u3",
        "type": "STRING",
        "description": "",
        "default": "https://cdn.discordapp.com/attachments/688253918890688521/829266927003107338/paladin.ogg"
      },
      {
        "name": "fmt",
        "type": "STRING",
        "description": "",
        "default": "ogg"
      },
      {
        "name": "u2",
        "type": "STRING",
        "description": "",
        "default": "http://i.mizabot.xyz/d/Bc5SdZDrKg"
      }
    ],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdlc\"\nquerystring = {\"u3\": u3, \"u1\": u1, \"fmt\": fmt, \"u2\": u2}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Song concatenation",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's primary output is a single audio or video file, created by joining the media from the provided input URLs. This resulting file is made available via a redirect to a temporary download link and is intended for direct use, playback, or storage. In the event of an error, such as an invalid endpoint, the API returns a JSON object containing a human-readable error message.",
      "output_format": "A successful API call results in an HTTP redirect. Following this redirect leads to the raw binary data of the concatenated media file (e.g., audio/mpeg, video/mp4). Error responses are not binary but are structured as simple JSON objects containing a 'message' key. The output is a single file, so concepts like pagination or nesting do not apply."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use the concatenated file URL as input for further trimming or extending"
          }
        ]
      },
      {
        "tool name": "Miza: Retrieve file",
        "connect params": [
          {
            "name": "path",
            "description": "Can use the path from the concatenated file URL to retrieve it again"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Miza",
    "parent tool description": "A multipurpose API that includes many image, video, and audio operations. Please see https://ko-fi.com/mizabot if you'd like premium features on the Discord bot itself!",
    "tool name": "Miza: Playlist extraction",
    "tool description": "Produces information on all songs in a playlist from YouTube, Spotify, SoundCloud, and other platforms, with exceptionally fast response times (O(1) for YouTube, O(log n) for Spotify and SoundCloud). This endpoint leverages a multipurpose API that handles various image, video, and audio operations, using an efficient algorithm for YouTube playlists that's documented in their technical article. The service provides comprehensive song data retrieval that outperforms most comparable tools in speed and efficiency while being part of a broader media processing ecosystem.",
    "required_parameters": [
      {
        "name": "search",
        "type": "STRING",
        "description": "",
        "default": "https://www.youtube.com/playlist?list=PLXFwTY00FRUUZzL_Vjhy-bE8WIao3eyOi"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://miza.p.rapidapi.com/ytdl\"\nquerystring = {\"search\": search}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"miza.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Playlist extraction",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool extracts and provides information about all the songs within a given playlist from various platforms. For each song, it returns the name, a direct URL, and the duration in seconds. This output is intended to be used for displaying playlist contents, calculating total duration, or for further processing of individual tracks. The tool can also return structured error messages in cases of failure, such as API timeouts.",
      "output_format": "The successful output is a string containing a JSON array of objects. Each object represents a song and contains 'name' (string), 'url' (string), and 'duration' (integer) keys. Error responses are formatted as a string containing a JSON object detailing the error. One provided example is raw binary data for a JPEG image, which suggests the tool might return non-JSON data under certain un-documented conditions, possibly for errors or captchas. The provided examples show truncated data, but there is no explicit information on pagination or cursoring."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use the 'url' field from individual songs in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use the 'url' field from the first song in the playlist extraction output"
          },
          {
            "name": "u2",
            "description": "Can use the 'url' field from the second song in the playlist extraction output"
          },
          {
            "name": "u3",
            "description": "Can use the 'url' field from the third song in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use the 'name' field from individual songs in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use the 'name' field from individual songs in the playlist extraction output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use the 'name' field from individual songs in the playlist extraction output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /spotify/topsongs/{year}",
    "tool description": "Retrieves the most streamed songs on Spotify, either of all time or for a specific year when provided. This endpoint taps into comprehensive music streaming data that covers Spotify tracks, albums, and artists, allowing you to explore popularity trends and discover which songs have achieved the highest streaming numbers across different time periods. Simply leave the year parameter blank to see the all-time most streamed songs, or specify a year to narrow down results to that particular period.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2018"
      }
    ],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/spotify/topsongs/2018\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/spotify/topsongs/{year}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a ranked list of the most-streamed songs on Spotify, either for all time or for a specific year. Each entry in the list provides the song's rank, the artist and title as a single string, the total number of streams, and the daily stream count. This data is useful for analyzing music popularity trends.",
      "output_format": "The output is a JSON array of objects. Each object represents a song and contains the keys 'ranking', 'artist_and_title', 'streams', and 'daily'. All values are consistently formatted as strings, including the numerical data for ranking and stream counts. The structure is a flat list with no nested elements."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Search term can use artist_and_title from source"
          }
        ]
      },
      {
        "tool name": "Shazam: auto-complete",
        "connect params": [
          {
            "name": "term",
            "description": "Search term can use artist_and_title from source"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Search query can use artist_and_title from source"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Query can use artist_and_title from source"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/milestone/{milestone}",
    "tool description": "Identifies the fastest music videos to reach a specified milestone of views (X million) on YouTube, where X must be between 100-7000 million and increase in increments of 100 (e.g., 100M, 200M, 300M). This leverages comprehensive YouTube analytics data, providing insights into record-breaking performance metrics across music videos, tracks, albums, and artists. The tool analyzes viewing velocity trends from YouTube's vast database to determine which content achieved specific viewership milestones in the shortest timeframe.",
    "required_parameters": [
      {
        "name": "milestone",
        "type": "string",
        "description": "",
        "default": "500"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/milestone/500\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/milestone/{milestone}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a ranked list of the fastest music videos to reach a specified viewership milestone on YouTube. For each video, the output includes its rank, title, a direct YouTube URL, and the number of days it took to achieve the milestone. This information is used to analyze the performance and virality of music videos.",
      "output_format": "The output is a string representation of a JSON array, where each element is an object representing a music video. Each object contains four string keys: 'ranking', 'video' (the title), 'link' (the URL), and 'days'. Note that the 'ranking' and 'days' values are strings, not numbers. There is no evidence of pagination or nested structures in the provided examples, but some string values appear to be truncated."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can extract video ID from the YouTube URL in the source output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Watch Playlist",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can extract video ID from the YouTube URL in the source output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song Related",
        "connect params": [
          {
            "name": "browse_id",
            "description": "Can be derived from video information in the source output"
          }
        ]
      },
      {
        "tool name": "Miza: Song search",
        "connect params": [
          {
            "name": "search",
            "description": "Can use video title from the source output"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use video title from the source output"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use YouTube URL from the source output"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use video title from the source output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/topartist_feat/{year}",
    "tool description": "Retrieves a list of top artists on YouTube for a specified year, including those who appeared as featured artists in music videos. This endpoint leverages a comprehensive database of YouTube and Spotify content, providing access to detailed information about music videos, tracks, albums, and artist collaborations across the platform. The data covers both primary artists and featured appearances, allowing users to track popularity trends and collaborative patterns in the music industry through YouTube's vast music video ecosystem.",
    "required_parameters": [
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2022"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/topartist_feat/2022\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/topartist_feat/{year}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a ranked list of the most-viewed artists on YouTube for a given year. For each artist, it provides their rank, name, and total view count. The view count aggregates views from all videos where the artist is credited, including both primary and featured roles, making it useful for tracking overall artist popularity and collaborative impact.",
      "output_format": "The output is a JSON array of objects, where each object represents an artist. The objects contain three key-value pairs: 'ranking', 'artist', and 'views'. All values are formatted as strings, including the numerical rank and view count. The 'views' string includes commas as thousands separators."
    },
    "connected tools": [
      {
        "tool name": "K-POP: Idols",
        "connect params": [
          {
            "name": "q",
            "description": "Query to search\n(Required)"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Full name of songs or artists"
          }
        ]
      },
      {
        "tool name": "Shazam: auto-complete",
        "connect params": [
          {
            "name": "term",
            "description": "Any word or phrase of song, artist, etc... that you are familiar with"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Search query"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": ""
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": ""
          },
          {
            "name": "type",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/topartist/{year}",
    "tool description": "Retrieves the top artists on YouTube either of all time or for a specific year when you provide the {year} parameter. This endpoint leverages comprehensive music data from YouTube and Spotify, giving you access to detailed rankings and popularity metrics for music artists across different time periods. The service draws from an extensive database of music videos, tracks, albums, and artist information to deliver accurate insights into which performers have achieved the greatest success on the YouTube platform.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2019"
      }
    ],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/topartist/2019\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/topartist/{year}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a ranked list of the top music artists on YouTube for a given period (a specific year or all-time). For each artist, the output provides their numerical rank, name, and the total number of views they have accumulated. This data is useful for tracking artist popularity and performance on the platform.",
      "output_format": "The output is a JSON array of objects, where each object represents one artist. The objects are sorted by the 'ranking' field. Each object contains three string keys: 'ranking', 'artist', and 'views'. Note that the values for 'ranking' and 'views' are returned as strings, not numbers."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "param_name": "q",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "param_name": "query",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "K-POP: Idols",
        "connect params": [
          {
            "param_name": "q",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "K-POP: boy-groups",
        "connect params": [
          {
            "param_name": "q",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "K-POP: girl-groups",
        "connect params": [
          {
            "param_name": "q",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "param_name": "term",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "Shazam: auto-complete",
        "connect params": [
          {
            "param_name": "term",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "Halsey Lyric Snippets: all songs from {artist}",
        "connect params": [
          {
            "param_name": "artist",
            "source_field": "artist"
          }
        ]
      },
      {
        "tool name": "Halsey Lyric Snippets: all albums from {artist}",
        "connect params": [
          {
            "param_name": "artist",
            "source_field": "artist"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: \u200b/youtube/weekly/{year}/{nthweek}",
    "tool description": "Retrieves the most viewed YouTube music videos for a specific week of a given year (e.g., 21st week of 2019 via /youtube/weekly/2019/21). This endpoint taps into a comprehensive database of YouTube music content, providing trending video rankings alongside Spotify tracks, albums, and artist information. The service offers valuable insights into music popularity trends across specific time periods, allowing users to track which music videos captured the most attention during particular weeks throughout different years.",
    "required_parameters": [
      {
        "name": "nthweek",
        "type": "string",
        "description": "",
        "default": "21"
      },
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2019"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/weekly/2019/21\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "\u200b/youtube/weekly/{year}/{nthweek}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a ranked list of the most viewed YouTube music videos for a specific week and year. For each video, the output includes its ranking, change in rank status, video title, a direct link, total weeks on the chart, peak position, total views for the week, and the change in views from the prior week. This data is intended for analyzing music video popularity and tracking weekly trends on YouTube.",
      "output_format": "The primary output is a JSON array of objects, where each object represents a ranked music video. All fields within the objects, including numerical data like 'ranking' and 'views', are returned as strings. If no data is available for the requested period, the API returns a single string '404 Data not found' instead of a JSON array. The 'views_delta' field can be an empty string for new entries."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The video titles from the YouTube weekly chart can be used to search for corresponding tracks on Spotify"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The video titles from the YouTube weekly chart can be used to search for songs on Shazam"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The video titles from the YouTube weekly chart can be used to search for more details on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/topviews/published/{year}",
    "tool description": "Retrieves the most viewed YouTube videos published in a specific year (between 2010 and present), allowing you to discover trending content from any particular year. This endpoint leverages a comprehensive database of YouTube content statistics, part of a larger service that provides detailed data on music videos, tracks, albums, and artists across both YouTube and Spotify platforms. The tool helps users identify historically popular content, track viewing trends over time, and analyze which videos gained the most traction in specific years.",
    "required_parameters": [
      {
        "name": "year",
        "type": "string",
        "description": "",
        "default": "2017"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/topviews/published/2017\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/topviews/published/{year}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool provides a ranked list of the most viewed YouTube videos published in a specific year. For each video in the list, the output includes its ranking, title, a direct URL link, the total number of views, and the view count from the previous day. This information allows users to identify and analyze historically popular video content and track viewing trends over time.",
      "output_format": "The output is a JSON array of objects, with each object representing a single YouTube video. The array is sorted by the 'ranking' field. All values, including numerical data such as 'ranking', 'views', and 'yesterday_views', are formatted as strings. The provided examples appear to be truncated, suggesting the API may return a fixed number of results per call."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use YouTube URLs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use YouTube URLs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Miza: Playlist extraction",
        "connect params": [
          {
            "name": "search",
            "description": "Can use YouTube URLs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can extract video IDs from YouTube URLs in the source tool's output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Watch Playlist",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can extract video IDs from YouTube URLs in the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/topviews/artist/{nationality}",
    "tool description": "Retrieves the top viewed music videos on YouTube for artists of a specific nationality (e.g., '/youtube/topviews/vietnamese' for Vietnamese artists). This endpoint leverages a comprehensive database of music content across YouTube and Spotify platforms, providing access to detailed statistics and rankings for music videos, tracks, albums, and artists from various countries and cultural backgrounds.",
    "required_parameters": [
      {
        "name": "nationality",
        "type": "string",
        "description": "",
        "default": "vietnamese"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/topviews/artist/vietnamese\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/topviews/artist/{nationality}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a ranked list of the most viewed YouTube music videos for artists of a specific nationality. Each entry in the list includes the video's ranking, title, a direct YouTube link, its total view count, and its view count from the previous day. The tool can also return a simple string error message if the requested data cannot be found.",
      "output_format": "The primary output is a JSON array of objects, where each object represents a single music video. All values within the objects, including numerical data like 'ranking' and 'views', are returned as strings. In an error scenario, the output is a single string (e.g., '404 Year not found'), not a JSON object."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use video titles from the source tool to search for song information"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use video titles from the source tool to search for songs on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use video titles from the source tool to search for more details"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusicData API",
    "parent tool description": "Data for Youtube, Spotify music videos, tracks, albums, artist & more",
    "tool name": "MusicData API: /youtube/24h/{type}",
    "tool description": "Retrieves the most viewed music videos on YouTube filtered by content language category (English, Spanish, Asian, or Other). This endpoint leverages a comprehensive database of music video statistics across YouTube and Spotify, providing access to trending and popular content organized by language type. The service maintains up-to-date information on music videos, tracks, albums, and artists, allowing users to discover the highest-performing content within specific language markets.",
    "required_parameters": [
      {
        "name": "type",
        "type": "string",
        "description": "",
        "default": "english"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musicdata-api.p.rapidapi.com/youtube/24h/english\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"musicdata-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "/youtube/24h/{type}",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a ranked list of the most viewed YouTube music videos over the last 24 hours, categorized by language. Each entry in the list provides the video's rank, its change in position since the last update, the video title, a direct link to YouTube, and the total number of views and likes. This allows users to identify and analyze top-performing and trending music content within specific language markets.",
      "output_format": "The tool returns a JSON array of JSON objects. Each object represents a single music video and its associated metadata. All field values, including numerical ones like 'ranking', 'views', and 'likes', are formatted as strings. The 'views' and 'likes' strings contain comma separators. The provided examples do not indicate any form of pagination or cursoring."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song search",
        "connect params": [
          {
            "name": "search",
            "description": "The video titles from the source tool can be used as search queries to find the same songs"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The video titles from the source tool can be used as search terms to find the same songs on Shazam"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The video titles from the source tool can be used as search queries to find the same songs on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "The video titles from the source tool can be used as search queries to find more details about these songs"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "The YouTube links from the source tool can be directly used to trim or extend these popular videos"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusiclinkssApi",
    "parent tool description": "Music Links is an API that aims to find a given track, album or artist in many music platforms.",
    "tool name": "MusiclinkssApi: Search by url",
    "tool description": "Returns detailed information about tracks, albums, and artists when provided with a Spotify URL. This endpoint leverages the Music Links API, which specializes in finding and cross-referencing music content across multiple music platforms, allowing you to retrieve comprehensive data about specific music items from the Spotify ecosystem.",
    "required_parameters": [
      {
        "name": "spotify_url",
        "type": "STRING",
        "description": "",
        "default": "https://open.spotify.com/artist/1nIUhcKHnK6iyumRyoV68C"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musiclinkssapi.p.rapidapi.com/search/url\"\nquerystring = {\"spotify_url\": spotify_url}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"musiclinkssapi.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search by url",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object containing details about a musical artist, album, or track from a given Spotify URL. A successful response includes the title, an image URL, a description, a unique ID, and a nested object of links to the content on various streaming platforms like Spotify, Apple Music, and YouTube. The tool can also return a JSON object with an error message if the lookup fails.",
      "output_format": "The output is a single JSON object. In a successful case, it contains keys such as 'title', 'image', 'id', 'description', and a nested 'links' object. The 'links' object maps platform names to their respective URLs. In an error case, the object contains a single 'error' key with a string message. The examples are provided as escaped strings, but the underlying format is a JSON object. There is no pagination."
    },
    "connected tools": [
      {
        "tool name": "MusiclinkssApi: Get artist's albums",
        "connect params": [
          {
            "param_name": "spotify_url",
            "source_output_path": "links.spotify"
          }
        ]
      },
      {
        "tool name": "Spotify: Get tracks",
        "connect params": [
          {
            "param_name": "ids",
            "source_output_path": "id"
          }
        ]
      },
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "param_name": "ids",
            "source_output_path": "id"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Related Artists",
        "connect params": [
          {
            "param_name": "artist_id",
            "source_output_path": "id"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "param_name": "artist_id",
            "source_output_path": "id"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "param_name": "ids",
            "source_output_path": "id"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get albums",
        "connect params": [
          {
            "param_name": "ids",
            "source_output_path": "id"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "param_name": "video_id",
            "source_output_path": "links.youtube"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusiclinkssApi",
    "parent tool description": "Music Links is an API that aims to find a given track, album or artist in many music platforms.",
    "tool name": "MusiclinkssApi: Get artist's albums",
    "tool description": "Returns basic details about an artist's albums when provided with a Spotify URL. This endpoint leverages the Music Links API, which specializes in finding and connecting music content across multiple streaming platforms, allowing you to access comprehensive album information from a specific artist on Spotify while potentially enabling cross-platform music discovery.",
    "required_parameters": [
      {
        "name": "spotify_url",
        "type": "STRING",
        "description": "",
        "default": "https://open.spotify.com/artist/1nIUhcKHnK6iyumRyoV68C"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musiclinkssapi.p.rapidapi.com/artist_albums\"\nquerystring = {\"spotify_url\": spotify_url}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"musiclinkssapi.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get artist's albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of albums associated with a specific artist. For each album, it provides the official name, a unique Spotify ID, a direct URL to the album on Spotify, a URL for the cover art image, and the release date. The list appears to be sorted by release date in descending order, showing the most recent albums first.",
      "output_format": "The output is a JSON array of objects. Each object in the array represents a single album and contains a consistent set of key-value pairs: 'name', 'id', 'url', 'image', and 'release_date'. There is no indication of pagination or cursoring in the examples."
    },
    "connected tools": [
      {
        "tool name": "Spotify Web: Get albums",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use the album IDs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use the album URL from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MusiclinkssApi",
    "parent tool description": "Music Links is an API that aims to find a given track, album or artist in many music platforms.",
    "tool name": "MusiclinkssApi: Search by query",
    "tool description": "Returns detailed information about tracks, albums, or artists based on a provided query and element type. This endpoint leverages the Music Links API, which specializes in finding and retrieving music-related content across multiple music platforms, allowing users to access comprehensive information about their favorite music from various streaming services in one place.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "",
        "default": "Ennio Morricone"
      },
      {
        "name": "type",
        "type": "STRING",
        "description": "",
        "default": "artist"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://musiclinkssapi.p.rapidapi.com/search/query\"\nquerystring = {\"q\": q, \"type\": type}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"musiclinkssapi.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search by query",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of music entities\u2014artists, tracks, or albums\u2014based on a search query. Each entity in the result list includes its name, a unique ID, a URL to the item on Spotify, and a URL for an associated image (e.g., album art or artist photo). This output allows users to find and identify specific music content from a list of relevant matches.",
      "output_format": "The output is a JSON array of objects. Each object represents a single music entity and consistently contains 'name', 'id', and 'url' keys. The 'image' key is also present in most objects but may be optional or null for some entries. There is no explicit information on pagination or result limits."
    },
    "connected tools": [
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use the URL from the source tool output"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Get artist's albums",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use the artist URL from the source tool output"
          }
        ]
      },
      {
        "tool name": "Spotify: Get tracks",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use the track ID from the source tool output"
          }
        ]
      },
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use the artist ID from the source tool output"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Related Artists",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Can use the artist ID from the source tool output"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Can use the artist ID from the source tool output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use the artist ID from the source tool output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get albums",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use the album ID from the source tool output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Radio World - 75,000+ Worldwide FM Radio stations..",
    "parent tool description": "This is one of the largest collection of FM Radios API from around the world. Listen Updated 79,000+ Radio stations. All the Stations are Updating Daily & Weekly basis, New stations are Adding As soon as possible. At least 100+ Stations Are adding and 1000+ Stations are fixing to this API Weekly (This is minium ratio).",
    "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getAllQuotes",
    "tool description": "Retrieves a collection of quotes based on specified pagination parameters (limit and page). This endpoint is part of one of the world's largest FM radio APIs, which provides access to over 79,000 radio stations from around the globe. The database is actively maintained with daily and weekly updates, adding at least 100 new stations and fixing approximately 1,000 existing stations weekly, ensuring you have access to the most current and comprehensive radio station information available.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Item limitations per page. (default: 10)",
        "default": "10"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Page number to be displayed. (default: 1)",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com/get_quotes.php\"\nquerystring = {\"limit\": \"10\", \"page\": \"1\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "getAllQuotes",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a paginated list of quotes. Each quote object in the list contains the quote's text, its author, a category, and a unique identifier. The response also includes metadata about the pagination, such as the total number of available quotes, the current page, and the number of results per page.",
      "output_format": "The output is a single JSON object. It contains a top-level key `quotes` which holds a JSON array of quote objects. The API supports pagination, with metadata fields like `limit`, `total_quotes`, and `pages` included in the response."
    },
    "connected tools": []
  },
  {
    "parent tool name": "Radio World - 75,000+ Worldwide FM Radio stations..",
    "parent tool description": "This is one of the largest collection of FM Radios API from around the world. Listen Updated 79,000+ Radio stations. All the Stations are Updating Daily & Weekly basis, New stations are Adding As soon as possible. At least 100+ Stations Are adding and 1000+ Stations are fixing to this API Weekly (This is minium ratio).",
    "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getStationByCountry",
    "tool description": "Retrieves a list of FM radio stations filtered by country ID, with options to limit results per page, specify page number, and set ordering preferences. This endpoint taps into one of the world's largest collections of FM radio stations, providing access to over 79,000 stations that are updated daily and weekly. The database is continuously expanding, with approximately 100+ new stations added and 1,000+ stations improved weekly, ensuring you have access to the most comprehensive and up-to-date radio station directory available.",
    "required_parameters": [
      {
        "name": "country_id",
        "type": "NUMBER",
        "description": "Country ID* to fetch stations (default: 26 (USA))",
        "default": "26"
      }
    ],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Item limitation per page. (default: 10)",
        "default": "10"
      },
      {
        "name": "order",
        "type": "STRING",
        "description": "Ascending/Disascending order. (use only ASC or DESC)",
        "default": "ASC"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Page Number. (default: 1)",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com/station_by_country.php\"\nquerystring = {\"limit\": \"10\", \"order\": \"ASC\", \"page\": \"1\", \"country_id\": \"26\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "getStationByCountry",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a paginated list of radio stations for a specific country. It provides metadata about the query, such as the total number of stations found and pagination details. For each station, it includes essential information like its name, streaming URL, image/logo, and genre, along with redundant country details like name and flag URL.",
      "output_format": "The output is a single JSON object. The primary data is within the 'stations' key, which holds a JSON array of station objects. The response includes pagination and query metadata at the top level, such as 'limit', 'pages', and 'total_radios'. The 'genre' field within a station object can be an empty string, indicating it might be optional or unavailable. The 'total_radios' value is represented as a string rather than an integer."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use streaming URLs from radio stations as input sources for concatenation"
          },
          {
            "name": "u2",
            "description": "Can use additional streaming URLs from radio stations as input sources"
          },
          {
            "name": "u3",
            "description": "Can use additional streaming URLs from radio stations as input sources"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use streaming URLs from radio stations as input source for trimming/extending"
          }
        ]
      },
      {
        "tool name": "Miza: Retrieve file",
        "connect params": [
          {
            "name": "path",
            "description": "Could potentially use paths extracted from radio station streaming URLs"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Could use streaming URLs from radio stations if they point to SoundCloud content"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Radio World - 75,000+ Worldwide FM Radio stations..",
    "parent tool description": "This is one of the largest collection of FM Radios API from around the world. Listen Updated 79,000+ Radio stations. All the Stations are Updating Daily & Weekly basis, New stations are Adding As soon as possible. At least 100+ Stations Are adding and 1000+ Stations are fixing to this API Weekly (This is minium ratio).",
    "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getHomePage",
    "tool description": "Retrieves a limited number of radio stations to display on your landing or home page based on a specified limit parameter. This endpoint provides an easy way to showcase selected stations without additional development work. It draws from one of the world's largest collections of FM radio stations, featuring over 79,000 stations from around the globe that are updated daily and weekly. The database continuously expands with approximately 100+ new stations added and 1000+ stations fixed weekly, ensuring you always have access to fresh, functioning radio content for your website's front page.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Item limitation on landing page. (default: 10)",
        "default": "10"
      }
    ],
    "code": "import requests\n\nurl = \"https://radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com/get_home.php\"\nquerystring = {\"limit\": \"10\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "getHomePage",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a list of featured radio stations, designed for display on a website's home page. For each station, it provides comprehensive details including its unique ID, name, image, streaming URL, genre, and country of origin (name, ID, and flag icon). A top-level 'status' field indicates the success of the API request.",
      "output_format": "The output is a single JSON object. This object contains a key named \"featured\", which holds a JSON array of radio station objects. Each object within the array has a flat structure with key-value pairs containing station details. There is no evidence of pagination or cursoring in the output."
    },
    "connected tools": [
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: searchStation",
        "connect params": [
          {
            "name": "keyword",
            "description": "The station name from the source tool's output could be used as a search keyword"
          }
        ]
      },
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getStationByCountry",
        "connect params": [
          {
            "name": "country_id",
            "description": "The country ID from the source tool's output could be used to filter stations by country"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "The station name from the source tool's output could be used as a search term"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The station name or genre from the source tool's output could be used as a search query"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Radio World - 75,000+ Worldwide FM Radio stations..",
    "parent tool description": "This is one of the largest collection of FM Radios API from around the world. Listen Updated 79,000+ Radio stations. All the Stations are Updating Daily & Weekly basis, New stations are Adding As soon as possible. At least 100+ Stations Are adding and 1000+ Stations are fixing to this API Weekly (This is minium ratio).",
    "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: searchStation",
    "tool description": "Searches for radio stations by keywords (such as radio name or country name), with options to specify result limits per page (default 10), page number (default 1), and sort order (ASC or DESC, default ASC). This endpoint taps into one of the world's largest collections of FM radio stations, providing access to over 79,000 stations from around the globe. The database is rigorously maintained with daily and weekly updates, adding at least 100 new stations and fixing approximately 1,000 stations weekly to ensure comprehensive and reliable radio station information.",
    "required_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "Enter search keyword here.",
        "default": "hello"
      }
    ],
    "optional_parameters": [
      {
        "name": "order",
        "type": "STRING",
        "description": "Display item by Ascending or Disascending order",
        "default": "ASC"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Page Number.",
        "default": "1"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Item limitation per page.",
        "default": "10"
      }
    ],
    "code": "import requests\n\nurl = \"https://radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com/search_radio.php\"\nquerystring = {\"order\": \"ASC\", \"keyword\": \"hello\", \"page\": \"1\", \"limit\": \"10\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "searchStation",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a list of radio stations that match a keyword search, providing details for each station such as its name, streaming URL, genre, and country of origin. The response also includes metadata about the search itself, including the total number of matching stations and pagination information. This is primarily used to discover and get connection details for radio stations around the world.",
      "output_format": "The output is a single JSON object. The core information is a list of station objects nested under the 'stations' key. The response is paginated, with top-level keys like 'limit', 'pages', and 'total_radios' providing context for the results. It's notable that several fields that appear numerical, such as 'total_radios', 'radio_id', and 'country_id', are formatted as strings."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Could use a radio station's streaming URL from the search results"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Could use a radio station's streaming URL from the search results"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Could use a radio station's streaming URL if it's a SoundCloud stream"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Radio World - 75,000+ Worldwide FM Radio stations..",
    "parent tool description": "This is one of the largest collection of FM Radios API from around the world. Listen Updated 79,000+ Radio stations. All the Stations are Updating Daily & Weekly basis, New stations are Adding As soon as possible. At least 100+ Stations Are adding and 1000+ Stations are fixing to this API Weekly (This is minium ratio).",
    "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getAllCountry",
    "tool description": "Retrieves a paginated list of country names with options to limit results per page, select specific pages, and determine the sort order. This endpoint is part of a comprehensive global FM radio station database that contains over 79,000 radio stations from around the world. The database is actively maintained with daily and weekly updates, adding at least 100 new stations weekly and fixing approximately 1,000 existing station entries, ensuring you have access to current and accurate country information for browsing radio content internationally.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Item limitation per page. (default is length.value of countries array. here is 500 max)",
        "default": "500"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "Page no to be displayed (default : 1)",
        "default": "1"
      },
      {
        "name": "order",
        "type": "STRING",
        "description": "Ascending/Disascending order (use ASC or DESC)",
        "default": "ASC"
      }
    ],
    "code": "import requests\n\nurl = \"https://radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com/get_all_country.php\"\nquerystring = {\"limit\": \"500\", \"page\": \"1\", \"order\": \"ASC\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"radio-world-75-000-worldwide-fm-radio-stations.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "getAllCountry",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a paginated list of countries from its global radio station database. For each country, the output provides a unique ID, its name, a URL to its flag image, and the total number of radio stations available. The response also includes metadata about the pagination, such as the current page, items per page, total number of countries, and the sorting order used.",
      "output_format": "The output is a JSON object. The primary data is contained within the `countries` key, which is a JSON array of country objects. The API uses pagination, and the response includes metadata fields like `page`, `limit`, and `total_country`. It's notable that several fields containing numerical data, such as `country_id`, `total_country`, and `total_radios`, are encoded as strings."
    },
    "connected tools": [
      {
        "tool name": "Radio World - 75,000+ Worldwide FM Radio stations..: getStationByCountry",
        "connect params": [
          {
            "name": "country_id",
            "description": "The country_id from getAllCountry can be used to fetch radio stations for a specific country"
          }
        ]
      },
      {
        "tool name": "50K Radio Stations: Get Cities",
        "connect params": [
          {
            "name": "country_id",
            "description": "The country_id from getAllCountry can be used to filter cities by country"
          }
        ]
      },
      {
        "tool name": "50K Radio Stations: Get Channels",
        "connect params": [
          {
            "name": "country_id",
            "description": "The country_id from getAllCountry can be used to filter radio channels by country"
          }
        ]
      },
      {
        "tool name": "50K Radio Stations: Get Countries",
        "connect params": [
          {
            "name": "keyword",
            "description": "Country names from getAllCountry can be used to search for specific countries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Shazam",
    "parent tool description": "Identify any song. Discover, artists, lyrics, videos & playlists to create a song detector site/application such as shazam.com",
    "tool name": "Shazam: songs/get-details",
    "tool description": "Gets detailed information about a specific song, providing comprehensive data on the requested track. This endpoint leverages a vast music recognition database similar to Shazam.com, allowing you to access in-depth details about songs including artist information, lyrics, associated videos, and playlist appearances. The service is part of a robust music identification platform that enables song discovery and detailed music information retrieval for applications, websites, or personal use.",
    "required_parameters": [
      {
        "name": "key",
        "type": "STRING",
        "description": "The key field returned from .../songs/detect or .../search endpoint",
        "default": "40333609"
      }
    ],
    "optional_parameters": [
      {
        "name": "locale",
        "type": "STRING",
        "description": "The language code",
        "default": "en-US"
      }
    ],
    "code": "import requests\n\nurl = \"https://shazam.p.rapidapi.com/songs/get-details\"\nquerystring = {\"key\": key, \"locale\": locale}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"shazam.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "songs/get-details",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a detailed data object for a specific song or media campaign. For music tracks, the output includes the song title, artist, various image URLs (cover art, background), and a 'hub' object with deep links to streaming services like Apple Music. The tool may also return data for non-music entities like campaigns, which have a different structure containing metadata and webview links.",
      "output_format": "The output is a single JSON object, not an array. The structure of the object is conditional based on the 'type' field (e.g., 'MUSIC', 'CAMPAIGN'). The 'MUSIC' type contains several nested objects like 'images', 'share', and 'hub'. The 'CAMPAIGN' type has a different structure, including a 'sections' array. Fields specific to one type will likely be absent or null in others."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "The song title and artist information from the source tool can be used as search query"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "param_name": "query",
            "description": "The song title and artist information from the source tool can be used to search for the song on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Shazam",
    "parent tool description": "Identify any song. Discover, artists, lyrics, videos & playlists to create a song detector site/application such as shazam.com",
    "tool name": "Shazam: songs/get-count",
    "tool description": "Retrieves the total number of times a specific song has been detected or Shazamed using the /songs/detect or /songs/v2/detect endpoint. This leverages Shazam's powerful music recognition technology that can identify virtually any song from its audio signature, providing access to the same song detection capabilities that power shazam.com. The data includes comprehensive detection statistics that can be integrated into music discovery applications, allowing developers to build features showing song popularity based on how often users around the world have identified tracks through the Shazam service.",
    "required_parameters": [
      {
        "name": "key",
        "type": "STRING",
        "description": "The key field returned from .../songs/detect or .../search endpoint",
        "default": "40333609"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://shazam.p.rapidapi.com/songs/get-count\"\nquerystring = {\"key\": key}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"shazam.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "songs/get-count",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output provides the total number of times a specific song has been detected or \"Shazamed\". This count serves as a popularity metric for the song. The response includes the unique song ID, the total detection count, and a type identifier for the data.",
      "output_format": "The tool returns a single JSON object, serialized as a string. This object contains a string 'id', an integer 'total', and a string 'type'. In cases where no data is available or an error occurs, the tool may return an empty string."
    },
    "connected tools": [
      {
        "tool name": "Shazam: songs/get-details",
        "connect params": [
          {
            "name": "key",
            "description": "The key field returned from .../songs/detect or .../search endpoint"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "The song ID could be mapped to a YouTube video ID with additional processing"
          }
        ]
      },
      {
        "tool name": "Spotify: Get tracks",
        "connect params": [
          {
            "name": "ids",
            "description": "The song ID could be mapped to a Spotify track ID with additional processing"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Shazam",
    "parent tool description": "Identify any song. Discover, artists, lyrics, videos & playlists to create a song detector site/application such as shazam.com",
    "tool name": "Shazam: search",
    "tool description": "Searches for songs and artists that match your input term, allowing you to quickly find specific music content. This leverages a comprehensive music identification system similar to Shazam, giving you access to a vast database of songs, artists, lyrics, videos, and playlists. The search functionality serves as a foundation for music discovery and identification, enabling you to build applications that can detect and provide detailed information about any song.",
    "required_parameters": [
      {
        "name": "term",
        "type": "STRING",
        "description": "Full name of songs or artists",
        "default": "kiss the rain"
      }
    ],
    "optional_parameters": [
      {
        "name": "locale",
        "type": "STRING",
        "description": "The language code",
        "default": "en-US"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "For paging purpose, maximum is fixed at 5 items per response",
        "default": "5"
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "For paging purpose",
        "default": "0"
      }
    ],
    "code": "import requests\n\nurl = \"https://shazam.p.rapidapi.com/search\"\nquerystring = {\"term\": term, \"locale\": locale, \"limit\": limit, \"offset\": offset}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"shazam.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "search",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of music tracks that match a given search term. For each matching track, it provides comprehensive details including the song title, artist name, unique identifiers, and URLs for associated images like cover art. It also includes a 'hub' object with deep links to play the track on various streaming services, such as Apple Music and Spotify.",
      "output_format": "The output is a JSON object. The primary data is located within a nested structure at `tracks.hits`. `hits` is an array of objects, where each object represents a single song result and contains a `track` object with the detailed information. This structure implies that the tool can return multiple matching tracks in a single response."
    },
    "connected tools": [
      {
        "tool name": "Shazam: songs/get-details",
        "connect params": [
          {
            "name": "key",
            "description": "Can use track ID/key from Shazam search results"
          }
        ]
      },
      {
        "tool name": "Shazam: songs/get-count",
        "connect params": [
          {
            "name": "key",
            "description": "Can use track ID/key from Shazam search results"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title and artist name from Shazam search results"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use Spotify URLs from hub links in Shazam search results"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use song title and artist name from Shazam search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Shazam",
    "parent tool description": "Identify any song. Discover, artists, lyrics, videos & playlists to create a song detector site/application such as shazam.com",
    "tool name": "Shazam: auto-complete",
    "tool description": "Get song suggestions based on a word or phrase you provide. This leverages Shazam's extensive music database to help you discover songs, artists, lyrics, videos, and playlists that match your query, functioning like a song detector service. Whether you're looking for music with specific themes, lyrics containing certain words, or artists related to a concept, this tool helps you explore music content similar to how Shazam identifies and connects users with music.",
    "required_parameters": [
      {
        "name": "term",
        "type": "STRING",
        "description": "Any word or phrase of song, artist, etc... that you are familiar with",
        "default": "kiss the"
      }
    ],
    "optional_parameters": [
      {
        "name": "locale",
        "type": "STRING",
        "description": "The language code",
        "default": "en-US"
      }
    ],
    "code": "import requests\n\nurl = \"https://shazam.p.rapidapi.com/auto-complete\"\nquerystring = {\"term\": term, \"locale\": locale}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"shazam.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "auto-complete",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of search term suggestions based on an initial user query. Each suggestion is a string that could represent a song title, artist, or a related musical phrase. These suggestions are intended to be used for auto-completing a search bar to help users quickly find specific music-related content.",
      "output_format": "The output is a JSON object containing a single top-level key, 'hints'. The value of 'hints' is an array of objects, where each object has a single key, 'term', containing the string suggestion. The examples are provided as serialized JSON strings."
    },
    "connected tools": [
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Full name of songs or artists"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Search query"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": ""
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Albums",
        "connect params": [
          {
            "name": "term",
            "description": "Search term."
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Users",
        "connect params": [
          {
            "name": "term",
            "description": "Search term."
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Playlists",
        "connect params": [
          {
            "name": "term",
            "description": "Search term."
          }
        ]
      },
      {
        "tool name": "kjoller: Get song by title",
        "connect params": [
          {
            "name": "title",
            "description": ""
          }
        ]
      },
      {
        "tool name": "K-POP: songs",
        "connect params": [
          {
            "name": "q",
            "description": "Query to search\n(Required)"
          }
        ]
      },
      {
        "tool name": "K-POP: Idols",
        "connect params": [
          {
            "name": "q",
            "description": "Query to search\n(Required)"
          }
        ]
      },
      {
        "tool name": "K-POP: boy-groups",
        "connect params": [
          {
            "name": "q",
            "description": "Query to search\n(Required)"
          }
        ]
      },
      {
        "tool name": "K-POP: girl-groups",
        "connect params": [
          {
            "name": "q",
            "description": "Query to search\n(Required)"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "SoundCloud Scraper",
    "parent tool description": "An all-in-one SoundCloud scraper/downloader. Scrapes albums, playlists, profiles. Downloads uncut high-quality audios and lyrics.",
    "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
    "tool description": "Downloads a track's lyrics from Spotify, providing the text content of songs. This endpoint is part of a comprehensive audio platform scraper that extracts content from various music services, including SoundCloud and Spotify. The service allows users to access not only lyrics but also scrape albums, playlists, and profiles, as well as download high-quality, uncut audio files from these platforms. Powered by Spotify Scraper technology, this tool helps music enthusiasts collect and archive song lyrics without navigating through multiple interfaces.",
    "required_parameters": [
      {
        "name": "track",
        "type": "STRING",
        "description": "Track URL or ID.",
        "default": "https://soundcloud.com/owlcityofficial/the-saltwater-room"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "ENUM",
        "description": "File format. Defaults to `lrc`.",
        "default": ""
      },
      {
        "name": "candidate",
        "type": "NUMBER",
        "description": "The number of the most related Spotify tracks among which a track with the nearest duration will be selected to download its lyrics. Defaults to `3`.",
        "default": ""
      },
      {
        "name": "delay",
        "type": "NUMBER",
        "description": "Delay time in milliseconds. Defaults to `0`. Negative value is allowed.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://soundcloud-scraper.p.rapidapi.com/v1/track/lyrics\"\nquerystring = {\"track\": track}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"soundcloud-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Download Lyrics on Spotify (2 Quotas)",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides the time-stamped lyrics for a specific song from Spotify as a single string. Each line of the lyrics is prefixed with a timestamp in the format `[mm:ss.ms]`, indicating the precise time that line is sung in the track. This output is primarily intended for use in applications that require synchronized lyric displays, such as music players or karaoke apps.",
      "output_format": "The output is a single string. This string is formatted with each line of lyrics on a new line, separated by a newline character (`\\n`). The beginning of each line contains a timestamp."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song search",
        "connect params": [
          {
            "name": "search",
            "description": "Lyrics can be used to search for the original song or related music"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Lyrics can be used to search for the original song or related music on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Lyrics can be used to search for the song or related music on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "SoundCloud Scraper",
    "parent tool description": "An all-in-one SoundCloud scraper/downloader. Scrapes albums, playlists, profiles. Downloads uncut high-quality audios and lyrics.",
    "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
    "tool description": "Fetches complete track details from SoundCloud and provides download links for uncut tracks in both high and standard quality formats. This all-in-one SoundCloud scraper utilizes comprehensive data extraction capabilities to access audio content across albums, playlists, and profiles, allowing you to obtain not just track information but also high-quality audio files and associated lyrics. For implementation guidance, refer to the 'How to Use Audio URLs' tutorial.",
    "required_parameters": [
      {
        "name": "track",
        "type": "STRING",
        "description": "Track URL or ID.",
        "default": "https://soundcloud.com/edsheeran/photograph"
      }
    ],
    "optional_parameters": [
      {
        "name": "download",
        "type": "ENUM",
        "description": "Download quality. Defaults to `sq`.\n* **`hq`**: High and standard quality - 3 quotas\n* **`sq`**: Standard quality - 2 quotas\n* **`none`**: No download - 1 quota\n\nThe final price depends on the existence of the file of the corresponding quality. For example, if `hq` is requested but the high-quality file does not exist, then the price will be 2 quotas if the standard one exists or 1 quota if there is no file available.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://soundcloud-scraper.p.rapidapi.com/v1/track/metadata\"\nquerystring = {\"track\": track}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"soundcloud-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get Track Metadata (1-3 Quotas)",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive JSON object containing metadata for a single SoundCloud track. This includes the track's title, artist, genre, release date, engagement statistics (plays, likes, comments), and publisher details. A key feature is the included array of audio download links, providing URLs for the track in various formats and qualities.",
      "output_format": "The output is a single JSON object. It contains several nested objects, such as 'publisher' and 'user', and a nested array of objects named 'audio', where each object provides a download URL and details for a specific audio format. Several fields can be null, including 'description', 'caption', and 'purchaseUrl'."
    },
    "connected tools": [
      {
        "tool name": "Miza: Song concatenation",
        "connect params": [
          {
            "name": "u1",
            "description": "Can use the audio download URLs from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "Miza: Song trimming/extending",
        "connect params": [
          {
            "name": "url",
            "description": "Can use the audio download URLs from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use the track title and artist name from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use the track title and artist name from SoundCloud Scraper output"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use the track URL from SoundCloud Scraper output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "SoundCloud Scraper",
    "parent tool description": "An all-in-one SoundCloud scraper/downloader. Scrapes albums, playlists, profiles. Downloads uncut high-quality audios and lyrics.",
    "tool name": "SoundCloud Scraper: Search for Albums",
    "tool description": "Searches for SoundCloud albums with optional filters and pagination support, allowing you to discover music collections across the platform. This endpoint is part of a comprehensive SoundCloud scraper/downloader that can extract data from albums, playlists, and profiles while enabling high-quality audio downloads and lyrics retrieval. The tool helps you find specific album content that matches your criteria before potentially downloading uncut, high-quality versions of the audio tracks.",
    "required_parameters": [
      {
        "name": "term",
        "type": "STRING",
        "description": "Search term.",
        "default": "Ludovico"
      }
    ],
    "optional_parameters": [
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "(**README**: [How to Use Endpoints with `offset`](https://rapidapi.com/DataFanatic/api/soundcloud-scraper/tutorials/how-to-use-endpoints-with-%60offset%60))\nThe number of items omitted before the results. Defaults to `0`.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "The max number of items returned. Defaults to `50`.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://soundcloud-scraper.p.rapidapi.com/v1/search/albums\"\nquerystring = {\"term\": term}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"soundcloud-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search for Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of SoundCloud albums matching the search criteria. Each album object contains detailed metadata, including its title, duration, release date, artwork URL, track count, and the number of likes and reposts. The output also includes a nested object with information about the artist, such as their name, follower count, and verification status.",
      "output_format": "The output is a single JSON object. The search results are contained within an array located at `albums.items`. The response supports pagination via an offset mechanism; the `albums.nextOffset` field provides the integer offset for the next page of results. If `nextOffset` is null, it indicates the last page. Some fields, such as `description` and `labelName`, can be null."
    },
    "connected tools": [
      {
        "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use album URLs or track URLs from the album results"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use track URLs from the album results"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use album titles or artist names from the search results"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "Can use artist names from the album results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "SoundCloud Scraper",
    "parent tool description": "An all-in-one SoundCloud scraper/downloader. Scrapes albums, playlists, profiles. Downloads uncut high-quality audios and lyrics.",
    "tool name": "SoundCloud Scraper: Search for Users",
    "tool description": "Searches for SoundCloud users with optional filters and pagination support, allowing you to find specific creators on the platform. This is part of a comprehensive SoundCloud scraper/downloader that enables you to access various content types including albums, playlists, and profiles, while also providing capabilities to download uncut high-quality audio files and lyrics from the platform.",
    "required_parameters": [
      {
        "name": "term",
        "type": "STRING",
        "description": "Search term.",
        "default": "Ludovico"
      }
    ],
    "optional_parameters": [
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "(**README**: [How to Use Endpoints with `offset`](https://rapidapi.com/DataFanatic/api/soundcloud-scraper/tutorials/how-to-use-endpoints-with-%60offset%60))\nThe number of items omitted before the results. Defaults to `0`.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "The max number of items returned. Defaults to `50`.",
        "default": ""
      },
      {
        "name": "place",
        "type": "STRING",
        "description": "Filters by a user's location (e.g., `London`).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://soundcloud-scraper.p.rapidapi.com/v1/search/users\"\nquerystring = {\"term\": term}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"soundcloud-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search for Users",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of SoundCloud user profiles that match a search query. The output includes a total count of matching users and provides detailed information for each user in the returned list, such as their user ID, name, description, profile statistics (follower, track, and like counts), location, and verification status. This information can be used to identify specific creators or analyze user data on the platform.",
      "output_format": "The output is a single JSON object. The primary data is a list of user objects found under the `users.items` key. The response supports offset-based pagination, indicated by the `users.nextOffset` field, which provides the value for retrieving the next page of results. A value of `null` or `None` for `nextOffset` indicates the last page. Some fields within a user object, such as `repostCount`, can be null."
    },
    "connected tools": [
      {
        "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use SoundCloud user URLs from the search results to access tracks by specific users"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use SoundCloud user URLs from the search results to access tracks by specific users for lyrics"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "SoundCloud Scraper",
    "parent tool description": "An all-in-one SoundCloud scraper/downloader. Scrapes albums, playlists, profiles. Downloads uncut high-quality audios and lyrics.",
    "tool name": "SoundCloud Scraper: Search for Playlists",
    "tool description": "Searches for SoundCloud playlists with optional filters and supports pagination scraping. This endpoint is part of an all-in-one SoundCloud scraper/downloader that allows comprehensive access to SoundCloud content, including the ability to scrape albums, playlists, and profiles, as well as download uncut high-quality audio files and lyrics.",
    "required_parameters": [
      {
        "name": "term",
        "type": "STRING",
        "description": "Search term.",
        "default": "Ludovico"
      }
    ],
    "optional_parameters": [
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "(**README**: [How to Use Endpoints with `offset`](https://rapidapi.com/DataFanatic/api/soundcloud-scraper/tutorials/how-to-use-endpoints-with-%60offset%60))\nThe number of items omitted before the results. Defaults to `0`.",
        "default": ""
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "The max number of items returned. Defaults to `50`.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://soundcloud-scraper.p.rapidapi.com/v1/search/playlists\"\nquerystring = {\"term\": term}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"soundcloud-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search for Playlists",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of SoundCloud playlists based on a search query. For each playlist, it provides comprehensive metadata such as its title, URL, duration, creation date, like and repost counts, and associated tags. The output also includes a nested object with details about the creator user and a list of track IDs within the playlist. This information can be used to discover music or to obtain playlist details for further processing.",
      "output_format": "The top-level output is a JSON object containing a `playlists` object. This `playlists` object holds an `items` array, where each element is a JSON object representing a single playlist. The structure is nested, with each playlist object containing a `user` object and a `tracks` array. Pagination is supported via the `nextOffset` field within the `playlists` object. Many fields, like `description` or `artworkUrl`, can be null."
    },
    "connected tools": [
      {
        "tool name": "SoundCloud Scraper: Get Track Metadata (1-3 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use track IDs from the playlist's tracks array"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use track URLs from the playlist's tracks"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use playlist title or track names to find equivalent content on Spotify"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use playlist title or track names to find equivalent content on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify: Concerts",
    "tool description": "Retrieves information about concerts and live music events for artists. This endpoint leverages Spotify's comprehensive data API, which provides access to millions of songs, podcasts, artists, albums, and playlists, allowing users to discover upcoming performances by their favorite musicians. The data includes details such as venue locations, dates, and ticket availability, drawing from Spotify's extensive artist database and music ecosystem to help users plan their live music experiences.",
    "required_parameters": [
      {
        "name": "gl",
        "type": "STRING",
        "description": "",
        "default": "US"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify23.p.rapidapi.com/concerts/\"\nquerystring = {\"gl\": \"US\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify23.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Concerts",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns detailed information about live music events and concerts. The output includes a list of events, each specifying the venue, location, date, and a comprehensive list of all performing artists. For each artist, details such as their name, Spotify URI, and image are provided. This information is intended to help users discover and plan for upcoming live music performances.",
      "output_format": "The output is a string-serialized JSON object. The primary data is contained within the 'events' key, which is an array of event objects. This data is deeply nested; each event contains a 'concerts' array, which in turn contains a 'concert' object with artist details. If no concerts are found, the tool returns a string representing an empty JSON array ('[]')."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Artist IDs (you can use commas)",
            "connection_point": "The Spotify URIs of artists from concert events can be extracted and used as artist IDs"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Artist IDs (you can use commas)",
            "connection_point": "The Spotify URIs of artists from concert events can be extracted and used as artist IDs"
          }
        ]
      },
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Artist or song URI",
            "connection_point": "The Spotify URIs of artists from concert events can be used directly"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Artist or song URI",
            "connection_point": "The Spotify URIs of artists from concert events can be used directly"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Search query",
            "connection_point": "Artist names from concert events can be used as search queries"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Search query",
            "connection_point": "Artist names from concert events can be used as search queries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify: Get radio playlist",
    "tool description": "Gets a personalized radio playlist based on a specific artist or song, delivering a curated stream of similar music. This endpoint leverages Spotify's vast database of millions of songs, artists, albums, and audio content to generate recommendations that match the musical style and characteristics of your selected seed. The radio feature analyzes audio attributes and listener patterns across Spotify's extensive catalog to create a continuous listening experience that maintains the vibe of your chosen artist or track while introducing you to related music.",
    "required_parameters": [
      {
        "name": "uri",
        "type": "STRING",
        "description": "Artist or song URI",
        "default": "spotify:artist:2w9zwq3AktTeYYMuhMjju8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify23.p.rapidapi.com/seed_to_playlist/\"\nquerystring = {\"uri\": \"spotify:artist:2w9zwq3AktTeYYMuhMjju8\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify23.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get radio playlist",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output indicates the success or failure of creating a radio playlist. A successful response returns a JSON object containing a count and a list of media items, where each item has a unique Spotify URI for the newly generated playlist. An error response provides a status flag and a descriptive message explaining the failure.",
      "output_format": "The output is a string-encoded JSON object. The structure of the object differs based on the outcome. A successful response is a nested object containing a 'mediaItems' key, which is an array of objects. An error response is a flat object with 'status' and 'message' keys. No pagination or cursoring is indicated."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Get tracks",
        "connect params": [
          {
            "name": "ids",
            "description": "The Spotify URIs from the radio playlist can be used as track IDs"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "The Spotify URIs from the radio playlist can be converted to URLs for searching"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify: Get tracks",
    "tool description": "Retrieves one or more specific tracks from Spotify's extensive music catalog. This endpoint taps into Spotify's Data API, which provides access to millions of songs, podcasts, artists, albums, and playlists, allowing you to fetch detailed information about individual tracks or multiple tracks simultaneously. The data returned includes comprehensive track metadata such as title, artist, album, duration, popularity metrics, and audio features, enabling applications to display rich music information or perform music-related analysis.",
    "required_parameters": [
      {
        "name": "ids",
        "type": "STRING",
        "description": "Track IDs (you can use commas)",
        "default": "4WNcduiCmDNfmTEz7JvmLv"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify23.p.rapidapi.com/tracks/\"\nquerystring = {\"ids\": \"4WNcduiCmDNfmTEz7JvmLv\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify23.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get tracks",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns detailed metadata for one or more Spotify tracks. A successful response contains a list of track objects, each with information like the track's name, artist, album details, duration, popularity, and a URL to the track on Spotify. In case of an error, the output provides a status flag and a descriptive error message.",
      "output_format": "The output is a stringified JSON object. A successful response has a top-level 'tracks' key which contains an array of track objects. Each track object is deeply nested, containing further objects for the album and arrays for the artists. An error response is a simple object with 'status' and 'message' keys."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use track URIs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use track URIs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use Spotify URL from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "If the track has YouTube video ID in the metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify: Get artists",
    "tool description": "Retrieves information about one or more specific artists from Spotify's extensive music database. This endpoint taps into Spotify's comprehensive Data API, which provides access to millions of songs, podcasts, albums, and playlists, allowing you to obtain detailed artist profiles including popularity metrics, genres, images, and related content. Perfect for music discovery, analysis, or integration into applications that require rich artist metadata from one of the world's largest music streaming platforms.",
    "required_parameters": [
      {
        "name": "ids",
        "type": "STRING",
        "description": "Artist IDs (you can use commas)",
        "default": "2w9zwq3AktTeYYMuhMjju8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify23.p.rapidapi.com/artists/\"\nquerystring = {\"ids\": \"2w9zwq3AktTeYYMuhMjju8\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify23.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get artists",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns detailed profiles for one or more artists from the Spotify database. A successful response provides a list of artist objects, each containing the artist's name, popularity score, associated genres, follower count, and links to profile images of various sizes. In the event of an error, such as a configuration issue, the output provides a status and a descriptive error message instead of artist data.",
      "output_format": "The output is a JSON object. A successful response has a top-level 'artists' key, which contains an array of nested artist objects. An error response is a flat object with 'status' (boolean) and 'message' (string) keys. Within the successful artist object, some fields like 'followers.href' can be null."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "The artist ID from Spotify: Get artists can be formatted as a Spotify URI to create a radio playlist based on that artist"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Related Artists",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Artist ID from Spotify: Get artists can be used to find related artists"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Artist ID from Spotify: Get artists can be used to get more detailed information about a specific artist"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Artist IDs from Spotify: Get artists can be passed to get more information about those artists"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Artist ID from Spotify: Get artists can be formatted as a Spotify URI to create a radio playlist based on that artist"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "Artist name from Spotify: Get artists can be used to search for the corresponding artist on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify: Search",
    "tool description": "Searches for songs, podcasts, artists, albums, or playlists across Spotify's vast catalog. This endpoint leverages Spotify's comprehensive music and audio database containing millions of tracks, allowing you to discover content based on your query terms. The API provides access to Spotify's extensive library, returning relevant results that can be used for music discovery, playlist creation, or finding specific audio content within the platform's ecosystem.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "Search query",
        "default": "thriller"
      },
      {
        "name": "type",
        "type": "STRING",
        "description": "`multi` or one of these:\n\n- albums\n- artists\n- episodes\n- genres\n- playlists\n- podcasts\n- tracks\n- users",
        "default": "multi"
      }
    ],
    "optional_parameters": [
      {
        "name": "gl",
        "type": "STRING",
        "description": "",
        "default": ""
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      },
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "",
        "default": "10"
      }
    ],
    "code": "import requests\n\nurl = \"https://spotify23.p.rapidapi.com/search/\"\nquerystring = {\"q\": \"\", \"gl\": \"\", \"offset\": \"0\", \"type\": \"multi\", \"numberOfTopResults\": \"5\", \"limit\": \"10\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify23.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Search",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns search results from the Spotify catalog. A successful response provides a list of tracks matching the query, including detailed information for each track like its name, artist, album, duration, cover art URL, and Spotify URI. The output also indicates the total number of matching tracks. In case of a failure, the tool returns a simple object containing a boolean status and an error message.",
      "output_format": "The output is a JSON object. In a successful case, the object is deeply nested, containing a 'tracks' key which holds a 'totalCount' and an 'items' array. Each object within the 'items' array represents a single track and contains its metadata. Error responses follow a different, flat structure with 'status' and 'message' keys. The presence of 'totalCount' suggests the 'items' list may be a paginated subset of the full results."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Get tracks",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use track IDs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use artist IDs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use Spotify URIs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Related Artists",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Can use artist IDs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Can use artist IDs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use Spotify URIs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use artist IDs from search results"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get albums",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use album IDs from search results"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use Spotify URLs from search results"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Get artist's albums",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Can use artist URLs from search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify Scraper",
    "parent tool description": "An all-in-one scraper for scraping everything on Spotify, and a highly available download solution for tracks, lyrics and episode previews.",
    "tool name": "Spotify Scraper: Get Home Page Overview",
    "tool description": "Fetches trending music information displayed on the Spotify home page as viewed by an incognito visitor. This endpoint leverages a comprehensive Spotify scraping system that can extract various data elements from across the platform, providing access to trending content without requiring user authentication. Part of a broader all-in-one solution that can scrape virtually any Spotify content and offers highly available download capabilities for tracks, lyrics, and podcast episode previews.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "region",
        "type": "STRING",
        "description": "Region code (ISO 3166 alpha-2) for localized results. Defaults to `US`. Unsupported code will **fallback** to `US`.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://spotify-scraper.p.rapidapi.com/v1/home\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"spotify-scraper.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get Home Page Overview",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool scrapes and returns the content of the Spotify home page as seen by a non-authenticated user. The output is structured into sections or genres, such as \"Trending songs\". Within these categories, it provides detailed information on individual items, which can be tracks (including artist and album details) or playlists (including owner and description). This allows for the discovery of currently trending music on the platform.",
      "output_format": "The output is a single, deeply nested JSON object. The root object contains a status field and a main data key, which can vary between \"genres\" (a list) or \"sections\" (an object containing a list of items). The data is not paginated. The structure includes nested objects for artists, albums, and owners, as well as lists for items like images and artists. Some fields, like image dimensions, can be null."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use track names, artist names, or playlist names from the home page overview"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use track names or artist names from the home page overview"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use track names or artist names from the home page overview"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "Can use track names or artist names from the home page overview"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify _v2",
    "parent tool description": "Get Spotify Tracks & Playlist Details",
    "tool name": "Spotify _v2: Related Artists",
    "tool description": "Retrieves a list of artists related to a specified artist, showing similar musical styles or influences. This endpoint leverages Spotify's extensive music database and recommendation algorithms to help users discover new artists based on their existing preferences. The service provides access to Spotify's rich ecosystem of music data, allowing users to explore musical connections and expand their listening horizons beyond tracks and playlists they already know.",
    "required_parameters": [
      {
        "name": "artist_id",
        "type": "STRING",
        "description": "",
        "default": "0EmeFodog0BfCgMzAIvKQp"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify117.p.rapidapi.com/get_related_artists/\"\nquerystring = {\"artist_id\": \"0EmeFodog0BfCgMzAIvKQp\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify117.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Related Artists",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a list of artists who are musically similar to a specified artist. For each related artist, the output includes their name, genres, popularity score, follower count, and links to their Spotify page and associated images. In the event of an API failure, a structured error message is returned instead.",
      "output_format": "The output is a JSON object. A successful response contains a top-level key, 'artists', which holds a JSON array of artist objects. Each artist object contains nested structures, such as an array of 'genres' (strings), an array of 'images' (objects with URL, height, and width), and an 'external_urls' object. Some fields within the artist object can be null. An error response has a different structure, containing keys like 'messages' and 'info'."
    },
    "connected tools": [
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Can use artist IDs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use artist IDs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Can use artist IDs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use artist URIs from related artists output"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "Can use artist URIs from related artists output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "Can search for related artists on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify _v2",
    "parent tool description": "Get Spotify Tracks & Playlist Details",
    "tool name": "Spotify _v2: Artist Details (Single)",
    "tool description": "Retrieves detailed information about a specific artist on Spotify, including their profile, genres, and popularity metrics. This endpoint is part of a comprehensive Spotify data service that provides access to track metadata, playlist contents, and artist information from the Spotify music platform, allowing users to explore music catalogs, analyze artist profiles, and gather insights about music collections without requiring direct Spotify API authentication.",
    "required_parameters": [
      {
        "name": "artist_id",
        "type": "STRING",
        "description": "",
        "default": "52wBYviD0Fnactl1q7ibdT"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify117.p.rapidapi.com/get_single_artist/\"\nquerystring = {\"artist_id\": \"52wBYviD0Fnactl1q7ibdT\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify117.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Artist Details (Single)",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The output provides detailed information about a single Spotify artist. A successful response includes the artist's name, follower count, popularity score, a list of associated genres, and URLs for their Spotify profile and images. In case of an API error, the output will be a JSON object containing an error message and diagnostic information.",
      "output_format": "The output is a single JSON object. The successful response contains nested data structures: 'followers' is an object, while 'genres' and 'images' are arrays. The 'images' array contains objects, each detailing a different image size. Some fields, such as 'followers.href', can be null. An error response has a different, flatter structure."
    },
    "connected tools": [
      {
        "tool name": "Spotify _v2: Related Artists",
        "connect params": [
          {
            "name": "artist_id",
            "description": "The artist ID from the source tool's output can be used to find related artists"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "The artist ID from the source tool can be used as part of a comma-separated list"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "If the artist name is available, it can be used to search for the corresponding YouTube Music artist"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by query",
        "connect params": [
          {
            "name": "q",
            "description": "The artist name from the source tool can be used as the search query"
          },
          {
            "name": "type",
            "description": "Can be set to 'artist' to search specifically for the artist"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify _v2",
    "parent tool description": "Get Spotify Tracks & Playlist Details",
    "tool name": "Spotify _v2: User details",
    "tool description": "Retrieves detailed user information for any Spotify user profile. This endpoint leverages Spotify's API to access user data as part of a comprehensive service that provides access to Spotify's extensive music database, allowing you to gather information about tracks, playlists, and user profiles. The tool connects to Spotify's platform to deliver accurate and up-to-date user details, complementing its ability to fetch music content and playlist information for a complete Spotify data retrieval experience.",
    "required_parameters": [
      {
        "name": "user_id",
        "type": "STRING",
        "description": "",
        "default": "cruilla"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify117.p.rapidapi.com/get_user_details/\"\nquerystring = {\"user_id\": \"cruilla\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify117.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "User details",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool retrieves detailed public profile information for a specified Spotify user. A successful response contains the user's display name, unique ID, a link to their Spotify profile, profile images, and total follower count. The tool can also return an error object, for example, when the Spotify API is unreachable.",
      "output_format": "The output is a single JSON object. In a successful case, the object has a nested structure; the 'images' key contains an array of objects (each with URL, height, and width), and the 'followers' key contains a nested object with the total count. Some fields within nested objects, like 'followers.href', can be null. In case of an error, the output is a simpler JSON object containing 'messages' and 'info' keys describing the issue."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get User",
        "connect params": [
          {
            "name": "user_id",
            "description": "If the Spotify user has a linked YouTube Music account with the same username, the display name could potentially be used"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Search for Users",
        "connect params": [
          {
            "name": "term",
            "description": "The display name from Spotify user details can be used to search for the same user on SoundCloud"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify _v2",
    "parent tool description": "Get Spotify Tracks & Playlist Details",
    "tool name": "Spotify _v2: New releases",
    "tool description": "Retrieves newly released music tracks and albums filtered by a specific country code. This endpoint leverages Spotify's extensive music catalog to deliver the latest releases in your selected region, allowing you to discover fresh music tailored to geographical availability. The service provides access to detailed track and playlist information from Spotify's vast library, enabling you to stay updated with region-specific music releases.",
    "required_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "Enter country code like: US, CA, SE, IN, UK...",
        "default": "us"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify117.p.rapidapi.com/new_releases/\"\nquerystring = {\"country\": \"us\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify117.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "New releases",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of new music releases, such as albums and singles, filtered by a specific country. For each release, it provides detailed information including the album name, artist(s), release date, total tracks, available markets, and external URLs to the content on Spotify. In case of an API error, a message and diagnostic information are returned instead.",
      "output_format": "The successful output is a JSON object with a top-level 'albums' key. This key contains an object that holds an array of 'items', where each item is a detailed object for a music release. The presence of 'offset' and 'limit' parameters in the 'href' field suggests the results are paginated. Error responses are also JSON objects but follow a different structure, containing keys like 'messages' and 'info'."
    },
    "connected tools": [
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "Artist IDs from new releases can be used to get detailed artist information"
          }
        ]
      },
      {
        "tool name": "MusiclinkssApi: Search by url",
        "connect params": [
          {
            "name": "spotify_url",
            "description": "Spotify URLs from new releases can be used to find information across platforms"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify_v3",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify_v3: Top 200 songs by country / global",
    "tool description": "Retrieves chart data and music analytics from Spotify Charts (https://charts.spotify.com/), providing access to trending songs, artists, and playlists across different regions and time periods. This endpoint connects to Spotify's comprehensive data ecosystem, which encompasses millions of songs, podcasts, artists, albums, and playlists, allowing users to analyze music consumption patterns, track popularity trends, and gain insights into listener preferences within Spotify's vast global music streaming platform.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "date",
        "type": "DATE (YYYY-MM-DD)",
        "description": "If weekly you must select a Thursday for it to work.",
        "default": ""
      },
      {
        "name": "country",
        "type": "ENUM",
        "description": "",
        "default": ""
      },
      {
        "name": "period",
        "type": "ENUM",
        "description": "",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://spotify81.p.rapidapi.com/top_200_tracks\"\nquerystring = {\"date\": \"\", \"country\": \"\", \"period\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify81.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Top 200 songs by country / global",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of the top 200 songs from Spotify charts. Each song in the list includes detailed chart performance data (current rank, peak rank, number of streams) and comprehensive track metadata (name, artists, labels, release date, URIs). The output can be used to analyze music popularity and trends in specific regions or globally.",
      "output_format": "The successful output is a JSON array of objects, where each object represents a song on the chart. These objects are deeply nested, with primary keys 'chartEntryData' and 'trackMetadata'. Fields like 'artists', 'producers', 'labels', and 'songWriters' are arrays of objects to accommodate multiple contributors. In case of an error, the output is a single JSON object with 'error' and 'status_code' keys."
    },
    "connected tools": [
      {
        "tool name": "Billboard: Hot 100",
        "connect params": [
          {
            "name": "date",
            "description": "The Spotify top 200 chart data includes dates that could be used to query Billboard charts for the same time period"
          }
        ]
      },
      {
        "tool name": "Billboard: Billboard 200",
        "connect params": [
          {
            "name": "date",
            "description": "The Spotify top 200 chart data includes dates that could be used to query Billboard charts for the same time period"
          }
        ]
      },
      {
        "tool name": "Billboard: Billboard Global 200",
        "connect params": [
          {
            "name": "date",
            "description": "The Spotify top 200 chart data includes dates that could be used to query Billboard charts for the same time period"
          }
        ]
      },
      {
        "tool name": "Billboard: Artist 100",
        "connect params": [
          {
            "name": "date",
            "description": "The Spotify top 200 chart data includes dates that could be used to query Billboard charts for the same time period"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Song names and artist names from Spotify top 200 can be used to search for more details"
          }
        ]
      },
      {
        "tool name": "Spotify: Get tracks",
        "connect params": [
          {
            "name": "ids",
            "description": "Spotify track IDs from the top 200 chart can be used to get detailed track information"
          }
        ]
      },
      {
        "tool name": "Spotify: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Artist IDs from the Spotify top 200 chart can be used to get detailed artist information"
          }
        ]
      },
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "Artist IDs from the Spotify top 200 chart can be used to get detailed artist information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify_v3",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify_v3: Get radio playlist",
    "tool description": "Gets a personalized radio playlist based on a specific artist or song, delivering a curated stream of similar music. This endpoint leverages Spotify's vast database of millions of songs, artists, albums, and audio content to generate recommendations that match the musical style and characteristics of your selected seed. The radio feature analyzes audio attributes and listener patterns across Spotify's extensive catalog to create a continuous listening experience that maintains the vibe of your chosen artist or track.",
    "required_parameters": [
      {
        "name": "uri",
        "type": "STRING",
        "description": "Artist or song URI",
        "default": "spotify:artist:2w9zwq3AktTeYYMuhMjju8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify81.p.rapidapi.com/seed_to_playlist\"\nquerystring = {\"uri\": \"spotify:artist:2w9zwq3AktTeYYMuhMjju8\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify81.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get radio playlist",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool output provides a reference to a single, personalized radio playlist generated by Spotify. The main piece of information is the playlist's unique Spotify URI, which is located within a `mediaItems` array. This URI can be used by other tools or applications to locate and play the specific radio playlist.",
      "output_format": "The output is a JSON object serialized as a string. It contains a top-level integer key `total` (which appears to always be 1) and a key `mediaItems`, which is an array. This array contains a single object, and that object holds the playlist's identifier under the `uri` key."
    },
    "connected tools": [
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "The playlist URI can be used to identify tracks for lyric retrieval"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify_v3",
    "parent tool description": "Spotify Data API for Millions of songs & podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify_v3: Get Albums",
    "tool description": "Retrieves one or more albums from Spotify's extensive music catalog. This endpoint taps into Spotify's Data API, which provides access to millions of songs, podcasts, artists, albums, playlists, and more, allowing you to fetch detailed album information including tracks, release dates, artists, and cover art. Whether you need a single album by ID or want to retrieve multiple albums in one request, this endpoint serves as your gateway to Spotify's comprehensive music database.",
    "required_parameters": [
      {
        "name": "ids",
        "type": "STRING",
        "description": "Album IDs (you can use commas)",
        "default": "3IBcauSj5M2A6lTeffJzdv"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify81.p.rapidapi.com/albums\"\nquerystring = {\"ids\": \"3IBcauSj5M2A6lTeffJzdv\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"spotify81.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "Get Albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output provides detailed information about one or more Spotify albums. The primary data is a list of album objects, each containing metadata such as the album type, total track count, a unique Spotify ID, and a list of markets where it's available. The output also includes URLs to the album on the Spotify platform and various-sized cover art images.",
      "output_format": "The response is a JSON object with a single top-level key, \"albums\". The value of this key is a JSON array, where each element is an object representing a single album. This structure accommodates responses for both single and multiple album lookups. Nested structures include an array of image objects and an object for external URLs."
    },
    "connected tools": [
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "name": "ids",
            "description": "The album output contains artist IDs that can be used to fetch artist details"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "The album output contains artist IDs that can be used to fetch artist details"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify Web",
    "parent tool description": "Spotify Data API for Millions of songs &amp; podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify Web: Get radio playlist",
    "tool description": "Gets personalized radio recommendations based on a specific artist or song, delivering a curated stream of similar music. This endpoint leverages Spotify's vast database of millions of songs, artists, albums, and playlists to generate contextually relevant music suggestions that match the sonic qualities, genre characteristics, and listener preferences associated with your selected seed artist or track, helping users discover new music that aligns with their current listening preferences.",
    "required_parameters": [
      {
        "name": "uri",
        "type": "STRING",
        "description": "Artist or song URI",
        "default": "spotify:artist:2w9zwq3AktTeYYMuhMjju8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify-web2.p.rapidapi.com/seed_to_playlist/\"\nquerystring = {\"uri\": uri}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"spotify-web2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get radio playlist",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool's output is a JSON object that provides the unique URI for a personalized Spotify radio playlist. This playlist is generated based on a seed artist or song. The primary piece of information is this URI, which can be used to access the curated music. The output can also indicate an error with a status and a descriptive message.",
      "output_format": "The output is a single JSON object. A successful response contains a 'total' count and a 'mediaItems' array. This array holds objects, each with a 'uri' string for the playlist. An error response contains a boolean 'status' and a string 'message'. The structure varies between success and failure cases."
    },
    "connected tools": [
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "The playlist URI can be used to access tracks for lyrics retrieval"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify Web",
    "parent tool description": "Spotify Data API for Millions of songs &amp; podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify Web: Get artists",
    "tool description": "Retrieves information about one or more specific artists from Spotify's extensive music database. This endpoint taps into Spotify's comprehensive Data API, which provides access to millions of songs, podcasts, albums, and playlists, allowing you to obtain detailed artist profiles including popularity metrics, genres, and related metadata. The data returned can be used for music discovery, analysis, or integration into applications that leverage Spotify's vast entertainment catalog.",
    "required_parameters": [
      {
        "name": "ids",
        "type": "STRING",
        "description": "Artist IDs (you can use commas)",
        "default": "2w9zwq3AktTeYYMuhMjju8"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify-web2.p.rapidapi.com/artists/\"\nquerystring = {\"ids\": ids}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"spotify-web2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get artists",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides detailed information about one or more artists from the Spotify database. A successful response contains a list of artist objects, each including the artist's name, popularity score, follower count, genres, and links to their Spotify page and images. An unsuccessful response returns an error object with a status and a descriptive message.",
      "output_format": "The output is a single JSON object. The structure of the object depends on the success of the call. A successful response contains a top-level 'artists' key, which is an array of nested artist objects. An error response contains 'status' and 'message' keys. Some fields within the artist object, like 'followers.href', can be null."
    },
    "connected tools": [
      {
        "tool name": "Spotify Web: Get radio playlist",
        "connect params": [
          {
            "name": "uri",
            "description": "The artist ID from the source tool can be used to create a radio playlist based on that artist"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Artist Details (Single)",
        "connect params": [
          {
            "name": "artist_id",
            "description": "The artist ID from the source tool can be used to get more detailed information about a single artist"
          }
        ]
      },
      {
        "tool name": "Spotify _v2: Related Artists",
        "connect params": [
          {
            "name": "artist_id",
            "description": "The artist ID from the source tool can be used to find related artists"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "The artist name from the source tool can be used to search for the artist on YouTube Music"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Spotify Web",
    "parent tool description": "Spotify Data API for Millions of songs &amp; podcasts, artists, albums, playlists and more.",
    "tool name": "Spotify Web: Get albums",
    "tool description": "Retrieves one or more albums from Spotify's extensive music catalog based on your specified album IDs. This endpoint taps into Spotify's comprehensive Data API, which provides access to millions of songs, podcasts, artists, albums, and playlists. The returned data includes detailed album information such as tracks, artists, release dates, and cover art, allowing you to integrate Spotify's vast music library directly into your applications or services.",
    "required_parameters": [
      {
        "name": "ids",
        "type": "STRING",
        "description": "Album IDs (you can use commas)",
        "default": "3IBcauSj5M2A6lTeffJzdv"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://spotify-web2.p.rapidapi.com/albums/\"\nquerystring = {\"ids\": ids}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"spotify-web2.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get albums",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns detailed information for one or more Spotify albums based on their IDs. A successful response provides a list of album objects, each containing metadata like its name, release date, artists, cover art, and a full list of its tracks. The tool can also return an error object if the request fails, for example, due to a configuration issue. The output is intended to provide comprehensive album data for integration into other applications.",
      "output_format": "The output is a string that can be parsed into a JSON object. A successful response is an object with a top-level key 'albums', which is an array of album objects. Each album object is highly nested, containing lists for 'artists' and 'images', and a 'tracks' object which in turn contains a list of track items and pagination keys ('limit', 'next', 'offset'). An error response is a simple object with 'status' and 'message' keys."
    },
    "connected tools": [
      {
        "tool name": "Spotify Web: Get artists",
        "connect params": [
          {
            "param_name": "ids",
            "description": "Artist IDs from the album's artists list can be used to get detailed artist information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Get Watch Playlist",
    "tool description": "Retrieves a watch list of tracks that appears when you press play on a track in YouTube Music, including optional counterpart keys for songs with corresponding video versions (enabling the UI song/video switcher functionality). This endpoint leverages the comprehensive YouTube Music API that provides access to a rich ecosystem of music content including lyrics, trending tracks, albums, artists, songs, user data, and playlists, allowing for detailed music exploration and content discovery within the YouTube Music platform.",
    "required_parameters": [
      {
        "name": "video_id",
        "type": "STRING",
        "description": "",
        "default": "1A7Qw88As64"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/get_watch_playlist\"\nquerystring = {\"video_id\": video_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get Watch Playlist",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a playlist object generated when a user starts playing a track on YouTube Music. The output contains a list of track objects, including details like title, artist, duration, video ID, view count, and associated thumbnail images. This information is intended to populate an 'Up Next' or music queue in an application.",
      "output_format": "The output is a single JSON object. The core data is in the 'tracks' key, which contains a JSON array of track objects. Within each track object, the 'artists' and 'thumbnail' keys also contain arrays of nested objects. Some fields, such as 'lyrics', 'feedbackTokens', and 'likeStatus', can be null."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get Song Related",
        "connect params": [
          {
            "name": "browse_id",
            "description": "Can use browse_id from tracks in the watch playlist"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can use video_id from tracks in the watch playlist"
          }
        ]
      },
      {
        "tool name": "Shazam: songs/get-details",
        "connect params": [
          {
            "name": "key",
            "description": "Can use track identifiers from the playlist"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can search using track titles and artists from the playlist"
          }
        ]
      },
      {
        "tool name": "Miza: Song search",
        "connect params": [
          {
            "name": "search",
            "description": "Can search using track titles and artists from the playlist"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Get Song Related",
    "tool description": "Gets related content for a specific song, displaying equivalent information to what appears in the \"Related\" tab of the YouTube Music watch panel. This endpoint is part of the comprehensive YouTube Music API that provides detailed access to the platform's vast music database, including lyrics, trends, albums, artists, songs, users, playlists, and more, allowing for deep exploration of music content and relationships between songs.",
    "required_parameters": [
      {
        "name": "browse_id",
        "type": "STRING",
        "description": "",
        "default": "MPTRt_ZXONnvFeQpN"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/get_song_related\"\nquerystring = {\"browse_id\": browse_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get Song Related",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of songs that are related to a specified input song. For each related song, it provides comprehensive details including the title, video ID, contributing artists, and the album it belongs to. The output also includes metadata such as whether the track is explicit and a list of URLs for different thumbnail sizes.",
      "output_format": "The output is a JSON array containing a single object. This object has a key named \"contents\", which holds an array of song objects. Each song object includes details like title, videoId, isExplicit, a nested object for 'album', and nested arrays for 'artists' and 'thumbnails'. The provided examples appear to be truncated, so the full list of related songs may be longer."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "The videoId from the related songs can be used to get detailed information about a specific related song"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Watch Playlist",
        "connect params": [
          {
            "name": "video_id",
            "description": "The videoId from the related songs can be used to get a watch playlist for a specific related song"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "The title and artists information from related songs can be used to search for the same content on Spotify"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Get Song",
    "tool description": "Returns metadata and streaming information about a song or video, providing comprehensive details on the content's attributes and playback capabilities. This endpoint leverages the detailed YouTube Music API, which offers extensive access to music-related data including lyrics, trends, albums, artists, songs, users, and playlists across the YouTube Music platform. The returned information helps applications integrate with or analyze content from one of the world's largest music streaming services.",
    "required_parameters": [
      {
        "name": "video_id",
        "type": "STRING",
        "description": "",
        "default": "RS0FhoKAHvA"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/get_song\"\nquerystring = {\"video_id\": video_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get Song",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a single JSON object containing detailed metadata and streaming information for a song or video from YouTube Music. This includes data such as content description, a list of countries where it's available, deep-linking information for mobile applications, and content category. The information is designed to help applications integrate with or analyze content from the YouTube Music platform.",
      "output_format": "The output is a single, deeply nested JSON object. The root key is 'microformat', which contains a 'microformatDataRenderer' object with the song's metadata. Fields can be strings, booleans, or arrays of strings (like 'availableCountries'). The provided examples are truncated, so the full structure is not visible."
    },
    "connected tools": [
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use song title/artist information from YouTube Music API output"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song title/artist information from YouTube Music API output"
          }
        ]
      },
      {
        "tool name": "SoundCloud Scraper: Download Lyrics on Spotify (2 Quotas)",
        "connect params": [
          {
            "name": "track",
            "description": "Can use song information to find equivalent on SoundCloud"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song Related",
        "connect params": [
          {
            "name": "browse_id",
            "description": "Can use browse_id if available in the source output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Get User",
    "tool description": "Retrieves a user's page from YouTube Music, including their owned videos and playlists. This endpoint accesses YouTube Music's comprehensive database of content creators and their media collections, allowing you to explore specific user profiles within the platform's vast ecosystem of lyrics, trends, albums, artists, songs, playlists, and other musical content. The data returned provides insight into a particular user's curated music collections and uploaded content.",
    "required_parameters": [
      {
        "name": "user_id",
        "type": "STRING",
        "description": "channelId of the user",
        "default": "UC44hbeRoCZVVMVg5z0FfIww"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/get_user\"\nquerystring = {\"user_id\": user_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get User",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool retrieves information about a specific YouTube Music user. A successful response is a JSON object containing the user's name and a list of their playlists. Each playlist in the list includes its title, description, ID, and an array of associated thumbnail images with different resolutions. In case of a server-side issue, the tool may return an HTML error page instead of the expected JSON data.",
      "output_format": "The successful output is a single JSON object. This object contains nested structures, notably a 'playlists' object which in turn contains a 'results' key holding an array of playlist objects. The presence of 'browseId' and 'params' fields suggests a potential pagination mechanism, possibly for retrieving more playlists. In case of failure, the output format changes to an HTML string."
    },
    "connected tools": []
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Get Artist",
    "tool description": "Gets information about an artist and their top releases including songs, albums, singles, videos, and related artists, with pointers to access full release lists. This endpoint leverages the comprehensive YouTube Music API, which provides detailed access to a wide range of music content including lyrics, trending music, complete album catalogs, artist information, song details, user data, and playlists across the YouTube Music platform.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "channel_id",
        "type": "STRING",
        "description": "",
        "default": "UCedvOgsKFzcK3hA5taf3KoQ"
      }
    ],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/get_artist\"\nquerystring = {\"channel_id\": channel_id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Get Artist",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides detailed information about a musical artist from YouTube Music. A successful response contains the artist's top releases, categorized into albums, songs, singles, and videos, as well as a list of related artists. Each release includes metadata like titles, thumbnails, and unique IDs which can be used to fetch more data. In case of failure, the tool returns an HTML document detailing a server error.",
      "output_format": "The primary output format is a string-serialized JSON object that is deeply nested. For example, a top-level key like 'albums' contains a 'results' array, where each element is an object representing an album. Some fields within the JSON can be null. The tool can also return an HTML string for a 500 Internal Server Error. The presence of 'browseId' and 'params' fields suggests a mechanism for pagination or linking to full release lists."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can use song/video IDs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Watch Playlist",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can use video IDs from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song Related",
        "connect params": [
          {
            "name": "browse_id",
            "description": "Can use song browse_id from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use artist name or song titles from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Trends",
    "tool description": "Retrieves the latest charts data from YouTube Music, including top songs, top videos, top artists, and top trending videos, with global charts excluding the Trending section and US charts featuring an additional Genres section. This endpoint is part of a comprehensive YouTube Music API that provides extensive access to music content including lyrics, trends, albums, artists, songs, users, playlists, and more, allowing for detailed exploration and analysis of YouTube Music's vast catalog and popularity metrics.",
    "required_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "ISO 3166-1 Alpha-2 country code. Default: ZZ = Global\nhttps://www.iban.com/country-codes",
        "default": "de"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/popular/trends\"\nquerystring = {\"country\": country}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Trends",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "This tool retrieves the latest music chart data from YouTube Music. The outputs provide lists of top artists, including their rank, subscriber count, and trend direction (up, down, or neutral). While the examples focus on artist trends, the tool's description indicates it can also return top songs, top videos, and trending videos, making it useful for analyzing music popularity and current trends on the platform.",
      "output_format": "The successful output is a string-encoded JSON object. The data structure is nested, typically containing a primary key (e.g., 'artists') which holds an object with an 'items' key, whose value is an array of objects. Each of these objects contains detailed information like rank, title, and thumbnails. In case of a server-side failure, the tool returns an HTML error page as a string."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "Can get detailed information about trending artists from YouTube Music"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can search for more details about trending artists or songs"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Mood Categories",
    "tool description": "Returns a list of available mood categories for music classification and discovery. This endpoint is part of the comprehensive YouTube Music API that provides detailed access to music content including lyrics, trending songs, albums, artists, playlists, and user data. The mood categories help users filter and discover music based on emotional tone or atmosphere, enhancing the music exploration experience within YouTube Music's extensive catalog.",
    "required_parameters": [
      {
        "name": "lang",
        "type": "STRING",
        "description": "",
        "default": "de"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/popular/categories\"\nquerystring = {\"lang\": lang}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Mood Categories",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool provides a structured list of music categories available on YouTube Music, organized into two main types: 'Genres' and 'Moods & moments'. Each category includes a human-readable title and a 'params' string, which is likely an identifier for further API queries. The returned categories can be localized into different languages, and are intended to help users discover and filter music based on style or emotional context. The tool may also return a structured error object if the API request times out.",
      "output_format": "The successful output is a JSON object containing two keys: 'Genres' and 'Moods & moments'. The value for each key is a JSON array of objects, where each object has string properties 'params' and 'title'. An unsuccessful call, such as a timeout, returns a JSON object with 'messages' and 'info' keys. The response does not appear to be paginated."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Search",
        "connect params": [
          {
            "name": "query",
            "description": "Can use genre or mood category titles from the source tool as search terms"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use genre or mood category titles from the source tool as search terms"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Youtube Music API (Detailed)",
    "parent tool description": "Detailed Youtube Music API. Lyrics, Trends, Albums, Artists, Songs, Users, Playlists, Songs etc.",
    "tool name": "Youtube Music API (Detailed): Search",
    "tool description": "Searches YouTube Music and returns results filtered by a specified category. This endpoint leverages a detailed YouTube Music API that provides comprehensive access to music content including lyrics, trending songs, albums, artists, individual tracks, user profiles, and playlists, allowing for targeted music discovery and information retrieval across the YouTube Music platform.",
    "required_parameters": [
      {
        "name": "lang",
        "type": "STRING",
        "description": "",
        "default": "en"
      },
      {
        "name": "query",
        "type": "STRING",
        "description": "",
        "default": "Eko Fresh"
      }
    ],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "",
        "default": "40"
      }
    ],
    "code": "import requests\n\nurl = \"https://youtube-music-api-detailed.p.rapidapi.com/popular/search\"\nquerystring = {\"limit\": limit, \"lang\": lang, \"query\": query}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"youtube-music-api-detailed.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Search",
    "domain name": "Music",
    "output_info": {
      "output_info_summary": "The tool returns a list of search results from YouTube Music. The results are heterogeneous, containing different types of content such as artists and songs, identified by a `resultType` field. Each item in the list provides detailed metadata, including names, IDs, duration, thumbnails, and explicit content flags, with one item often flagged as the 'Top result'.",
      "output_format": "The output is a JSON array of objects. Each object represents a search result and contains nested structures, such as an array of `artists` and an array of `thumbnails`. Several fields, including `album`, `year`, and `category`, can be null depending on the result type and data availability."
    },
    "connected tools": [
      {
        "tool name": "Youtube Music API (Detailed): Get Artist",
        "connect params": [
          {
            "name": "channel_id",
            "description": "Can use artist IDs from search results"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can use video/song IDs from search results"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Song Related",
        "connect params": [
          {
            "name": "browse_id",
            "description": "Can use song browse IDs from search results"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get Watch Playlist",
        "connect params": [
          {
            "name": "video_id",
            "description": "Can use video/song IDs from search results"
          }
        ]
      },
      {
        "tool name": "Youtube Music API (Detailed): Get User",
        "connect params": [
          {
            "name": "user_id",
            "description": "Can use user/channel IDs from search results if present"
          }
        ]
      },
      {
        "tool name": "Spotify: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use artist or song names from search results"
          }
        ]
      },
      {
        "tool name": "Shazam: search",
        "connect params": [
          {
            "name": "term",
            "description": "Can use song or artist names from search results"
          }
        ]
      },
      {
        "tool name": "Miza: Song search",
        "connect params": [
          {
            "name": "search",
            "description": "Can use song or artist names from search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Amazon Pricing and Product Info",
    "parent tool description": "Fullest product info\nAll Marketplaces\nCustomer support for API users\nBuy box info\nPrime &amp; FBA detection\nFast, scalable &amp; reliable API",
    "required_parameters": [
      {
        "name": "asin",
        "type": "STRING",
        "description": "",
        "default": "B07GR5MSKD"
      },
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "de"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://amazon-pricing-and-product-info.p.rapidapi.com/\"\nquerystring = {\"asin\": asin, \"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"amazon-pricing-and-product-info.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Amazon Pricing and Product Info: Main Endpoint",
    "tool description": "Serves as the central hub for all API interactions, providing product data, marketplace insights, and operational support. This API leverages a comprehensive database of marketplaces and product details to deliver real-time information, enabling developers to access buy box data, Prime/FBA status, and customer support resources efficiently. Its scalable architecture ensures reliable performance, making it essential for integrating comprehensive product analytics into applications.",
    "API name": "Main Endpoint",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object indicating the success or failure of a product data request. A successful response contains a nested `responseData` object with product details for a given ASIN and marketplace, including pricing, buy box status (FBA, Prime, seller ID), and availability. A failed response omits the `responseData` and instead provides a descriptive error message in the `responseErrors` field.",
      "output_format": "The output is a single JSON object with a consistent top-level structure. It includes a boolean `requestSuccessful`, an object `requestInfo` echoing the query, a nullable string `responseErrors`, and a nullable object `responseData` which contains the nested product data. Many fields within `responseData` are nullable, and it appears to use sentinel values (e.g., -0.01, -0.02) for unavailable prices."
    },
    "connected tools": [
      {
        "tool name": "Aliexpress DataHub: Aliexpress - Item Search 3",
        "connect params": [
          {
            "name": "q",
            "description": "Can use product name from Amazon Pricing tool to search for similar products"
          }
        ]
      },
      {
        "tool name": "BestBuy Product Data: BestBuyProductData",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use product name from Amazon Pricing tool to search for similar products"
          }
        ]
      },
      {
        "tool name": "Zappos Realtime Data: Zappos search product",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use product name from Amazon Pricing tool to search for similar products"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Easy Weather",
    "parent tool description": "Detailed current conditions, hourly forecasts, daily forecasts, and weather alerts by latitude and longitude in JSON format.",
    "required_parameters": [
      {
        "name": "longitude",
        "type": "STRING",
        "description": "",
        "default": "103.86"
      },
      {
        "name": "latitude",
        "type": "STRING",
        "description": "",
        "default": "1.28"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://easy-weather1.p.rapidapi.com/daily/5\"\nquerystring = {\"longitude\": longitude, \"latitude\": latitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"easy-weather1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Easy Weather: Daily forecast (5 days)",
    "tool description": "Generates a 5-day daily weather forecast based on the provided latitude and longitude. This endpoint is part of a comprehensive weather service that delivers detailed current conditions, hourly forecasts, daily forecasts, and alerts in JSON format, leveraging real-time meteorological data to enable precise, location-specific planning and decision-making.",
    "API name": "Daily forecast (5 days)",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool provides a 5-day weather forecast for a given geographical coordinate. The output is a JSON object containing metadata and a `forecastDaily` object, which holds an array of daily forecast data. Each daily forecast includes a summary with min/max temperatures, UV index, and precipitation details. It is further broken down into more granular `daytimeForecast` and `overnightForecast` objects, which provide specifics like cloud cover, humidity, and wind conditions.",
      "output_format": "The output is a single, non-paginated JSON object. The core forecast data is located in the `forecastDaily.days` key, which is an array of objects, one for each of the 5 forecast days. Each daily forecast object contains two further nested objects, `daytimeForecast` and `overnightForecast`, detailing conditions for those periods. All timestamps are in ISO 8601 format."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "lon",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the same latitude from the source tool's coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use the same longitude from the source tool's coordinates"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mapilion - Vector and Raster Map Tiles",
    "parent tool description": "Mapilion provides you with vector and raster map tiles at scale. Based on OpenStreetMap and OpenMapTiles.",
    "required_parameters": [
      {
        "name": "style",
        "type": "string",
        "description": "",
        "default": "osm-bright"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://mapilion-vector-and-raster-map-tiles.p.rapidapi.com/rapid-api/stylejson/{style}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mapilion-vector-and-raster-map-tiles.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Mapilion - Vector and Raster Map Tiles: Get Style Json",
    "tool description": "Returns pre-configured style JSONs for map rendering, including options like 'osm-bright', 'dark-matter', and hillshaded variants. This endpoint is part of Mapilion, a service delivering scalable vector and raster map tiles based on OpenStreetMap and OpenMapTiles data, enabling users to quickly implement standardized styles while allowing customization for advanced scenarios.",
    "API name": "Get Style Json",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a single JSON object that represents a complete map style definition, conforming to the Mapbox Style Specification. This object contains all the necessary information for a map rendering client, including data sources, layer definitions, visual properties like colors and fonts, and metadata. The output is intended to be consumed by a mapping library (like Mapbox GL or MapLibre GL) to render a visually complete and interactive map.",
      "output_format": "The output is a single, deeply nested JSON object. Key top-level properties include 'version', 'name', 'metadata', 'sources', 'sprite', 'glyphs', and 'layers'. The 'layers' property is an array of objects, where each object defines the styling for a specific map feature (e.g., roads, water, buildings). The structure is complex but standardized."
    },
    "connected tools": [
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "maptype",
            "description": "Defines the maps appearence."
          }
        ]
      },
      {
        "tool name": "Mapilion - Vector and Raster Map Tiles: Get Vector Tile",
        "connect params": [
          {
            "name": "x",
            "description": ""
          },
          {
            "name": "y",
            "description": ""
          },
          {
            "name": "z",
            "description": ""
          }
        ]
      },
      {
        "tool name": "MapToolkit: Planet Vector Tiles",
        "connect params": [
          {
            "name": "x",
            "description": ""
          },
          {
            "name": "y",
            "description": ""
          },
          {
            "name": "z",
            "description": ""
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Helioviewer v1",
    "parent tool description": "Helioviewer is an open-source project for the visualization of solar and heliospheric data, funded by ESA and NASA.",
    "tool name": "Helioviewer v1: getNewsFeed",
    "tool description": "Retrieves the XML RSS feed of the official Helioviewer Project Blog, providing access to the latest news, updates, and information from this open-source solar visualization platform. This endpoint connects you to content from the Helioviewer Project, which is funded by ESA and NASA to enable visualization of solar and heliospheric data, allowing researchers and space weather enthusiasts to stay current with developments in solar observation technology and findings.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "callback",
        "type": "STRING",
        "description": "Wrap the response object in a function call of your choosing.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://helioviewer-v1.p.rapidapi.com/api/v1/getNewsFeed/\"\nquerystring = {\"callback\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"helioviewer-v1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "getNewsFeed",
    "domain name": "Education",
    "output_info": {
      "output_info_summary": "The tool returns an Atom XML feed from the Helioviewer Project's official blog. This feed contains the latest news, updates, and announcements, such as information about service status and new features. Each entry in the feed includes the post's title, publication date, author, a summary, and the full content, making it useful for tracking project developments and staying informed about solar observation technology.",
      "output_format": "The output is a single string containing an XML document that follows the Atom feed standard. The root `<feed>` element contains metadata and one or more `<entry>` elements, each representing a blog post. The content of the posts is embedded as HTML within a CDATA section."
    },
    "connected tools": []
  },
  {
    "parent tool name": "Stock Sentiment API",
    "parent tool description": "Real-time social sentiment API to track news activity related to a certain stock",
    "required_parameters": [
      {
        "name": "ticker",
        "type": "STRING",
        "description": "",
        "default": "TSLA"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://stock-sentiment-api.p.rapidapi.com/market_data/\"\nquerystring = {\"ticker\": ticker}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"stock-sentiment-api.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Stock Sentiment API: Market Data",
    "tool description": "Returns a list of daily stock metrics such as opening, closing, highest, and lowest prices. This endpoint is part of the Real-time social sentiment API, which tracks news activity related to a certain stock. It leverages financial data feeds to provide precise metrics, enabling users to analyze market trends and correlate price fluctuations with sentiment-driven news events.",
    "API name": "Market Data",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a list of historical daily stock metrics for a given stock. Each entry in the list corresponds to a specific day and includes the opening, high, low, and closing prices, as well as the adjusted close price and trading volume. This information is primarily used for analyzing historical market performance and identifying trends. In case of an error, the tool returns a JSON object with a descriptive message.",
      "output_format": "The successful output is a JSON object with a single key, \"daily_metrics\", which contains a JSON array of objects. Each object in the array represents the stock's metrics for a single day. The error response is a simple JSON object containing a \"message\" key."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_WEEKLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_MONTHLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: News Sentiment Data",
        "connect params": [
          {
            "name": "ticker",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: Most Negative News",
        "connect params": [
          {
            "name": "ticker",
            "description": "The stock symbol from the daily metrics can be used here"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Coronavirus Smartable",
    "parent tool description": "The coronavirus Stats and News API offers the latest and historic COVID-19 stats and news information per country or state. ",
    "required_parameters": [
      {
        "name": "location",
        "type": "string",
        "description": "ISO 3166-2 location code.  For example, use \"FR\" for coronavirus news in France; use \"US\" for coronavirus news in US;  use \"US-CA\" for coronavirus news in the US California state.  Use \"global\" to retrieve global news. ",
        "default": "US"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://coronavirus-smartable.p.rapidapi.com/news/v1/US/\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"coronavirus-smartable.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "tool name": "Coronavirus Smartable: GetNews",
    "tool description": "Retrieves the latest coronavirus news for global, country, or state-level regions. This is part of the Coronavirus Stats and News API, which provides up-to-date and historical COVID-19 statistics and news information, offering critical insights for tracking the pandemic's impact and developments worldwide.",
    "API name": "GetNews",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool provides a list of recent coronavirus-related news articles. The output is structured around a specific location (country, state, or global), providing geographical context alongside the news. Each news item includes a title, excerpt, URL to the full article, publication date, and details about the source provider.",
      "output_format": "The output is a single JSON object. This object contains a `location` object and a `news` key, which holds a JSON array of news article objects. The `location` object's fields can be null if the query is global. Fields within each news article object, such as `images` or `updatedDateTime`, can also be null."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use coronavirus news topics or keywords from the source output"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can search for movie news related to coronavirus topics from the source output"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can search for coronavirus news using topics or locations from the source output"
          }
        ]
      },
      {
        "tool name": "Coronavirus Smartable: GetStats",
        "connect params": [
          {
            "name": "location",
            "description": "Can use location information from the news output to get corresponding statistics"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Free-to-Play Games Database",
    "parent tool description": "Free-to-play games database powered by FreeToGame.com!",
    "required_parameters": [
      {
        "name": "tag",
        "type": "STRING",
        "description": "",
        "default": "3d.mmorpg.fantasy.pvp"
      }
    ],
    "optional_parameters": [
      {
        "name": "platform",
        "type": "STRING",
        "description": "",
        "default": "pc"
      }
    ],
    "code": "import requests\n\nurl = \"https://free-to-play-games-database.p.rapidapi.com/api/filter\"\nquerystring = {\"platform\": platform, \"tag\": tag}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"free-to-play-games-database.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Free-to-Play Games Database: Filter games by multiple tags",
    "tool description": "Filters games by multiple tags and platform to deliver personalized results, with optional sorting parameters. This leverages the FreeToGame.com database\u2014a comprehensive collection of free-to-play games\u2014enabling users to efficiently narrow down options based on preferences, ensuring tailored recommendations from a curated catalog of titles.",
    "API name": "Filter games by multiple tags",
    "domain name": "Gaming",
    "output_info": {
      "output_info_summary": "The tool's output is a list of free-to-play games that match the user's specified filters. Each game in the list is detailed with information such as its ID, title, genre, platform, publisher, developer, release date, and a short description. The output also includes URLs to a thumbnail image, the game's official website, and its profile on freetogame.com, allowing for easy access and further research.",
      "output_format": "The primary output is a JSON array of objects, where each object represents a single game. In cases where no results are found or an error occurs, the API may return a single JSON object containing 'status' and 'status_message' keys to indicate the outcome. Some string values in the provided examples appear to be truncated, which is likely an artifact of the example itself."
    },
    "connected tools": [
      {
        "tool name": "CheapShark - Game Deals: List of Games",
        "connect params": [
          {
            "name": "title",
            "description": "Can use game titles from the free-to-play games list to search for deals on these games"
          }
        ]
      },
      {
        "tool name": "OpenCritic API: Game Search",
        "connect params": [
          {
            "name": "criteria",
            "description": "Can use game titles from the free-to-play games list to search for reviews and ratings"
          }
        ]
      },
      {
        "tool name": "OpenCritic API: General Search",
        "connect params": [
          {
            "name": "criteria",
            "description": "Can use game titles, publishers, or developers from the free-to-play games list for broader searches"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "MapToolkit",
    "parent tool description": "A toolkit for maps: Map tiles, address search (geocoding), routing, static maps & elevation",
    "required_parameters": [
      {
        "name": "points",
        "type": "STRING",
        "description": "JSON Array of [latitdue, longitude] Objects.",
        "default": "[[50,10],[46,16]]"
      }
    ],
    "optional_parameters": [
      {
        "name": "simplify",
        "type": "STRING",
        "description": "Simplifies the points before searching for elevation.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://maptoolkit.p.rapidapi.com/elevation\"\nquerystring = {\"points\": points}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"maptoolkit.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "MapToolkit: Elevation",
    "tool description": "Provides elevation data for a given location, leveraging a global database of terrain features. This endpoint is part of a comprehensive mapping toolkit that includes map tiles, geocoding, routing, and static maps, using GIS technology to deliver precise altitude measurements for applications like terrain analysis, construction planning, and outdoor navigation.",
    "API name": "Elevation",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of elevation values for one or more geographical locations. Each number in the output array represents the altitude at a specific point, presumably in a standard unit like meters or feet. This data is intended for applications like terrain analysis, outdoor navigation, and construction planning.",
      "output_format": "The output is a JSON array of numbers. The examples show integers, but floating-point values for higher precision are possible. The structure is a simple, flat array with no nesting or pagination. The number of elements in the array likely corresponds to the number of locations provided in the input."
    },
    "connected tools": [
      {
        "tool name": "Heightmap from Latitude and Longitude: get heightmap from two geopoints",
        "connect params": [
          {
            "name": "lat0",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          },
          {
            "name": "lat1",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          },
          {
            "name": "lng0",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          },
          {
            "name": "lng1",
            "description": "Elevation data can be used to validate or enhance the heightmap generation"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Staticmaps",
        "connect params": [
          {
            "name": "center",
            "description": "Elevation data can be used to determine appropriate map centers based on terrain features"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Raster",
        "connect params": [
          {
            "name": "x",
            "description": "Elevation data can be used to validate or enhance terrain visualization"
          },
          {
            "name": "y",
            "description": "Elevation data can be used to validate or enhance terrain visualization"
          },
          {
            "name": "z",
            "description": "Elevation data can be used to determine appropriate zoom levels based on terrain features"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Global Terrain Winter",
        "connect params": [
          {
            "name": "x",
            "description": "Elevation data can be used to validate or enhance winter terrain visualization"
          },
          {
            "name": "y",
            "description": "Elevation data can be used to validate or enhance winter terrain visualization"
          },
          {
            "name": "z",
            "description": "Elevation data can be used to determine appropriate zoom levels based on terrain features"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Hillshading",
        "connect params": [
          {
            "name": "x",
            "description": "Elevation data can be used to validate or enhance hillshading visualization"
          },
          {
            "name": "y",
            "description": "Elevation data can be used to validate or enhance hillshading visualization"
          },
          {
            "name": "z",
            "description": "Elevation data can be used to determine appropriate zoom levels for hillshading"
          }
        ]
      },
      {
        "tool name": "MapToolkit: Route Enhancement",
        "connect params": [
          {
            "name": "elevation",
            "description": "Elevation data can be used to enhance route planning with terrain information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flight Data_v2",
    "parent tool description": "Travelpayouts Data API \u2013 the way to get travel insights for your site or blog. Get flight price trends and find popular destinations for your customers.",
    "tool name": "Flight Data_v2: Airplane data in json format",
    "tool description": "Returns a file containing a comprehensive list of airplanes from the database, providing detailed aircraft information for travel analysis. This endpoint is part of the Travelpayouts Data API, which delivers valuable travel insights for websites and blogs, allowing you to access flight price trends and identify popular destinations that appeal to your customers. The airplane data can be leveraged to enhance travel planning features and provide more detailed flight options to your audience.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://travelpayouts-travelpayouts-flight-data-v1.p.rapidapi.com/data/planes.json\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"travelpayouts-travelpayouts-flight-data-v1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Airplane data in json format",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a comprehensive list of airplane models. Each entry in the list is an object that contains the airplane's unique code and its corresponding full name. This information is intended to be used for travel analysis and to enhance travel planning applications by providing detailed aircraft information.",
      "output_format": "The output is a JSON array of objects. Each object represents a single airplane and contains two string keys: 'code' and 'name'. The provided examples are truncated, suggesting the list can be quite long. There is no indication of pagination."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: aircraftSearch",
        "connect params": [
          {
            "name": "model",
            "description": "Model ICAO code"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: aircraftInfo",
        "connect params": [
          {
            "name": "reg",
            "description": "The registration of the aircraft, as returned by /airline/aircraft or /aircraft/search"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Realtime Stock Data",
    "parent tool description": "The worlds cheapest Realtime stock data provider",
    "required_parameters": [
      {
        "name": "symbl",
        "type": "string",
        "description": "",
        "default": "aapl"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://realtime-stock-data.p.rapidapi.com/earnings-trend/{symbl}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"realtime-stock-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Realtime Stock Data: earnings-trend",
    "tool description": "Generates AI-supported predictions about future stock behavior and provides insights into insurance company profits over given periods. This leverages the world's cheapest real-time stock data provider's infrastructure, combining real-time financial data with machine learning models and expert analysis to deliver actionable insights for investors and track insurance performance, enabling informed decision-making and financial monitoring.",
    "API name": "earnings-trend",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides AI-supported financial forecasts for a company over several future periods. Each period includes an end date and predictions for both earnings and revenue, detailing average, low, and high estimates, along with their respective growth rates. This information is intended to give investors actionable insights for making informed decisions.",
      "output_format": "The output is a JSON object containing a 'data' key. The value of 'data' is an object where keys are stringified indices (\"0\", \"1\", \"2\", etc.) that represent a list of forecast periods. Within each period, revenue figures are formatted as strings that include magnitude suffixes (e.g., 'B' for billions), while earnings figures are floats. Growth rates are represented inconsistently, sometimes as a percentage string (e.g., \"10.76%\") and other times as a float (e.g., 0.1079)."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The earnings-trend data contains company financial forecasts that can be used to look up current price quotes for the same company"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Search Endpoint",
        "connect params": [
          {
            "name": "keywords",
            "description": "The company name from earnings-trend data can be used to search for related symbols"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/earnings",
        "connect params": [
          {
            "name": "symbol",
            "description": "The company symbol from earnings-trend data can be used to retrieve historical earnings data to compare with forecasts"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The company symbol from earnings-trend data can be used to retrieve financial data for comparison with earnings forecasts"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The company symbol from earnings-trend data can be used to retrieve historical earnings data for comparison with forecasts"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/earnings-history/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The company symbol from earnings-trend data can be used to retrieve earnings history for comparison with forecasts"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/index-trend/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The company symbol from earnings-trend data can be used to retrieve index trend data to correlate with earnings forecasts"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "AI Trip Planner",
    "parent tool description": "The API generates personalized trip plans based on the user's specified number of days and location. Using AI, the system recommends popular tourist attractions, local experiences, and accommodations based on user preferences and past travel behavior. The generated trip plans can be customized and adjusted to suit the user's needs, making it a valuable tool for anyone planning a trip.",
    "required_parameters": [
      {
        "name": "days",
        "type": "NUMBER",
        "description": "",
        "default": "3"
      },
      {
        "name": "destination",
        "type": "STRING",
        "description": "",
        "default": "London,UK"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://ai-trip-planner.p.rapidapi.com/\"\nquerystring = {\"days\": days, \"destination\": destination}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"ai-trip-planner.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "AI Trip Planner: Get Trip Plan",
    "tool description": "Generates a trip plan based on the user's specified number of days and destination. This is part of an API that uses AI to recommend popular tourist attractions, local experiences, and accommodations tailored to user preferences and past travel behavior, enabling personalized and customizable trip planning for efficient travel itineraries.",
    "API name": "Get Trip Plan",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool's output is a complete travel itinerary for a specified destination and duration. The itinerary is broken down by day, with each day containing a chronological list of activities. Each activity includes a suggested time and a brief description, covering attractions, dining, and local experiences.",
      "output_format": "The output is a string-serialized JSON object. The root object contains an '_id' (unique identifier), a 'key' (representing the query parameters), and a 'plan' array. Each object in the 'plan' array represents a day and contains a 'day' number and a nested 'activities' array. Each object in the 'activities' array represents a single activity and contains a 'time' and 'description'."
    },
    "connected tools": [
      {
        "tool name": "Priceline com Provider: Auto Suggest",
        "connect params": [
          {
            "name": "string",
            "description": "The destination from the trip plan can be used to search for travel options"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations",
        "connect params": [
          {
            "name": "name",
            "description": "The destination from the trip plan can be used to search for hotels"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "The destination from the trip plan can be used to search for Airbnb listings"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count listings by market",
        "connect params": [
          {
            "name": "market",
            "description": "The destination from the trip plan can be used to search for Airbnb listings"
          }
        ]
      },
      {
        "tool name": "Deutsche Bahn: Autocomplete",
        "connect params": [
          {
            "name": "query",
            "description": "The destination or activity locations from the trip plan can be used to search for train stations"
          }
        ]
      },
      {
        "tool name": "Gas Price: stateUsaPrice",
        "connect params": [
          {
            "name": "state",
            "description": "If the trip plan includes a US state, this can be used to check gas prices"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flightera Flight Data",
    "parent tool description": "Flight status, on-time performance and statistics by Flightera",
    "required_parameters": [
      {
        "name": "reg",
        "type": "STRING",
        "description": "The registration of the aircraft, as returned by /airline/aircraft or /aircraft/search",
        "default": "N37267"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://flightera-flight-data.p.rapidapi.com/aircraft/info\"\nquerystring = {\"reg\": reg}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"flightera-flight-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Flightera Flight Data: aircraftInfo",
    "tool description": "Returns detailed aircraft information for an aircraft identified by registration, limited to currently active aircraft. This endpoint is part of Flightera's comprehensive service for flight status, on-time performance, and statistics, leveraging real-time aviation data and a curated database of active aircraft to provide accurate, actionable insights for flight tracking and analysis.",
    "API name": "aircraftInfo",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a detailed profile for a single, currently active aircraft based on its registration number. The output includes technical specifications like the model, manufacturer, and engine type, as well as operational data like the operating airline, seating configuration, and details of its last known flight. If the aircraft cannot be found, an error message is returned.",
      "output_format": "The output is a single JSON object. A successful response contains a flat structure of key-value pairs, with one nested object for 'seat_config' which details the seat count per travel class. An unsuccessful query returns a JSON object with a single 'Error' key. There is no pagination, as the tool returns information for a single entity."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: flightSearch",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: flightStatistics",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: flightInfo",
        "connect params": [
          {
            "name": "flnr",
            "description": "The flight number to request"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airlineInfo",
        "connect params": [
          {
            "name": "iata",
            "description": "The IATA code of the airline, must have a length of 3"
          },
          {
            "name": "icao",
            "description": "The ICAO code of the airline, must have a length of 4"
          },
          {
            "name": "name",
            "description": "The name of the airline. Not case sensitive"
          },
          {
            "name": "ident",
            "description": "The ident of the airline, as returned by /airline/search"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airlineStatistics",
        "connect params": [
          {
            "name": "iata",
            "description": "The IATA code of the airline, must have a length of 3"
          },
          {
            "name": "icao",
            "description": "The ICAO code of the airline, must have a length of 4"
          },
          {
            "name": "ident",
            "description": "The ident of the airline, as returned by /airline/search"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "Limits the number of results from the response.",
        "default": 500
      },
      {
        "name": "resume_key",
        "type": "STRING",
        "description": "Resume results from given ID.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v2/cars/downloadCities\"\nquerystring = {\"limit\": 500, \"resume_key\": \"\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Download cities",
    "tool description": "Downloads a list of cities. This endpoint is part of the Priceline.com API, which enables users to search for hotels, cars, and flights, providing essential city data to support travel planning and booking processes.",
    "API name": "Download cities",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool output provides a paginated list of cities with their geographic and identifying details. For each city, it returns a unique Priceline ID (cityid_ppn), name, state code, country code, latitude, and longitude. This information is designed to support travel planning and booking by providing essential city data for other API functions.",
      "output_format": "The output is a deeply nested JSON object. The primary data is a list of cities, structured as a JSON object with sequential keys (e.g., 'city_0', 'city_1') rather than a JSON array. The response includes a 'resume_key' field, which indicates that the results are paginated and this key can be used to fetch the next set of cities."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use city name and country code from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Count  listings by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "lng",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations by geolocation",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's output"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "TrueWay Geocoding",
    "parent tool description": "Forward and Reverse Geocoding",
    "tool name": "TrueWay Geocoding: Geocode",
    "tool description": "Obtains precise geocoordinates (latitude and longitude) for a given address. This forward geocoding functionality is part of a comprehensive geocoding service that converts between physical addresses and geographic coordinates in both directions. The tool transforms human-readable location information into machine-readable geographic coordinates that can be used for mapping, distance calculations, location-based services, and spatial analysis.",
    "required_parameters": [
      {
        "name": "address",
        "type": "STRING",
        "description": "The address that you want to geocode",
        "default": "505 Howard St, San Francisco"
      }
    ],
    "optional_parameters": [
      {
        "name": "language",
        "type": "STRING",
        "description": "The language in which to return results",
        "default": "en"
      },
      {
        "name": "country",
        "type": "STRING",
        "description": "The country code",
        "default": ""
      },
      {
        "name": "bounds",
        "type": "STRING",
        "description": "The bounding box",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://trueway-geocoding.p.rapidapi.com/Geocode\"\nquerystring = {\"address\": address, \"language\": language}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"trueway-geocoding.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides a list of geocoding results for a given address query. Each result contains a full, formatted address, its individual components (such as street, city, postal code, and country), and the precise latitude and longitude coordinates. Additionally, it includes metadata about the location type (e.g., 'street_address', 'poi') and the accuracy of the coordinates, which is useful for mapping, location-based services, and spatial analysis.",
      "output_format": "The output is a JSON object containing a single key, 'results', which holds an array of result objects. This structure implies that a query can return multiple potential matches. Each result object is a flat structure, with the exception of the 'location' key, which is a nested object containing 'lat' and 'lng' values. Some fields, such as 'house' and 'area', appear to be optional and may be omitted if not applicable."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "The longitude,latitude coordinates from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "latitude",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lon",
            "description": "The longitude coordinate from the geocoding result"
          },
          {
            "name": "lat",
            "description": "The latitude coordinate from the geocoding result"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "meteostat",
    "parent tool description": "Historical Weather & Climate Data API",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "wmo",
        "type": "STRING",
        "description": "The WMO identifier of a weather station.",
        "default": ""
      },
      {
        "name": "icao",
        "type": "STRING",
        "description": "The ICAO identifier of a weather station.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://meteostat.p.rapidapi.com/stations/meta\"\nquerystring = {\"id\": id}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"meteostat.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "meteostat: Station Meta Data",
    "tool description": "Retrieves metadata for a specific weather station, including details like location, equipment, and data availability. This is part of the Historical Weather & Climate Data API, which provides access to extensive historical weather data. The metadata helps users validate data sources and ensure accuracy by leveraging a comprehensive database of weather stations, enhancing the reliability of climate analyses and weather studies.",
    "API name": "Station Meta Data",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The output provides detailed metadata for a single weather station. This includes the station's name, various identifiers (like WMO and ICAO), precise geographic location (latitude, longitude, elevation), and timezone. A key part of the output is the data inventory, which specifies the date ranges for which different types of historical data (e.g., hourly, daily, monthly) are available, helping users verify data sources.",
      "output_format": "The output is a JSON object serialized as a string. The top-level object has two keys: 'meta' (for response metadata) and 'data' (for the station's information). The 'data' field contains a single, nested JSON object, not an array, as it describes one station. Some fields within the nested structure can be null. An empty string may be returned if no data is found."
    },
    "connected tools": [
      {
        "tool name": "meteostat: Hourly Station Data",
        "connect params": [
          {
            "name": "station",
            "description": "Can use the station identifier from the source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Daily Station Data",
        "connect params": [
          {
            "name": "station",
            "description": "Can use the station identifier from the source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Monthly Station Data",
        "connect params": [
          {
            "name": "station",
            "description": "Can use the station identifier from the source tool's output"
          }
        ]
      },
      {
        "tool name": "meteostat: Station Climate Data",
        "connect params": [
          {
            "name": "station",
            "description": "Can use the station identifier from the source tool's output"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from the station metadata"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the station metadata"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the station metadata"
          },
          {
            "name": "timezone",
            "description": "Can use the timezone from the station metadata"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Moka News",
    "parent tool description": "A scrapper / scraper API to get latest news every minute from more than 30 sources all over the world as a start ( sources will be increased with time to be hundreds of different sources of live news )  ",
    "tool name": "Moka News: By Source (New)",
    "tool description": "Retrieves the 50 most recent news items from a specific news source that you select from the available Sources list. This endpoint leverages a comprehensive news scraping API that continuously collects and updates news content every minute from over 30 global news outlets (with plans to expand to hundreds of sources). The system ensures you have access to fresh, timely information from diverse media organizations around the world without having to visit multiple websites.",
    "required_parameters": [
      {
        "name": "source",
        "type": "STRING",
        "description": "",
        "default": "cnn"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://moka-news.p.rapidapi.com/source.php\"\nquerystring = {\"source\": \"cnn\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"moka-news.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "API name": "By Source (New)",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of up to 50 of the most recent news articles from a specified news source. For each article, the output includes the title, a link to the full article, a URL for an associated image, the publication date, the source's name, and the news category. This allows for a comprehensive overview of the latest news from a particular outlet.",
      "output_format": "The successful output is a JSON array of objects, where each object represents a single news article. In cases where there are no results or an error occurs, the tool returns a string which contains a dictionary-like structure with a single 'Error' key and a message string as its value."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use article titles or keywords from the source tool's news articles"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use movie-related keywords or titles from the source tool's news articles"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use keywords, names, or topics from the source tool's news articles"
          }
        ]
      },
      {
        "tool name": "Instant Cameroon News: Retrieve data",
        "connect params": [
          {
            "name": "search",
            "description": "Can use keywords or topics from the source tool's news articles"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Cloud Cast",
    "parent tool description": "Cloudcast is a simple and efficient API built with Node.js and Express, designed to provide real-time weather information for any city in the world. It is able to fetch and deliver current weather conditions including temperature, humidity, wind speed, and other vital meteorological data.",
    "required_parameters": [
      {
        "name": "city",
        "type": "string",
        "description": "",
        "default": "New York"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://cloud-cast.p.rapidapi.com/humidity/{city}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"cloud-cast.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Cloud Cast: Get humidty",
    "tool description": "Retrieves the current humidity level for a specified city. This endpoint is part of Cloudcast, a Node.js and Express-powered API that provides real-time weather data globally, including temperature, wind speed, and humidity. It leverages a network of meteorological data sources to deliver precise humidity readings, enabling applications to offer localized weather insights efficiently.",
    "API name": "Get humidty",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool's output is a single numerical value representing the current humidity level for a specified city. This value is expressed as a percentage (e.g., an output of '63' means 63% humidity). The information is used to provide real-time, localized weather insights for applications.",
      "output_format": "The output is a single, non-nested string containing a number (e.g., '63'). It is not a JSON object or array."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "place_id",
            "description": "The humidity value could be used to supplement or compare with weather data for a specific location"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "The humidity value could be used to supplement or compare with current weather conditions"
          },
          {
            "name": "longitude",
            "description": "The humidity value could be used to supplement or compare with current weather conditions"
          }
        ]
      },
      {
        "tool name": "Foreca Weather: Current",
        "connect params": [
          {
            "name": "location",
            "description": "The humidity value could be used to supplement or compare with current weather data"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "description": "The humidity value could be used to supplement or compare with weather data for a specific city"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Wayfair",
    "parent tool description": "This API helps to query for all information about categories, products, etc\u2026 as on wayfair.com",
    "required_parameters": [
      {
        "name": "query",
        "type": "STRING",
        "description": "Any term or phrase that you are familiar with",
        "default": "red pillow"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://wayfair.p.rapidapi.com/auto-complete\"\nquerystring = {\"query\": query}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"wayfair.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Wayfair: auto-complete",
    "tool description": "Provides auto-suggestions for terms or phrases during searches. This endpoint leverages AI-powered search technology trained on Wayfair's product database to deliver relevant category and product recommendations in real-time, enhancing user navigation and discovery across the platform's extensive inventory.",
    "API name": "auto-complete",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "The tool returns a list of suggested search terms based on a user's input. The main output is a list of suggestion objects, each containing a string value that represents a potential search query. This information is intended to help users complete their searches on the Wayfair platform, guiding them toward relevant products or categories more efficiently.",
      "output_format": "The tool returns a single JSON object as its root. This object contains two keys: \"summary\", which holds a metadata object about the API transaction, and \"response\", which contains a JSON array of suggestion objects. Each object in the array represents one auto-complete suggestion and contains the suggestion text under the \"value\" key."
    },
    "connected tools": [
      {
        "tool name": "Zappos Realtime Data: Zappos search product",
        "connect params": [
          {
            "name": "keyword",
            "description": ""
          }
        ]
      },
      {
        "tool name": "BestBuy Product Data: BestBuyProductData",
        "connect params": [
          {
            "name": "keyword",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Aliexpress DataHub: Aliexpress - Item Search 3",
        "connect params": [
          {
            "name": "q",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Lazada DataHub: Lazada - Item Search",
        "connect params": [
          {
            "name": "q",
            "description": ""
          }
        ]
      },
      {
        "tool name": "Asos: v2/auto-complete",
        "connect params": [
          {
            "name": "q",
            "description": "Name of products"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Easy Weather",
    "parent tool description": "Detailed current conditions, hourly forecasts, daily forecasts, and weather alerts by latitude and longitude in JSON format.",
    "required_parameters": [
      {
        "name": "latitude",
        "type": "STRING",
        "description": "",
        "default": "-22.95"
      },
      {
        "name": "longitude",
        "type": "STRING",
        "description": "",
        "default": "-43.21"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://easy-weather1.p.rapidapi.com/hourly/48\"\nquerystring = {\"latitude\": latitude, \"longitude\": longitude}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"easy-weather1.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Easy Weather: Hourly forecast (48 hours)",
    "tool description": "Gets a 48-hour weather forecast for a given latitude and longitude. This is part of a service that provides detailed current conditions, hourly and daily forecasts, and weather alerts in JSON format, leveraging real-time data and historical patterns to offer comprehensive weather insights for planning purposes.",
    "API name": "Hourly forecast (48 hours)",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns a detailed 48-hour weather forecast for a specified latitude and longitude. The output contains an array of hourly data points, with each point including metrics like temperature, apparent temperature, precipitation chance and type, wind speed and direction, humidity, pressure, and cloud cover. This granular information is intended for detailed short-term planning and also includes metadata on when the forecast was generated.",
      "output_format": "The output is a single JSON object. The primary weather data is located within a nested structure at `forecastHourly.hours`, which is an array of JSON objects, one for each hour of the forecast. Each hourly object contains a comprehensive set of weather metrics. There is no evidence of pagination or cursoring in the examples."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Current air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Forecast air pollution data",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Call 5 day / 3 hour forecast data - By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Cities in circle",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      },
      {
        "tool name": "Air Quality: Current Air Quality",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location data"
          },
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Kubric: The Comprehensive Movie News API",
    "parent tool description": "Stay up-to-date with Kubric, your ultimate movie news API. Access top sources, search by title or keyword, and experience visually engaging cinema updates and insights.",
    "required_parameters": [
      {
        "name": "q",
        "type": "STRING",
        "description": "",
        "default": "superman"
      }
    ],
    "optional_parameters": [
      {
        "name": "limit",
        "type": "NUMBER",
        "description": "",
        "default": "10"
      },
      {
        "name": "offset",
        "type": "NUMBER",
        "description": "",
        "default": "0"
      }
    ],
    "code": "import requests\n\nurl = \"https://kubric-the-comprehensive-movie-news-api.p.rapidapi.com/news/basic/search\"\nquerystring = {\"q\": \"superman\", \"limit\": \"10\", \"offset\": \"0\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"kubric-the-comprehensive-movie-news-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
    "tool description": "The /news/basic/search endpoint searches for movie news articles by title or keyword. This is part of Kubric, your ultimate movie news API, which aggregates data from top sources to deliver visually engaging cinema updates and insights, ensuring you stay informed with personalized and timely information.",
    "API name": "Basic Search",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of movie news articles based on a search query. Each article in the results includes its title, a snippet, the source publication, author, publication date, and a URL to the full article. The output also contains metadata like a unique ID, an image URL, and the sentiment of the article.",
      "output_format": "The output is a JSON object with a main `body` field. This `body` contains a `results` array, where each element is an object representing a single news article. A `totalArticles` field in the `body` suggests that the results are paginated, as it indicates a number higher than the count of items in the `results` array."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "param_name": "q",
            "description": "Can use movie titles, company names, or industry keywords from the source tool's results"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "param_name": "keyword",
            "description": "Can use movie titles or keywords from the source tool's results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "AI News - Global",
    "parent tool description": "Global News produced by AI",
    "tool name": "AI News - Global: Available Regions",
    "tool description": "Retrieves a complete list of all available geographic regions for news coverage. This endpoint is part of an AI-powered global news service that generates and delivers news content across different parts of the world, allowing users to access current events and stories specific to their regions of interest without having to manually search through multiple sources.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://ai-news-global.p.rapidapi.com/get_regions\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"ai-news-global.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Available Regions",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The output provides a comprehensive list of all geographic regions supported by the AI news service. It is a key-value mapping where each key is a two-letter country or region code and the corresponding value is its full name. This information is intended to be used to identify valid region codes for other news-fetching tools.",
      "output_format": "The output is a single, flat JSON object. It is not an array and does not contain any nested structures. Based on the description of a \"complete list\", the output is not paginated."
    },
    "connected tools": [
      {
        "tool name": "AI News - Global: Get News",
        "connect params": [
          {
            "name": "region",
            "description": "One of the region's key code in the list of **Get Regions** method.",
            "reason": "The source tool provides a mapping of two-letter country/region codes to their full names, which directly corresponds to the region parameter required by this tool."
          }
        ]
      },
      {
        "tool name": "News Network: Get News",
        "connect params": [
          {
            "name": "region",
            "description": "Region code for news coverage",
            "reason": "The source tool provides region codes that can be used with this parameter, as both use two-letter country codes for region specification."
          }
        ]
      },
      {
        "tool name": "Coronavirus Smartable: GetNews",
        "connect params": [
          {
            "name": "location",
            "description": "ISO 3166-2 location code",
            "reason": "The source tool provides two-letter country codes that match the ISO 3166-2 format required by this parameter."
          }
        ]
      },
      {
        "tool name": "Coronavirus Smartable: GetStats",
        "connect params": [
          {
            "name": "location",
            "description": "ISO 3166-2 location code",
            "reason": "The source tool provides two-letter country codes that match the ISO 3166-2 format required by this parameter."
          }
        ]
      },
      {
        "tool name": "News API_v2: Top Headlines",
        "connect params": [
          {
            "name": "country",
            "description": "Country code for news filtering",
            "reason": "The source tool provides two-letter country codes that can be used to filter news headlines by country."
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocode - Forward and Reverse",
    "parent tool description": "Forward and reverse geocoding using Google Geocoding API.",
    "tool name": "Geocode - Forward and Reverse: Reverse geocode",
    "tool description": "Retrieves a complete address from a latitude and longitude coordinate pair. This reverse geocoding functionality leverages the Google Geocoding API to convert geographic coordinates into a human-readable address, allowing for precise location identification from raw coordinate data. The service provides comprehensive address components including street names, cities, postal codes, and countries based on Google's extensive global mapping database.",
    "required_parameters": [
      {
        "name": "lng",
        "type": "NUMBER",
        "description": "",
        "default": "-123.0470199"
      },
      {
        "name": "lat",
        "type": "NUMBER",
        "description": "",
        "default": "49.2813458"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://geocode-forward-and-reverse.p.rapidapi.com/reverse\"\nquerystring = {\"lng\": lng, \"lat\": lat}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocode-forward-and-reverse.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Reverse geocode",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool's output provides the primary, human-readable street address corresponding to a given latitude and longitude. It also returns the original coordinate pair within a nested 'location' object for verification and a unique 'place_id' from Google's database. This identifier can be used for subsequent API calls or to disambiguate locations.",
      "output_format": "The output is a single JSON object. It contains a nested object under the 'location' key, which itself contains 'lat' and 'lng' number values. Based on the examples, no fields appear to be nullable."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Can use the longitude,latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "lat",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Can use the longitude from the source tool's location object"
          },
          {
            "name": "latitude",
            "description": "Can use the latitude from the source tool's location object"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flight Data_v2",
    "parent tool description": "Travelpayouts Data API \u2013 the way to get travel insights for your site or blog. Get flight price trends and find popular destinations for your customers.",
    "tool name": "Flight Data_v2: City data in json format",
    "tool description": "Returns a file containing a list of cities from the database, providing essential geographic reference points for travel planning. This endpoint is part of the Travelpayouts Data API, which delivers comprehensive travel insights for websites and blogs, allowing you to access flight price trends and identify popular destinations that appeal to your customers. The city data serves as a foundation for building travel-focused features that help users discover and plan their journeys effectively.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://travelpayouts-travelpayouts-flight-data-v1.p.rapidapi.com/data/en-GB/cities.json\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"travelpayouts-travelpayouts-flight-data-v1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "City data in json format",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a list of cities, providing foundational data for travel planning. Each city entry includes an identifier code, country code, geographic coordinates (latitude and longitude), time zone, and name translations. This information can be used to build travel-focused features that help users discover and locate destinations.",
      "output_format": "The output is a JSON array of objects, where each object represents a city. The examples provided appear to be truncated, suggesting the full list may be very large. Some fields within a city object are nullable, such as `name` and `cases`. The `coordinates` and `name_translations` fields are nested JSON objects."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "param_name": "destination",
            "description": "Can use city names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "param_name": "lat",
            "description": "Can use latitude from city coordinates"
          },
          {
            "param_name": "lng",
            "description": "Can use longitude from city coordinates"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "param_name": "lat",
            "description": "Can use latitude from city coordinates"
          },
          {
            "param_name": "lng",
            "description": "Can use longitude from city coordinates"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations",
        "connect params": [
          {
            "param_name": "name",
            "description": "Can use city names from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations by geolocation",
        "connect params": [
          {
            "param_name": "latitude",
            "description": "Can use latitude from city coordinates"
          },
          {
            "param_name": "longitude",
            "description": "Can use longitude from city coordinates"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Cloud Cast",
    "parent tool description": "Cloudcast is a simple and efficient API built with Node.js and Express, designed to provide real-time weather information for any city in the world. It is able to fetch and deliver current weather conditions including temperature, humidity, wind speed, and other vital meteorological data.",
    "tool name": "Cloud Cast: Get current weather",
    "tool description": "Gets the current weather for a specified city name, providing real-time meteorological data. This endpoint leverages Cloudcast's simple and efficient API built with Node.js and Express to deliver comprehensive weather information including temperature, humidity, wind speed, and other vital conditions from anywhere in the world.",
    "required_parameters": [
      {
        "name": "city",
        "type": "string",
        "description": "",
        "default": "New York"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://cloud-cast.p.rapidapi.com/weather/{city}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"cloud-cast.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "Get current weather",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns a detailed, real-time weather report for a specified city. The output contains comprehensive meteorological data, including temperature, humidity, pressure, wind speed, and visibility. It also provides geographical coordinates, sunrise/sunset times, and a short description of the current weather conditions (e.g., 'light rain', 'broken clouds').",
      "output_format": "The output is a single, non-paginated JSON object. It contains several nested objects for different data categories (e.g., 'main' for temperature data, 'wind' for wind data) and a nested array for 'weather' conditions. Some fields, such as 'rain', may be omitted if not applicable to the current weather."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Air Quality: Current Air Quality",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get hourly forecast",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get wind speed",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get humidty",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get the forecast",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "lon",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "description": "Can use latitude from the source tool's geographical coordinates"
          },
          {
            "name": "longitude",
            "description": "Can use longitude from the source tool's geographical coordinates"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "description": "Can use city name from the source tool's output"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Realtime Weather API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use city name or latitude/longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Astronomy API",
        "connect params": [
          {
            "name": "q",
            "description": "Can use city name or latitude/longitude from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Alpha Vantage",
    "parent tool description": "The simplest and most effective way to receive stock, ETF, forex, technical indicators, and cryptocurrency data.  Constantly ranked as a leading API provider for ease of use, accuracy, and price. [See the documentation](https://www.alphavantage.co/documentation/) and [read more](https://medium.com/@patrick.collins_58673/stock-api-landscape-5c6e054ee631) on the market data industry.  [Start now for free](https://www.alphavantage.co/support/#api-key).",
    "required_parameters": [
      {
        "name": "from_symbol",
        "type": "STRING",
        "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR",
        "default": "EUR"
      },
      {
        "name": "to_symbol",
        "type": "STRING",
        "description": "A three-letter symbol from the forex currency list. For example: from_symbol=USD",
        "default": "USD"
      },
      {
        "name": "function",
        "type": "STRING",
        "description": "The time series of your choice.",
        "default": "FX_MONTHLY"
      }
    ],
    "optional_parameters": [
      {
        "name": "datatype",
        "type": "STRING",
        "description": "By default, datatype=json. Strings json and csv are accepted with the following specifications: json returns the monthly time series in JSON format; csv returns the time series as a CSV (comma separated value) file.",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://alpha-vantage.p.rapidapi.com/query\"\nquerystring = {\"from_symbol\": from_symbol, \"datatype\": datatype, \"to_symbol\": to_symbol, \"function\": function}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"alpha-vantage.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Alpha Vantage: FX_MONTHLY",
    "tool description": "Returns the monthly time series (timestamp, open, high, low, close) for a specified FX currency pair, updated in real-time. This endpoint is part of a leading financial data platform that provides stock, ETF, forex, technical indicators, and cryptocurrency data. Leveraging real-time market feeds and a comprehensive database, it delivers accurate, up-to-date information to support informed decision-making, consistently ranked for ease of use, reliability, and competitive pricing.",
    "API name": "FX_MONTHLY",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides historical monthly time series data for a specified foreign exchange (FX) currency pair. The output includes the open, high, low, and close (OHLC) prices for each month. It also contains metadata detailing the currency symbols, the last refresh date, and the time zone, which is useful for financial analysis and tracking long-term currency trends.",
      "output_format": "The output is a JSON object with two primary keys: 'Meta Data' and 'Time Series FX (Monthly)'. The 'Time Series FX (Monthly)' value is an object where each key is a date string (YYYY-MM-DD) representing a specific month. The corresponding value is another nested object containing the open, high, low, and close prices for that month. All numerical price values are represented as strings."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: FX_DAILY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: to_symbol=USD"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_WEEKLY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: to_symbol=USD"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: FX_INTRADAY",
        "connect params": [
          {
            "name": "from_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: from_symbol=EUR"
          },
          {
            "name": "to_symbol",
            "description": "A three-letter symbol from the forex currency list. For example: to_symbol=USD"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: CURRENCY_EXCHANGE_RATE (Crypto)",
        "connect params": [
          {
            "name": "from_currency",
            "description": "The cryptocurrency you want to convert from"
          },
          {
            "name": "to_currency",
            "description": "The currency you want to convert to"
          }
        ]
      },
      {
        "tool name": "Exchange Rate API: Convert currency",
        "connect params": [
          {
            "name": "base",
            "description": "The three-letter currency code of the currency you would like to convert from."
          },
          {
            "name": "target",
            "description": "The three-letter currency code of the currency you would like to convert to."
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/trange\"\nquerystring = {\"interval\": \"1min\", \"outputsize\": 30, \"symbol\": \"AAPL\", \"format\": \"json\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: TRANGE",
    "tool description": "Calculates the true trading range of an asset to determine its normal volatility, serving as a foundational metric for technical analysis. This is part of the financial data platform that provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, enabling developers to build tools that leverage precise volatility measurements for informed trading decisions.",
    "API name": "TRANGE",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object containing historical True Range (TRANGE) data for a specific financial asset. The output is split into two main sections: a `meta` object that provides context about the asset (e.g., symbol, interval, currency, type) and a `values` array which contains a time-series of TRANGE data points. Each data point includes the datetime and the calculated true range value, a key metric for asset volatility.",
      "output_format": "The output is a single JSON object. It contains a `meta` object and a `values` array. The `values` array consists of objects, each with a `datetime` (string) and a `trange` (string representing a float). The format of the `datetime` string changes based on the interval (e.g., 'YYYY-MM-DD' for daily, 'YYYY-MM-DD HH:MM:SS' for intraday). The keys within the `meta` object can differ based on the asset type (e.g., stocks have a 'currency' key, while forex pairs have 'currency_base' and 'currency_quote'). The examples do not indicate any pagination."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: ATR",
        "connect params": [
          {
            "name": "symbol",
            "source_path": "meta.symbol"
          },
          {
            "name": "interval",
            "source_path": "meta.interval"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "source_path": "meta.symbol"
          },
          {
            "name": "interval",
            "source_path": "meta.interval"
          }
        ]
      },
      {
        "tool name": "Twelve Data: KELTNER",
        "connect params": [
          {
            "name": "symbol",
            "source_path": "meta.symbol"
          },
          {
            "name": "interval",
            "source_path": "meta.interval"
          }
        ]
      },
      {
        "tool name": "Twelve Data: NATR",
        "connect params": [
          {
            "name": "symbol",
            "source_path": "meta.symbol"
          },
          {
            "name": "interval",
            "source_path": "meta.interval"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUPERTREND",
        "connect params": [
          {
            "name": "symbol",
            "source_path": "meta.symbol"
          },
          {
            "name": "interval",
            "source_path": "meta.interval"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "source_path": "meta.symbol"
          },
          {
            "name": "interval",
            "source_path": "meta.interval"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/tsf\"\nquerystring = {\"format\": \"json\", \"series_type\": \"close\", \"time_period\": 9, \"symbol\": \"AAPL\", \"interval\": \"1min\", \"outputsize\": 30}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: TSF",
    "tool description": "Generates a time series forecast using multiple regression trendlines based on historical financial data points. This tool leverages the Financial Data API's extensive dataset, which includes real-time and historical information on stocks, forex, crypto, ETFs, and indices, to calculate trends and project future values. By applying statistical modeling to the latest data entries, it enables developers to make data-driven predictions, enhancing decision-making for market analysis and investment strategies.",
    "API name": "TSF",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool output provides a time series forecast (TSF) for a specified financial instrument such as a stock, forex pair, or cryptocurrency. It includes metadata about the instrument (e.g., symbol, interval, exchange) and the indicator's parameters. The main content is a list of forecasted values for future datetimes, intended for use in financial analysis, market prediction, and developing investment strategies.",
      "output_format": "The output is a single JSON object containing a 'meta' object and a 'values' array. The 'values' array consists of objects, each representing a single forecast data point with a 'datetime' (string) and a 'tsf' (forecasted value as a string). The list of values is sorted in reverse chronological order (most recent first). There is no indication of pagination."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The forecasted financial instrument symbol can be used to analyze the same asset with technical indicators"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The forecasted instrument symbol can be used to retrieve historical data for comparison"
          }
        ]
      },
      {
        "tool name": "Stock Sentiment API: News Sentiment Data",
        "connect params": [
          {
            "name": "ticker",
            "description": "The forecasted instrument symbol can be used to analyze sentiment for the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The forecasted instrument symbol can be used to get historical time series data for comparison"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The forecasted instrument symbol can be used to get financial data for comparison"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "period",
        "type": "NUMBER",
        "description": "",
        "default": 10
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "multiplier",
        "type": "NUMBER",
        "description": "",
        "default": 3
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/supertrend\"\nquerystring = {\"symbol\": \"AAPL\", \"period\": 10, \"format\": \"json\", \"multiplier\": 3, \"interval\": \"1min\", \"outputsize\": 30}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: SUPERTREND",
    "tool description": "Generates the SuperTrend indicator for intraday price direction detection using real-time and historical financial data from the parent tool's database of stocks, forex, crypto, ETFs, and indices. This helps traders identify trending market movements and make informed decisions based on comprehensive market data.",
    "API name": "SUPERTREND",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns SuperTrend indicator values for a specific financial instrument over a series of time intervals. The output is a time-series, ordered from most to least recent, that includes the calculated SuperTrend value for each datetime. It also provides metadata about the requested instrument (e.g., symbol, type, exchange) and the parameters used for the indicator calculation (period, multiplier).",
      "output_format": "The output is a single JSON object with two main keys: 'meta' and 'values'. The 'meta' key holds an object with metadata about the financial instrument and the indicator. The 'values' key holds a JSON array of objects, where each object represents a data point containing a 'datetime' string and a 'supertrend' value, which is also a string. The data in the 'values' array is sorted in reverse chronological order."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The SUPERTREND output contains symbol information in the meta section that can be used to specify the security"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used to query the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for further technical analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for additional momentum analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for volatility analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for trend analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for trend analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ATR",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for volatility analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ADX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used for trend strength analysis"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used to get company information"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from SUPERTREND's meta data can be used to get related news"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Geocoding by API-Ninjas",
    "parent tool description": "Convert city locations to latitude/longitude coordinates and vice versa. See more info at https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "tool name": "Geocoding by API-Ninjas: /v1/geocoding",
    "tool description": "Converts city locations to latitude/longitude coordinates and vice versa using the API Ninjas Geocoding API endpoint. This service enables seamless translation between human-readable place names and precise geographic coordinates, allowing for location-based functionality in applications. The API supports both forward geocoding (converting addresses to coordinates) and reverse geocoding (converting coordinates to addresses), providing a comprehensive solution for location data needs. For more detailed information, visit https://api-ninjas.com/api/geocoding and https://api-ninjas.com/api/reversegeocoding.",
    "required_parameters": [
      {
        "name": "city",
        "type": "STRING",
        "description": "City name.",
        "default": "Seattle"
      }
    ],
    "optional_parameters": [
      {
        "name": "country",
        "type": "STRING",
        "description": "Country name, 2-letter ISO country code, or 3-letter ISO country code.",
        "default": ""
      },
      {
        "name": "state",
        "type": "STRING",
        "description": "US state (for United States cities only).",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://geocoding-by-api-ninjas.p.rapidapi.com/v1/geocoding\"\nquerystring = {\"city\": city}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"geocoding-by-api-ninjas.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "/v1/geocoding",
    "domain name": "Mapping",
    "output_info": {
      "output_info_summary": "The tool returns a list of geographic locations that match an input query. Each location in the list is an object containing the place name, its precise latitude and longitude coordinates, and its two-letter country code. When applicable, the state or region is also included. This information is primarily used to convert human-readable place names into machine-readable coordinates for mapping or other location-based functionalities.",
      "output_format": "The output is a JSON-formatted string which represents a list (array) of location objects. Each object corresponds to a potential location match. The 'state' field within an object is optional and may not be present for all locations (e.g., locations in Japan from the examples). The list can contain multiple results for a single query, representing different possible matches."
    },
    "connected tools": [
      {
        "tool name": "boundaries-io: Query by Location for Place boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Neighborhood boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for County boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "boundaries-io: Query by Location for Zipcode boundaries",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Map: mapimage",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: spotarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Search: staarea",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "MapFanAPI - Route: nearroadinfo",
        "connect params": [
          {
            "name": "lonlat",
            "description": "Longitude and latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Places Nearby a Coordinates: Nearby",
        "connect params": [
          {
            "name": "lon",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Reverse Geocoding and Geolocation Service: GetTimezone",
        "connect params": [
          {
            "name": "longitude",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "latitude",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Address From To Latitude Longitude: Coordinates  (latitude longitude) to Address",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocode - Forward and Reverse: Reverse geocode",
        "connect params": [
          {
            "name": "lng",
            "description": "Longitude from the source tool's output"
          },
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "Geocoding by API-Ninjas: /v1/reversegeocoding",
        "connect params": [
          {
            "name": "lat",
            "description": "Latitude from the source tool's output"
          },
          {
            "name": "lon",
            "description": "Longitude from the source tool's output"
          }
        ]
      },
      {
        "tool name": "TrueWay Geocoding: ReverseGeocode",
        "connect params": [
          {
            "name": "location",
            "description": "Latitude and longitude from the source tool's output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Arabic news API",
    "parent tool description": "this API gets you headlins and links to the latest news from the most famous arabic news websites such as Aljazeera, BBC Arabic, CNN Arabic, Alarabiya. and more.\n\u0647\u0630\u0627 \u0627\u0644\u0627\u064a \u0628\u064a \u0622\u064a \u064a\u0633\u062a\u0631\u062c\u0639 \u0622\u062e\u0631 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0645\u0646 \u0623\u0628\u0631\u0632 \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629\u060c \u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0636\u0627\u0641\u0629 \u0645\u0635\u0627\u062f\u0631 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631",
    "tool name": "Arabic news API: RT Arabic",
    "tool description": "\u064a\u0633\u062a\u0631\u062c\u0639 \u0622\u062e\u0631 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0627\u0644\u0645\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0645\u0648\u0642\u0639 \u0631\u0648\u0633\u064a\u0627 \u0627\u0644\u064a\u0648\u0645\u060c \u0648\u0647\u0648 \u062c\u0632\u0621 \u0645\u0646 \u062e\u062f\u0645\u0629 API \u0634\u0627\u0645\u0644\u0629 \u062a\u0648\u0641\u0631 \u0623\u062d\u062f\u062b \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0648\u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0645\u0646 \u0623\u0628\u0631\u0632 \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0645\u062b\u0644 \u0627\u0644\u062c\u0632\u064a\u0631\u0629\u060c \u0628\u064a \u0628\u064a \u0633\u064a \u0639\u0631\u0628\u064a\u060c \u0633\u064a \u0625\u0646 \u0625\u0646 \u0639\u0631\u0628\u064a\u060c \u0648\u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0648\u063a\u064a\u0631\u0647\u0627. \u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0625\u0636\u0627\u0641\u0629 \u0645\u0635\u0627\u062f\u0631 \u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u062c\u062f\u064a\u062f\u0629 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0644\u0636\u0645\u0627\u0646 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0623\u062d\u062f\u062b \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0646 \u0645\u062e\u062a\u0644\u0641 \u0627\u0644\u0645\u0646\u0635\u0627\u062a \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://arabic-news-api.p.rapidapi.com/rtarabic\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"arabic-news-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "RT Arabic",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool provides a list of the latest news articles from the RT Arabic news website. Each item in the list represents a single news article and includes its title, a short content summary, the source category URL, and a direct link to the full article on the RT Arabic site.",
      "output_format": "The output is a string representation of a JSON object. This object has a top-level key named \"results\" which contains an array of article objects. Each article object has string values for 'source', 'title', 'content', and 'url'. The 'image' key is also present but was an empty string in all provided examples, suggesting it may be nullable or frequently empty."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use titles or content from RT Arabic news articles as search terms"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can search for movie-related content using keywords from RT Arabic articles"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use titles or content from RT Arabic articles as search keywords"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Zappos Realtime Data",
    "parent tool description": "Zappos Realtime Data",
    "tool name": "Zappos Realtime Data: Zappos search product",
    "tool description": "Searches through realtime data from Zappos to find current product information and availability. This endpoint connects to Zappos' live inventory system, allowing users to access up-to-date product listings, pricing, stock levels, and promotions across their extensive catalog of shoes, clothing, and accessories. The realtime nature of this data ensures that search results reflect the most current information available from Zappos' online retail platform.",
    "required_parameters": [
      {
        "name": "keyword",
        "type": "STRING",
        "description": "",
        "default": "crocs body"
      }
    ],
    "optional_parameters": [
      {
        "name": "sort",
        "type": "STRING",
        "description": "`best_seller , relevance, low_to_high, high_to_low, customer_rating, new_arrivals, brand_name`",
        "default": "new_arrivals"
      },
      {
        "name": "page",
        "type": "NUMBER",
        "description": "",
        "default": "1"
      }
    ],
    "code": "import requests\n\nurl = \"https://zappos-realtime-data.p.rapidapi.com/search.php\"\nquerystring = {\"keyword\": keyword, \"sort\": sort, \"page\": page}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"zappos-realtime-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Zappos search product",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "The tool's output provides a summary of a product search on Zappos. It includes the total number of products found and a detailed breakdown of search facets, such as gender and product type, with counts for each category. This faceted data is intended to help users refine their search. Although not shown in the examples, the output likely also contains a list of the actual products matching the search query.",
      "output_format": "The output is a single JSON object. It contains keys like `currentResultCount` and `totalResultCount`, which indicates the results are paginated. The primary data structure shown in the examples is the `facets` key, which holds an array of objects, where each object represents a filterable category and contains a list of its possible values and the count of products for each value. The examples appear to be truncated and do not include the list of individual product results."
    },
    "connected tools": [
      {
        "tool name": "Zappos Realtime Data: Zappos product detail by Product ID",
        "connect params": [
          {
            "name": "product_id",
            "description": "The product_id can be extracted from the search results of the source tool, which likely contains product listings with their IDs."
          }
        ]
      },
      {
        "tool name": "BestBuy Product Data: BestBuyProductData",
        "connect params": [
          {
            "name": "keyword",
            "description": "The facet information from the source tool can be used to refine search keywords for BestBuy products."
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "fast_dma_type",
        "type": "STRING",
        "description": "Supports: `SMA`, `EMA`, `WMA`, `DEMA`, `TEMA`, `TRIMA`, `KAMA`, `MAMA`, `T3MA`",
        "default": "SMA"
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "fast_d_period",
        "type": "NUMBER",
        "description": "",
        "default": 3
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "fast_k_period",
        "type": "NUMBER",
        "description": "",
        "default": 3
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 14
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/stochrsi\"\nquerystring = {\"fast_dma_type\": \"SMA\", \"symbol\": \"AAPL\", \"interval\": \"1min\", \"series_type\": \"close\", \"fast_d_period\": 3, \"outputsize\": 30, \"fast_k_period\": 3, \"format\": \"json\", \"time_period\": 14}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: STOCHRSI",
    "tool description": "Generates a Stochastic RSI (STOCHRSI) technical indicator for financial assets, calculating overbought/oversold levels and market trends using parameters like symbol, interval, and time period. This endpoint leverages the parent tool's financial data API, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, enabling developers to integrate advanced technical analysis into trading strategies with precise, algorithm-driven insights.",
    "API name": "STOCHRSI",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output provides Stochastic RSI (STOCHRSI) technical indicator data for a specific financial asset. It returns a time series of calculated %K and %D values, which are used in technical analysis to identify overbought or oversold conditions and assess market momentum. The output also includes comprehensive metadata about the financial symbol, the time interval used, and the specific parameters configured for the STOCHRSI calculation.",
      "output_format": "The output is a single JSON object containing two primary keys: `meta` and `values`. The `meta` key holds an object with metadata about the request and the asset. The `values` key contains an array of objects, where each object represents a data point with a `datetime` and the corresponding `k` and `d` values for the indicator. The numerical values for `k` and `d` are provided as strings. The data points within the `values` array are sorted in reverse chronological order (most recent first)."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output for consistent analysis"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output for consistent analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output to analyze the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output for complementary RSI analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output for volatility analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUPERTREND",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output for trend analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ICHIMOKU",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output for comprehensive technical analysis"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "Can use the same symbol from STOCHRSI output to get fundamental data to complement technical analysis"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/max\"\nquerystring = {\"time_period\": 9, \"symbol\": \"AAPL\", \"outputsize\": 30, \"interval\": \"1min\", \"series_type\": \"close\", \"format\": \"json\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: MAX",
    "tool description": "Returns the highest value within a specified time period for financial assets like stocks, forex, crypto, ETFs, and indices. This endpoint leverages Twelvedata's real-time and historical financial data API to quickly identify peak values, enabling developers to analyze market trends and make data-driven decisions efficiently. By accessing a comprehensive database of market instruments, it provides actionable insights for trading strategies and financial research.",
    "API name": "MAX",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns a JSON object containing a time series of the highest value for a financial asset over a specified rolling window. The output includes a 'meta' object with contextual details about the asset (e.g., symbol, interval, currency) and the indicator's parameters. The primary data is in a 'values' array, where each element represents a point in time with its corresponding calculated maximum value.",
      "output_format": "The response is a single JSON object with top-level keys 'meta', 'values', and 'status'. The 'values' key holds an array of objects, sorted in reverse chronological order. Each object in this array contains a 'datetime' (string) and a 'max' (string-formatted number). The structure is nested; for example, the 'meta' object contains a nested 'indicator' object with calculation details."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to calculate Bollinger Bands for the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to calculate RSI for the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to calculate Stochastic oscillator for the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to calculate MACD for the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ATR",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to calculate Average True Range for the same asset"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to retrieve time series data for the same asset"
          },
          {
            "name": "interval",
            "description": "The interval from the MAX output's meta information can be used to maintain consistent timeframes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MAX output can be used to get current quote information for the same asset"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "German Police and Crime News Live",
    "parent tool description": "An API showing all the latest Police, Crime, Accident etc. News in Germany",
    "tool name": "German Police and Crime News Live: Get all Police News",
    "tool description": "Retrieves the latest news about police activities, crimes, accidents, and similar incidents specifically from Germany. This API aggregates and delivers current public safety and emergency-related news content from across German sources, providing up-to-date information on law enforcement operations, criminal incidents, traffic accidents, and other public safety events occurring throughout the country.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://german-police-and-crime-news-live.p.rapidapi.com/news\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"german-police-and-crime-news-live.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get all Police News",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of news articles related to police activities, crime, and public safety in Germany. Each article in the list includes a title, a URL to the full story, and the name of the news source. This allows users to get a summary of and links to current public safety news from various German media outlets.",
      "output_format": "The output is a JSON-formatted string that represents a top-level array of objects. Each object corresponds to a single news article and contains three string fields: 'title', 'url', and 'source'. Some 'title' fields may contain extra whitespace or newline characters."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could use titles from German police news articles as search terms to find related business/finance news"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Could search for movie news related to crime stories from German police news"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Could use titles or key terms from German police news as search keywords"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "fast Email verifier",
    "parent tool description": "APISOLUTION services provide a comprehensive API for fast email validation and verification for any developer to use on start-ups and staff projects.",
    "tool name": "fast Email verifier: Role Account",
    "tool description": "Checks the rols account associated with your domain, allowing you to verify domain-specific email configurations. This endpoint leverages APISOLUTION's comprehensive email validation and verification API, designed for developers working on start-ups and staff projects who need fast, reliable email infrastructure assessment.",
    "required_parameters": [
      {
        "name": "domain",
        "type": "STRING",
        "description": "",
        "default": "domain.org"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://fast-email-verifier.p.rapidapi.com/IsRoleAccount\"\nquerystring = {\"domain\": domain}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"fast-email-verifier.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Role Account",
    "domain name": "Email",
    "output_info": {
      "output_info_summary": "This tool checks if a given email domain is classified as a \"RoleAccount domain\". Based on the examples, this appears to identify common free email providers (like gmail.com, yahoo.com) and distinguish them from what are presumably corporate or organizational domains. The output is a simple statement confirming the result of the check, or a \"Not Found\" message if the domain cannot be processed or is invalid.",
      "output_format": "The output format is inconsistent. A successful lookup returns a string that represents a single key-value pair, similar to a Python dictionary (`{'RoleAccount': '...'}`). An error or a case where the domain is not found returns a simple plain text string ('Not Found\\n'). The output is not serialized as a standard JSON object and is not nested or paginated."
    },
    "connected tools": [
      {
        "tool name": "fast Email verifier: disposable Domain and Suggest Domain",
        "connect params": [
          {
            "name": "domain",
            "description": "The domain classification can be used to check if it's disposable"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "fast_dma_type",
        "type": "STRING",
        "description": "Supports: `SMA`, `EMA`, `WMA`, `DEMA`, `TEMA`, `TRIMA`, `KAMA`, `MAMA`, `T3MA`",
        "default": "SMA"
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "fast_k_period",
        "type": "NUMBER",
        "description": "",
        "default": 14
      },
      {
        "name": "fast_d_period",
        "type": "NUMBER",
        "description": "",
        "default": 3
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/stochf\"\nquerystring = {\"fast_dma_type\": \"SMA\", \"format\": \"json\", \"fast_k_period\": 14, \"interval\": \"1min\", \"symbol\": \"AAPL\", \"fast_d_period\": 3, \"outputsize\": 30}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: STOCHF",
    "tool description": "Generates a stochastic fast (STOCHF) signal sensitive to price changes, providing real-time direction adjustments. This endpoint leverages Twelve Data's financial infrastructure, accessing real-time and historical stock, forex, crypto, ETF, and index data to deliver actionable insights for traders, enabling rapid responses to market fluctuations with precise, data-driven signals.",
    "API name": "STOCHF",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides time-series data for the Stochastic Fast (STOCHF) technical indicator, which consists of the %K and %D lines for a specified financial instrument (stock, forex, crypto, etc.) and time interval. This output is used by traders to identify potential overbought or oversold conditions and to spot momentum shifts, thereby informing trading decisions about entry and exit points.",
      "output_format": "The output is a single JSON object with two main keys: 'meta' and 'values'. The 'meta' object contains metadata about the requested symbol, interval, and the indicator's parameters. The 'values' key contains a JSON array of data points, sorted in reverse chronological order. Each data point is an object with a 'datetime' string and the corresponding 'fast_k' and 'fast_d' indicator values, which are also formatted as strings."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The STOCHF output contains symbol information that can be used to query the same symbol"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used to query the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used for further technical analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used for complementary momentum analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used for volatility analysis alongside momentum"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ADX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used for trend strength analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUPERTREND",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used for trend direction analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used to compare with regular stochastic"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCHRSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used for related oscillator analysis"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from STOCHF metadata can be used to get current price information"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "RapidWeather",
    "parent tool description": "The proprietary convolutional neural network collects and processes wide range of data sources to cover any location and consider the local nuances of climate.\n\nWe collect and process weather data from different sources such as global and local weather models, satellites, radars and vast network of weather stations.\n\nFor each point on the globe, RapidWeather provides historical, current and forecasted weather data via light-speed APIs.",
    "tool name": "RapidWeather: By ZIP code",
    "tool description": "Searches for weather data with USA as the default country if no country is specified. This uses a proprietary convolutional neural network that collects and processes data from multiple sources including global and local weather models, satellites, radars, and a vast network of weather stations. The system provides historical, current, and forecasted weather information for any location on the globe via high-speed APIs, taking into account local climate nuances for comprehensive weather intelligence.",
    "required_parameters": [
      {
        "name": "zip",
        "type": "STRING",
        "description": "Zip code",
        "default": "94040"
      }
    ],
    "optional_parameters": [
      {
        "name": "lang",
        "type": "STRING",
        "description": "You can use the **lang **parameter to get the output in your language",
        "default": ""
      },
      {
        "name": "units",
        "type": "STRING",
        "description": "Units of measurement. **standard**, **metric **and **imperial **units are available. If you do not use the **units **parameter, **standard **units will be applied by default.",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://rapidweather.p.rapidapi.com/data/2.5/weather\"\nquerystring = {\"zip\": zip}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"rapidweather.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "By ZIP code",
    "domain name": "Weather",
    "output_info": {
      "output_info_summary": "The tool returns a detailed, real-time weather report for a specific location. The output includes geographical coordinates, current weather conditions (e.g., temperature, pressure, humidity, wind speed), visibility, and cloud coverage. It also provides supplementary data like sunrise/sunset times, timezone, and the city name associated with the queried location.",
      "output_format": "The output is a single JSON object. It contains several nested objects for organizing data, such as `coord`, `main`, and `wind`. The `weather` key holds an array of objects, although all examples show only a single element. Some fields within the nested objects, such as `gust` in the `wind` object, appear to be optional and may be omitted if not applicable."
    },
    "connected tools": [
      {
        "tool name": "AI Weather by Meteosource: historical_weather",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: weather_statistics",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: hourly",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          },
          {
            "name": "timezone",
            "source": "timezone"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: current",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          },
          {
            "name": "timezone",
            "source": "timezone"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: daily",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: minutely",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          },
          {
            "name": "timezone",
            "source": "timezone"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: alerts",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          },
          {
            "name": "timezone",
            "source": "timezone"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: nearest_place",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "AI Weather by Meteosource: astro",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          },
          {
            "name": "timezone",
            "source": "timezone"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality History",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Air Quality: Air Quality Forecast",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get hourly forecast",
        "connect params": [
          {
            "name": "city",
            "source": "name"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get wind speed",
        "connect params": [
          {
            "name": "city",
            "source": "name"
          }
        ]
      },
      {
        "tool name": "Cloud Cast: Get humidty",
        "connect params": [
          {
            "name": "city",
            "source": "name"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Daily forecast (5 days)",
        "connect params": [
          {
            "name": "latitude",
            "source": "coord.lat"
          },
          {
            "name": "longitude",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Hourly forecast (48 hours)",
        "connect params": [
          {
            "name": "latitude",
            "source": "coord.lat"
          },
          {
            "name": "longitude",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Easy Weather: Current conditions (basic)",
        "connect params": [
          {
            "name": "latitude",
            "source": "coord.lat"
          },
          {
            "name": "longitude",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Koppen Climate Classification: Classification",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Current air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: Forecast air pollution data",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "RapidWeather: By geographic coordinates",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Sun Seeker API: sunposition",
        "connect params": [
          {
            "name": "lat",
            "source": "coord.lat"
          },
          {
            "name": "lon",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Sunrise Sunset Times: Get Sunrise and Sunset Times",
        "connect params": [
          {
            "name": "latitude",
            "source": "coord.lat"
          },
          {
            "name": "longitude",
            "source": "coord.lon"
          }
        ]
      },
      {
        "tool name": "Weather API - By Any City: Get Weather Updates",
        "connect params": [
          {
            "name": "city",
            "source": "name"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Realtime Weather API",
        "connect params": [
          {
            "name": "q",
            "source": "coord.lat,coord.lon"
          }
        ]
      },
      {
        "tool name": "WeatherAPI.com: Astronomy API",
        "connect params": [
          {
            "name": "q",
            "source": "name"
          }
        ]
      },
      {
        "tool name": "World Weather Online API: Local Weather API",
        "connect params": [
          {
            "name": "q",
            "source": "coord.lat,coord.lon"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "signal_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "fast_period",
        "type": "NUMBER",
        "description": "",
        "default": 12
      },
      {
        "name": "slow_period",
        "type": "NUMBER",
        "description": "",
        "default": 26
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/macd\"\nquerystring = {\"signal_period\": 9, \"outputsize\": 30, \"series_type\": \"close\", \"fast_period\": 12, \"slow_period\": 26, \"interval\": \"1min\", \"symbol\": \"AAPL\", \"format\": \"json\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: MACD",
    "tool description": "Calculates the Moving Average Convergence Divergence (MACD) by subtracting the longer-term moving average from the shorter-term one, using historical price data with an unstable period of approximately 100 periods. This endpoint leverages Twelve Data's financial API, which provides real-time and historical data across stocks, forex, crypto, ETFs, and indices, enabling developers to analyze market trends and momentum efficiently. Learn more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "API name": "MACD",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides Moving Average Convergence Divergence (MACD) data for a specified financial instrument, such as a stock, forex pair, or cryptocurrency. The output consists of metadata about the request and a time-series list of MACD values, including the MACD line, signal line, and histogram for each period. This information is intended for technical analysis to identify market trends and momentum.",
      "output_format": "The output is a single JSON object containing two top-level keys: `meta` and `values`. The `meta` key holds an object with metadata about the instrument and indicator parameters. The `values` key holds a JSON array of data points, sorted in reverse chronological order (most recent first). All numerical values for the MACD indicator (`macd`, `macd_signal`, `macd_hist`) are formatted as strings."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The MACD output contains financial instrument data that can be used to identify the symbol for further technical analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to fetch time series data for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate SMA for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate EMA for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate RSI for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate Bollinger Bands for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: STOCH",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate Stochastic Oscillator for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ADX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate ADX for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SUPERTREND",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate SuperTrend for the same instrument"
          }
        ]
      },
      {
        "tool name": "Twelve Data: ICHIMOKU",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from MACD output can be used to calculate Ichimoku Cloud for the same instrument"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Wayfair",
    "parent tool description": "This API helps to query for all information about categories, products, etc\u2026 as on wayfair.com",
    "required_parameters": [
      {
        "name": "sku",
        "type": "STRING",
        "description": "The value of sku fields returned in .../products/list or .../products/search endpoint.",
        "default": "W004939121"
      }
    ],
    "optional_parameters": [
      {
        "name": "page",
        "type": "NUMBER",
        "description": "For paging purpose",
        "default": "1"
      },
      {
        "name": "star",
        "type": "STRING",
        "description": "Leave empty or  1 to 5",
        "default": ""
      },
      {
        "name": "sort_order",
        "type": "STRING",
        "description": "One of the following : RELEVANCE|HELPFUL|DATE&#95;ASCENDING|DATE&#95;DESCENDING|IMAGE|RATING&#95;DESCENDING|RATING&#95;ASCENDING",
        "default": "RELEVANCE"
      }
    ],
    "code": "import requests\n\nurl = \"https://wayfair.p.rapidapi.com/reviews/list\"\nquerystring = {\"page\": page, \"sku\": sku, \"sort_order\": sort_order}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"wayfair.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Wayfair: reviews/list",
    "tool description": "Lists reviews for a specific product using the parent API's capability to query Wayfair.com's database, providing user-generated feedback to enhance product decisions. This endpoint taps into a comprehensive service designed to retrieve detailed information about categories, products, and related data, enabling efficient access to curated reviews that reflect real-world user experiences.",
    "API name": "reviews/list",
    "domain name": "eCommerce",
    "output_info": {
      "output_info_summary": "Provides customer review information for a specified product SKU. The output includes summary statistics such as the average rating, total review count, and a histogram of rating distributions. It also contains a detailed list of individual reviews, each with the reviewer's name, location, rating, comments, and links to any associated customer photos.",
      "output_format": "The response is a JSON object with review data deeply nested under the path `data.product.customer_reviews`. This object contains both summary statistics and a list of individual review objects in the `reviews` key. If a product has no reviews, this list will be empty, and the summary fields (e.g., `rating_count`, `average_rating_value`) will be set to zero."
    },
    "connected tools": [
      {
        "tool name": "Wayfair: products/get-similar-items",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to find similar items to the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-common-info",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get more information about the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-home-services",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get home services related to the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-warranty-services",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get warranty information for the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-images",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get images of the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-financing-offers",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get financing options for the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/get-pricing",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get pricing information for the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: products/v2/detail (Deprecating)",
        "connect params": [
          {
            "param_name": "sku",
            "description": "The product SKU from the reviews can be used to get detailed information about the reviewed product"
          }
        ]
      },
      {
        "tool name": "Wayfair: auto-complete",
        "connect params": [
          {
            "param_name": "query",
            "description": "Product names or categories mentioned in reviews can be used as search queries"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      },
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      }
    ],
    "optional_parameters": [
      {
        "name": "series_type_1",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "open"
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      },
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "series_type_2",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/div\"\nquerystring = {\"series_type_1\": \"open\", \"format\": \"json\", \"interval\": \"1min\", \"outputsize\": 30, \"series_type_2\": \"close\", \"symbol\": \"AAPL\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: DIV",
    "tool description": "Divides values from two specified time series to enable comparative financial analysis. This endpoint leverages the Financial Data API's real-time and historical datasets, including stocks, forex, crypto, ETFs, and indices, allowing developers to perform precise calculations and derive insights into market trends.",
    "API name": "DIV",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool provides the result of an arithmetic division between two specified time series (e.g., open price divided by close price) for a financial instrument. The output includes metadata about the symbol, the calculation performed, and the time interval, along with a time-series list of the calculated division values.",
      "output_format": "The tool returns a single JSON object with two main keys: 'meta' and 'values'. The 'meta' key contains an object with metadata about the financial symbol and the indicator calculation. The 'values' key contains a JSON array of objects, where each object represents a data point with a 'datetime' (string) and the corresponding 'div' value (a string-encoded number). The array of values is sorted in reverse chronological order."
    },
    "connected tools": [
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains financial symbol metadata that could be used to query the same symbol"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used for technical analysis"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used for moving average calculation"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used for exponential moving average calculation"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used for RSI calculation"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MACD",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used for MACD calculation"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used for Bollinger Bands calculation"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The DIV output contains symbol information that can be used to get current quotes"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Arabic news API",
    "parent tool description": "this API gets you headlins and links to the latest news from the most famous arabic news websites such as Aljazeera, BBC Arabic, CNN Arabic, Alarabiya. and more.\n\u0647\u0630\u0627 \u0627\u0644\u0627\u064a \u0628\u064a \u0622\u064a \u064a\u0633\u062a\u0631\u062c\u0639 \u0622\u062e\u0631 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0645\u0646 \u0623\u0628\u0631\u0632 \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629\u060c \u064a\u062a\u0645 \u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0627\u0636\u0627\u0641\u0629 \u0645\u0635\u0627\u062f\u0631 \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631",
    "tool name": "Arabic news API: Youm7 - \u0627\u0644\u064a\u0648\u0645 \u0627\u0644\u0633\u0627\u0628\u0639",
    "tool description": "\u064a\u0633\u062a\u0631\u062c\u0639 \u062c\u0645\u064a\u0639 \u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0645\u0646 \u0645\u0648\u0642\u0639 \u0627\u0644\u064a\u0648\u0645 \u0627\u0644\u0633\u0627\u0628\u0639 \u0627\u0644\u0645\u0635\u0631\u064a\u060c \u0648\u0647\u0648 \u062c\u0632\u0621 \u0645\u0646 \u062e\u062f\u0645\u0629 \u0645\u062a\u0643\u0627\u0645\u0644\u0629 \u062a\u0642\u062f\u0645 \u0622\u062e\u0631 \u0627\u0644\u0639\u0646\u0627\u0648\u064a\u0646 \u0648\u0627\u0644\u0631\u0648\u0627\u0628\u0637 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0645\u0646 \u0623\u0628\u0631\u0632 \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0645\u062b\u0644 \u0627\u0644\u062c\u0632\u064a\u0631\u0629\u060c \u0628\u064a \u0628\u064a \u0633\u064a \u0639\u0631\u0628\u064a\u060c \u0633\u064a \u0625\u0646 \u0625\u0646 \u0639\u0631\u0628\u064a\u060c \u0648\u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0648\u063a\u064a\u0631\u0647\u0627. \u062a\u062a\u0645\u064a\u0632 \u0647\u0630\u0647 \u0627\u0644\u062e\u062f\u0645\u0629 \u0628\u062a\u062d\u062f\u064a\u062b \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0628\u0634\u0643\u0644 \u0645\u0633\u062a\u0645\u0631 \u0648\u0625\u0636\u0627\u0641\u0629 \u0645\u0635\u0627\u062f\u0631 \u0625\u062e\u0628\u0627\u0631\u064a\u0629 \u062c\u062f\u064a\u062f\u0629\u060c \u0645\u0645\u0627 \u064a\u0648\u0641\u0631 \u0644\u0644\u0645\u0633\u062a\u062e\u062f\u0645 \u0645\u0635\u062f\u0631\u0627\u064b \u0634\u0627\u0645\u0644\u0627\u064b \u0644\u0644\u0623\u062e\u0628\u0627\u0631 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 \u0645\u0646 \u0645\u0646\u0635\u0629 \u0648\u0627\u062d\u062f\u0629.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://arabic-news-api.p.rapidapi.com/youm7\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"arabic-news-api.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Youm7 - \u0627\u0644\u064a\u0648\u0645 \u0627\u0644\u0633\u0627\u0628\u0639",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "This tool retrieves a list of news articles from the Egyptian news website Youm7 (\u0627\u0644\u064a\u0648\u0645 \u0627\u0644\u0633\u0627\u0628\u0639). The output provides a collection of articles, where each article includes its title, a content snippet, publication date, a URL to the news section, an image URL, and a direct link to the full article. This is intended to provide users with up-to-date headlines and summaries from a specific Arabic news source.",
      "output_format": "The tool returns a JSON object with a single key, \"results\". The value of this key is a JSON array of objects, where each object represents a news article. Some fields within an article object, such as 'date' and 'image', can be an empty string, indicating they might be nullable or not always available."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use article titles or content snippets from Youm7 as search terms for business/finance news"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use article titles or content snippets from Youm7 as search terms for related news"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use movie-related article titles or content from Youm7 to search for movie news"
          }
        ]
      },
      {
        "tool name": "Instant Cameroon News: Retrieve data",
        "connect params": [
          {
            "name": "search",
            "description": "Can use article titles or content snippets from Youm7 as search terms for related news"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Rocket League",
    "parent tool description": "Ranks, stats, news & more, provided by the fastest and most powerful API for Rocket League.",
    "tool name": "Rocket League: Population",
    "tool description": "Checks the current player population across different Rocket League playlists using the `/population` endpoint. This leverages the fastest and most powerful Rocket League API to provide real-time data on how many players are active in various game modes, complementing the broader suite of features that deliver comprehensive ranks, player statistics, and news for the Rocket League community.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://rocket-league1.p.rapidapi.com/population\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"rocket-league1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Population",
    "domain name": "Gaming",
    "output_info": {
      "output_info_summary": "The tool's output provides real-time data on the Rocket League player population. It returns the total number of players currently online and provides a more detailed breakdown of player counts for each specific game mode or playlist. This information can be used to check server status or see which game modes are the most popular at a given moment.",
      "output_format": "The output is a single JSON object. It contains a top-level integer key 'online' for the total player count, and a key 'playlists' which holds an array of nested objects. Each object in this array represents a specific game mode and details its 'name' as a string and its current 'population' as an integer."
    },
    "connected tools": [
      {
        "tool name": "Rocket League: Tournaments",
        "connect params": [
          {
            "name": "region",
            "description": "The region parameter could be selected based on population data to target regions with higher player counts for better tournament experiences"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Dice Roll Simulator",
    "parent tool description": "Roll as many dice of any size as many times you want with the ultimate dice rolling API.",
    "tool name": "Dice Roll Simulator: Custom die",
    "tool description": "Rolls one die with any number of sides, allowing you to specify custom dice beyond the standard 6-sided variety. This endpoint is part of the ultimate dice rolling API that enables users to simulate various dice configurations for gaming, probability exercises, or random number generation needs. Whether you need a d4, d20, or even custom dice with hundreds of sides, this tool provides a simple way to get truly random rolls without the physical limitations of real dice.",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "sides",
        "type": "NUMBER",
        "description": "",
        "default": "8"
      }
    ],
    "code": "import requests\n\nurl = \"https://dice-roll-simulator.p.rapidapi.com/custom-die\"\nquerystring = {\"sides\": sides}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"dice-roll-simulator.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "API name": "Custom die",
    "domain name": "Gaming",
    "output_info": {
      "output_info_summary": "The tool's output provides the numerical result of a single die roll. It returns a single integer, representing the outcome of rolling one die with a user-specified number of sides. This information is intended for use in gaming, probability exercises, or any application needing a random integer within a specific range.",
      "output_format": "The output is a simple, non-nested JSON object. It contains a single key, \"result\", whose value is an integer representing the die roll's outcome. Based on the examples, the output is not an array and the fields are not nullable."
    },
    "connected tools": [
      {
        "tool name": "Dice Roll Simulator: Custom dice",
        "connect params": [
          {
            "name": "sides",
            "description": "The number of sides on each die could be determined by a previous die roll"
          }
        ]
      },
      {
        "tool name": "Dice Roll Simulator: Custom dice rolls",
        "connect params": [
          {
            "name": "sides",
            "description": "The number of sides on each die could be determined by a previous die roll"
          },
          {
            "name": "rolls",
            "description": "The number of rolls to perform could be determined by a previous die roll"
          }
        ]
      },
      {
        "tool name": "Dice Roll Simulator: Regular dice",
        "connect params": [
          {
            "name": "dice",
            "description": "The number of dice to roll could be determined by a previous die roll"
          }
        ]
      },
      {
        "tool name": "Dice Roll Simulator: Regular dice rolls",
        "connect params": [
          {
            "name": "dice",
            "description": "The number of dice to roll could be determined by a previous die roll"
          },
          {
            "name": "rolls",
            "description": "The number of rolls to perform could be determined by a previous die roll"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Real-Time PNR Status API for Indian Railways",
    "parent tool description": "It is an unofficial PNR Status API that provides real-time information on the status of Indian Railways train reservations. This API is designed for educational purposes only and is not affiliated with Indian Railways in any way.",
    "tool name": "Real-Time PNR Status API for Indian Railways: PNR Status",
    "tool description": "Provides real-time information on the status of Indian Railways train reservations through an unofficial PNR Status API. This service allows users to check current reservation details, including seat assignments, departure times, and journey status for Indian Railways bookings. The API delivers up-to-date tracking information for educational purposes only and is not affiliated with Indian Railways in any official capacity.",
    "required_parameters": [
      {
        "name": "pnr_status",
        "type": "NUMBER",
        "description": "",
        "default": "6217743114"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://real-time-pnr-status-api-for-indian-railways.p.rapidapi.com/indianrail/{pnr_status}\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"real-time-pnr-status-api-for-indian-railways.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "API name": "PNR Status",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The output provides the real-time status of an Indian Railways train reservation for a specific PNR (Passenger Name Record). This includes current reservation details, such as seat assignments (e.g., coach and berth numbers), train departure and arrival times, and the overall journey status (e.g., confirmed, waiting list, cancelled). This information allows a user to track their train booking.",
      "output_format": "The format is unknown due to a lack of output examples. Given that it is an API providing structured data, the output is likely a JSON object. This object would probably contain various key-value pairs representing the PNR details, such as 'train_number', 'journey_date', and a nested list of 'passengers' with their individual booking statuses."
    },
    "connected tools": [
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "The train's destination city could be used as a trip planning destination"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Auto Suggest",
        "connect params": [
          {
            "name": "string",
            "description": "The train's destination city could be used to search for travel options"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Mboum Finance",
    "parent tool description": "Mboum Finance Official API for stocks, options, ETFs, mutual funds, SEC Data, news, screeners and more! ",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "start",
        "type": "NUMBER",
        "description": "Enter a start index",
        "default": "0"
      }
    ],
    "code": "import requests\n\nurl = \"https://mboum-finance.p.rapidapi.com/co/collections/growth_technology_stocks\"\nquerystring = {\"start\": start}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"mboum-finance.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Mboum Finance: market/growth_technology_stocks",
    "tool description": "Identifies technology stocks with revenue and earnings growth exceeding 25% by analyzing financial data from the Mboum Finance API. This endpoint leverages the API's comprehensive database of stocks, options, ETFs, and SEC filings, combined with real-time market insights, to deliver targeted screening of high-growth tech equities. It enables investors to quickly pinpoint opportunities in the technology sector where companies are outperforming with significant revenue and earnings expansion.",
    "API name": "market/growth_technology_stocks",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool's output is a list of technology stocks identified as having revenue and earnings growth of more than 25%. For each stock, it provides a comprehensive set of financial data, including real-time market price, daily and 52-week price ranges, trading volume, earnings per share (EPS), analyst ratings, and other key metrics. This information is designed to help investors screen for and evaluate high-growth investment opportunities in the tech sector.",
      "output_format": "The output is a single JSON object. The primary data is located in the 'quotes' key, which contains a JSON array of objects, each representing a single stock. The root object includes pagination details ('start', 'count', 'total'), indicating that the results can be navigated page by page. The provided examples appear to be truncated."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to get real-time quotes"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve daily time series data"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used for technical analysis"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: stock/history/{stock}/{interval}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to get historical data"
          }
        ]
      },
      {
        "tool name": "Mboum Finance: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve related news"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to get time series data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve financial data"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "The growth technology stocks output contains ticker symbols that can be used to retrieve options data"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Greek News in English",
    "parent tool description": "An API showing all the latest Greek news  in English",
    "tool name": "Greek News in English: Get All News",
    "tool description": "Retrieves all the latest Greek news from multiple sources. This endpoint aggregates current news content from across Greek media outlets and delivers it in English, providing comprehensive access to Greece's news landscape without language barriers.",
    "required_parameters": [],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://greek-news-in-english.p.rapidapi.com/api/news\"\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"greek-news-in-english.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers)\nprint(response.json())\n",
    "API name": "Get All News",
    "domain name": "News_Media",
    "output_info": {
      "output_info_summary": "The tool returns a list of recent news articles sourced from various Greek media outlets, presented in English. Each article in the list includes a title, a hyperlink to the full story, a short description, a URL for a relevant image, and the name of the source publication. This output allows users to stay informed about current events in Greece without language barriers.",
      "output_format": "The output is a JSON array of objects. Each object represents a single news article and has a consistent structure with the following string keys: 'title', 'link', 'description', 'image', and 'site'. The provided examples do not indicate any pagination or cursoring mechanisms."
    },
    "connected tools": [
      {
        "tool name": "BizToc: Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use article titles or keywords from Greek news as search terms"
          }
        ]
      },
      {
        "tool name": "Kubric: The Comprehensive Movie News API: Basic Search",
        "connect params": [
          {
            "name": "q",
            "description": "Can use movie-related keywords or titles from Greek news articles"
          }
        ]
      },
      {
        "tool name": "News Network: Search News",
        "connect params": [
          {
            "name": "keyword",
            "description": "Can use keywords or topics from Greek news articles"
          }
        ]
      },
      {
        "tool name": "Indonesia News: kompas-detail",
        "connect params": [
          {
            "name": "guid",
            "description": "Can use article identifiers if Greek news references Kompas articles"
          }
        ]
      },
      {
        "tool name": "Instant Cameroon News: Retrieve data",
        "connect params": [
          {
            "name": "search",
            "description": "Can use keywords or topics from Greek news articles related to Cameroon"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Priceline com Provider",
    "parent tool description": "priceline.com | Lets you search hotels, cars for rent, flights. **Support**:  [tipsters@rapi.one](mailto:tipsters@rapi.one) / t.me/api_tipsters **Other travel  api:** https://rapi.one",
    "required_parameters": [
      {
        "name": "name",
        "type": "STRING",
        "description": "Name",
        "default": "Los"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://priceline-com-provider.p.rapidapi.com/v1/flights/locations\"\nquerystring = {\"name\": \"Los\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"priceline-com-provider.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Priceline com Provider: Search flights locations",
    "tool description": "Searches airports and locations by name. This endpoint is part of Priceline.com's travel API, which allows users to search hotels, cars, and flights, leveraging integrated travel data to help streamline trip planning and ensure accurate location information for bookings.",
    "API name": "Search flights locations",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The tool returns a list of airport and city-level locations that match a text-based search query. Each entry in the list contains detailed information about a location, including its name, type (specific airport or a city's collection of airports), geographic details like city, state, and country, and unique identifiers such as airport or city codes (e.g., 'LGA', 'NYC'). This output is primarily used to obtain the correct location ID for use in subsequent flight booking or search operations.",
      "output_format": "The output is a JSON array of objects, where each object represents a single location. The `subType` field within each object differentiates between a specific airport ('AIRPORT') and a city-level entry that represents all airports in that city ('GDS_CITY'). Some fields can be null, such as `provinceName` and `airportCode`. The latitude and longitude may be set to 0.0 for city-level results."
    },
    "connected tools": [
      {
        "tool name": "Flightera Flight Data: airportInfo",
        "connect params": [
          {
            "name": "iata",
            "description": "Can use IATA airport codes from the source tool output"
          },
          {
            "name": "icao",
            "description": "Can use ICAO airport codes from the source tool output"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportFlights",
        "connect params": [
          {
            "name": "ident",
            "description": "Can use airport identifiers from the source tool output"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportMetar",
        "connect params": [
          {
            "name": "ident",
            "description": "Can use airport identifiers from the source tool output"
          }
        ]
      },
      {
        "tool name": "AI Trip Planner: Get Trip Plan",
        "connect params": [
          {
            "name": "destination",
            "description": "Can use city/location names from the source tool output"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Flightera Flight Data",
    "parent tool description": "Flight status, on-time performance and statistics by Flightera",
    "required_parameters": [],
    "optional_parameters": [
      {
        "name": "timezone",
        "type": "STRING",
        "description": "The timezone of the airport (e.g. Europe/Berlin)",
        "default": "Europe/Berlin"
      },
      {
        "name": "country",
        "type": "STRING",
        "description": "The ISO 3166-1 alpha-2 code country code to request",
        "default": ""
      },
      {
        "name": "bbox",
        "type": "STRING",
        "description": "A bbox (min Longitude , min Latitude , max Longitude , max Latitude), will restrict results to airports within that box",
        "default": ""
      }
    ],
    "code": "import requests\n\nurl = \"https://flightera-flight-data.p.rapidapi.com/airport/search\"\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"flightera-flight-data.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers)\n\nprint(response.json())\n",
    "tool name": "Flightera Flight Data: airportSearch",
    "tool description": "Retrieves a list of airports based on country, bounding box, or timezone, allowing multiple parameters for precise filtering. This endpoint is part of Flightera's comprehensive service for flight status, on-time performance, and statistics, leveraging a database of 60k airports to ensure accurate and actionable data for flight planning and real-time analytics.",
    "API name": "airportSearch",
    "domain name": "Travel",
    "output_info": {
      "output_info_summary": "The provided output examples are exclusively error messages, which are returned when no search criteria are provided in the API call. A successful output is expected to contain a list of airports matching the specified filters (country, bounding box, or timezone), but its structure and the specific data fields for each airport are not present in the examples. The error message itself contains a contact email for support.",
      "output_format": "The provided examples are JSON objects (serialized as strings) that contain a single key, \"Error\", with a string value detailing the issue. The format of a successful response, which the tool description suggests would be a list of airports, cannot be determined from the given examples. It is likely a JSON array of objects, but this is an assumption."
    },
    "connected tools": [
      {
        "tool name": "Airbnb listings: Listings by lat lng",
        "connect params": [
          {
            "param": "lat",
            "description": "Can use latitude from airport search results"
          },
          {
            "param": "lng",
            "description": "Can use longitude from airport search results"
          }
        ]
      },
      {
        "tool name": "Airbnb listings: Prices and Availability by lat lng",
        "connect params": [
          {
            "param": "lat",
            "description": "Can use latitude from airport search results"
          },
          {
            "param": "lng",
            "description": "Can use longitude from airport search results"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportFlights",
        "connect params": [
          {
            "param": "ident",
            "description": "Can use airport identifier from airport search results"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportMetar",
        "connect params": [
          {
            "param": "ident",
            "description": "Can use airport identifier from airport search results"
          }
        ]
      },
      {
        "tool name": "Flightera Flight Data: airportStatistics",
        "connect params": [
          {
            "param": "ident",
            "description": "Can use airport identifier from airport search results"
          }
        ]
      },
      {
        "tool name": "Priceline com Provider: Search hotels locations by geolocation",
        "connect params": [
          {
            "param": "latitude",
            "description": "Can use latitude from airport search results"
          },
          {
            "param": "longitude",
            "description": "Can use longitude from airport search results"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Bybit",
    "parent tool description": "Public Data Bybit. Cryptocurrency prices and charts. Derivatives, Futures, Spot, USDC Contract",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Symbol",
        "default": "BTCUSD"
      }
    ],
    "optional_parameters": [],
    "code": "import requests\n\nurl = \"https://bybit4.p.rapidapi.com/v2/public/orderBook/L2\"\nquerystring = {\"symbol\": symbol}\n\nheaders = {\n    \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n    \"X-RapidAPI-Host\": \"bybit4.p.rapidapi.com\"\n}\n\nresponse = requests.get(url, headers=headers, params=querystring)\n\nprint(response.json())\n",
    "tool name": "Bybit: Order Book",
    "tool description": "Retrieves the orderbook for cryptocurrency trading pairs with a depth of 25 levels on each side, providing detailed buy and sell order information. This endpoint is part of Bybit's Public Data service, which offers cryptocurrency prices, charts, and market data across derivatives, futures, spot trading, and USDC contracts, enabling traders to analyze market liquidity and make informed decisions based on real-time order flow.",
    "API name": "Order Book",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool retrieves the current order book for a given cryptocurrency trading pair from the Bybit exchange. The output lists the top 25 buy orders (bids) and the top 25 sell orders (asks). For each price level, it provides the total size of orders, allowing traders to assess market depth, liquidity, and potential support/resistance levels.",
      "output_format": "A successful response is a JSON object containing a 'result' key, which is a list of individual order objects. Each object in the list specifies the 'symbol', 'price' (as a string), 'side' ('Buy' or 'Sell'), and 'size'. Error conditions or cases where the data is not found may return a simple, non-JSON string like 'Not Found' or an empty string."
    },
    "connected tools": [
      {
        "tool name": "Bybit: Merged Order Book",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book data can be used to query a merged order book for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Open Interest",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query open interest for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Funding Rate History",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query funding rate history for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Index Price Kline",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query index price kline for the same symbol"
          }
        ]
      },
      {
        "tool name": "Bybit: Get Mark Price Kline",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains trading pair information that can be used to query mark price kline for the same symbol"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The order book contains cryptocurrency trading pair information that can be used to query time series data for the same symbol"
          }
        ]
      }
    ]
  },
  {
    "parent tool name": "Twelve Data",
    "parent tool description": "Financial data provided for developers, to enter the world markets. Instant access for real-time and historical data of stocks, forex, crypto, ETFs, indices, and more. Read more in [documentation](https://twelvedata.com/docs) and start [here](https://twelvedata.com/apikey).",
    "required_parameters": [
      {
        "name": "symbol",
        "type": "STRING",
        "description": "Instrument symbol, can be any equity, index, ETF, forex or cryptocurrency\nE.g. `AAPL`, `EUR/USD`, `ETH/BTC`, ...",
        "default": "AAPL"
      },
      {
        "name": "interval",
        "type": "STRING",
        "description": "Interval between two consecutive points in time series\nSupports: `1min`, `5min`, `15min`, `30min`, `45min`, `1h`, `2h`, `4h`, `1day`, `1week`, `1month`",
        "default": "1min"
      }
    ],
    "optional_parameters": [
      {
        "name": "outputsize",
        "type": "NUMBER",
        "description": "Default `30` when no date parameters are set, otherwise set to maximum",
        "default": 30
      },
      {
        "name": "series_type",
        "type": "STRING",
        "description": "Supports: `open`, `high`, `low`, `close`",
        "default": "close"
      },
      {
        "name": "time_period",
        "type": "NUMBER",
        "description": "",
        "default": 9
      },
      {
        "name": "format",
        "type": "STRING",
        "description": "Value can be `CSV` or `JSON`\nDefault `JSON`",
        "default": "json"
      }
    ],
    "code": "import requests\n\nurl = \"https://twelve-data1.p.rapidapi.com/min\"\nquerystring = {\"symbol\": \"AAPL\", \"outputsize\": 30, \"series_type\": \"close\", \"interval\": \"1min\", \"time_period\": 9, \"format\": \"json\"}\n\nheaders = {\n            \"X-RapidAPI-Key\": \"SIGN-UP-FOR-KEY\",\n            \"X-RapidAPI-Host\": \"twelve-data1.p.rapidapi.com\"\n        }\n\nresponse = requests.get(url, headers=headers, params=querystring)\nprint(response.json())\n",
    "tool name": "Twelve Data: MIN",
    "tool description": "Retrieves the minimum value of a financial instrument over a specified period, requiring parameters like symbol and interval. This endpoint leverages Twelve Data's financial data API, which provides real-time and historical data on stocks, forex, crypto, ETFs, and indices, to deliver accurate minimum value insights. By accessing a comprehensive dataset spanning multiple asset classes, developers can efficiently analyze price trends and make informed decisions, streamlining integration into applications that require precise financial analytics.",
    "API name": "MIN",
    "domain name": "Finance",
    "output_info": {
      "output_info_summary": "The tool returns time-series data for the minimum value of a specified financial instrument (e.g., stock, forex, crypto) over a defined lookback period. The output includes a list of data points, each with a timestamp and the corresponding minimum value. It also contains metadata about the instrument, the interval (e.g., 1day, 4h), and the parameters used for the minimum calculation, making it useful for technical analysis and identifying price support levels.",
      "output_format": "The output is a single JSON object containing two primary keys: 'meta' and 'values'. The 'meta' key holds a nested object with metadata about the query and the financial instrument. The 'values' key contains an array of objects, where each object represents a time-series data point with a 'datetime' and the calculated 'min' value, which is returned as a string. There is no indication of pagination in the provided examples."
    },
    "connected tools": [
      {
        "tool name": "Alpha Vantage: TIME_SERIES_DAILY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_WEEKLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Quote Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_INTRADAY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: TIME_SERIES_MONTHLY",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Technical Indicators",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Alpha Vantage: Customizable Endpoint",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Twelve Data: MAX",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          },
          {
            "name": "interval",
            "description": "The interval from the MIN output metadata can be used as input"
          }
        ]
      },
      {
        "tool name": "Twelve Data: Time Series",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          },
          {
            "name": "interval",
            "description": "The interval from the MIN output metadata can be used as input"
          }
        ]
      },
      {
        "tool name": "Twelve Data: SMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          },
          {
            "name": "interval",
            "description": "The interval from the MIN output metadata can be used as input"
          }
        ]
      },
      {
        "tool name": "Twelve Data: EMA",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          },
          {
            "name": "interval",
            "description": "The interval from the MIN output metadata can be used as input"
          }
        ]
      },
      {
        "tool name": "Twelve Data: BBANDS",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          },
          {
            "name": "interval",
            "description": "The interval from the MIN output metadata can be used as input"
          }
        ]
      },
      {
        "tool name": "Twelve Data: RSI",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          },
          {
            "name": "interval",
            "description": "The interval from the MIN output metadata can be used as input"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/profile",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: stock/financial-data",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: market/news/{stock}",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      },
      {
        "tool name": "Yahoo Finance_v2: options",
        "connect params": [
          {
            "name": "symbol",
            "description": "The symbol from the MIN output can be used as input"
          }
        ]
      }
    ]
  }
]